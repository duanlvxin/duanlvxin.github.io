<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>type-challenges-medium</title>
      <link href="/2025/05/13/type-challenges-medium/"/>
      <url>/2025/05/13/type-challenges-medium/</url>
      
        <content type="html"><![CDATA[<h2 id="Get-Return-Type"><a href="#Get-Return-Type" class="headerlink" title="Get Return Type"></a>Get Return Type</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyReturnType</span>&lt;T&gt; = T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; (infer R) ? R : <span class="built_in">never</span></span><br></pre></td></tr></table></figure><h2 id="Omit-使用as-）"><a href="#Omit-使用as-）" class="headerlink" title="Omit (使用as*）"></a>Omit (使用as*）</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyOmit</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;[P <span class="keyword">in</span> keyof T <span class="keyword">as</span> P <span class="keyword">extends</span> K ? <span class="attr">never</span>: P] :T[P]&#125;</span><br></pre></td></tr></table></figure><h2 id="Reanonly-使用交集-amp"><a href="#Reanonly-使用交集-amp" class="headerlink" title="Reanonly (使用交集&amp;)"></a>Reanonly (使用交集&amp;)</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyReadonly2</span>&lt;T, K <span class="keyword">extends</span> keyof T =  keyof T&gt; = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [P <span class="keyword">in</span> K]: T[P]</span><br><span class="line">&#125; &amp; &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T <span class="keyword">as</span> P <span class="keyword">extends</span> K ? <span class="built_in">never</span> : P]: T[P]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyReadonly2</span>&lt;T, K <span class="keyword">extends</span> keyof T =  keyof T&gt; = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [P <span class="keyword">in</span> K]: T[P]</span><br><span class="line">&#125; &amp; <span class="title class_">MyOmit</span>&lt;T, K&gt;</span><br></pre></td></tr></table></figure><h2 id="Deep-Reanonly"><a href="#Deep-Reanonly" class="headerlink" title="Deep Reanonly"></a>Deep Reanonly</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">DeepReadonly</span>&lt;T&gt; = T <span class="keyword">extends</span> &#123;&#125; ? (T <span class="keyword">extends</span> (...<span class="attr">args</span>: []) =&gt; <span class="built_in">any</span> ? T : &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [key <span class="keyword">in</span> keyof T]: <span class="title class_">DeepReadonly</span>&lt;T[key]&gt;</span><br><span class="line">&#125;) : T</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高赞答案</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DeepReadonly</span>&lt;T&gt; = keyof T <span class="keyword">extends</span> <span class="built_in">never</span></span><br><span class="line">  ? T</span><br><span class="line">  : &#123; <span class="keyword">readonly</span> [k <span class="keyword">in</span> keyof T]: <span class="title class_">DeepReadonly</span>&lt;T[k]&gt; &#125;;</span><br></pre></td></tr></table></figure><h2 id="Tuple-to-Union"><a href="#Tuple-to-Union" class="headerlink" title="Tuple to Union"></a>Tuple to Union</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TupleToUnion</span>&lt;T&gt; = T <span class="keyword">extends</span> (infer U)[] ? U : <span class="built_in">never</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 另一种解法</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TupleToUnion</span>&lt;T <span class="keyword">extends</span> unknown[]&gt; = T[<span class="built_in">number</span>]</span><br></pre></td></tr></table></figure><h2 id="Chainable-Options"><a href="#Chainable-Options" class="headerlink" title="Chainable Options"></a>Chainable Options</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正解</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Chainable</span>&lt;R = <span class="built_in">object</span>&gt; = &#123;</span><br><span class="line">  option&lt;K <span class="keyword">extends</span>  <span class="built_in">string</span>, V&gt;(</span><br><span class="line">    <span class="attr">key</span>: K <span class="keyword">extends</span> keyof R ? <span class="built_in">never</span> : K,</span><br><span class="line">    <span class="attr">value</span>: V</span><br><span class="line">  ): <span class="title class_">Chainable</span>&lt;<span class="title class_">Omit</span>&lt;R, K&gt; &amp; <span class="title class_">Record</span>&lt;K, V&gt;&gt;</span><br><span class="line">  <span class="title function_">get</span>(): R</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 部分正确，无法处理option传入多次相同key值提示错误的情况（仅记录思路）</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Chainable</span> &#123;</span><br><span class="line">  option&lt;K <span class="keyword">extends</span> keyof <span class="built_in">any</span>, V&gt;(<span class="attr">key</span>: K, <span class="attr">value</span>: V): <span class="variable language_">this</span> &amp; &#123;[key <span class="keyword">in</span> K]: V&#125;</span><br><span class="line">  <span class="title function_">get</span>(): &#123;[key <span class="keyword">in</span> keyof <span class="variable language_">this</span> <span class="keyword">as</span> key <span class="keyword">extends</span> <span class="string">&#x27;option&#x27;</span> | <span class="string">&#x27;get&#x27;</span> ? <span class="built_in">never</span> : key]: <span class="variable language_">this</span>[key]&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Last-of-Array"><a href="#Last-of-Array" class="headerlink" title="Last of Array"></a>Last of Array</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Last</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [...<span class="built_in">any</span>[], infer U] ? U : <span class="built_in">never</span></span><br></pre></td></tr></table></figure><h2 id="Pop"><a href="#Pop" class="headerlink" title="Pop"></a>Pop</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Pop</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [] ? [] : T <span class="keyword">extends</span> [...infer U, <span class="built_in">any</span>] ? U : <span class="built_in">never</span></span><br></pre></td></tr></table></figure><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title class_">PromiseAll</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt;(<span class="attr">values</span>: <span class="keyword">readonly</span> [...T]):</span><br><span class="line">  <span class="title class_">Promise</span>&lt;&#123; [K <span class="keyword">in</span> keyof T]: <span class="title class_">Awaited</span>&lt;T[K]&gt; &#125;&gt;;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 部分正确解</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title class_">PromiseAll</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt;(<span class="attr">values</span>: <span class="keyword">readonly</span> [...T]):</span><br><span class="line">  <span class="title class_">Promise</span>&lt;&#123; [K <span class="keyword">in</span> keyof T]: T[K] <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;infer R&gt; ? R : T[K] &#125;&gt;;</span><br></pre></td></tr></table></figure><h2 id="Type-Lookup（条件类型-关系）"><a href="#Type-Lookup（条件类型-关系）" class="headerlink" title="Type Lookup（条件类型* - |关系）"></a>Type Lookup（条件类型* - |关系）</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">LookUp</span>&lt;U, T&gt; = U <span class="keyword">extends</span> &#123;<span class="attr">type</span>: T&#125; ? U : <span class="built_in">never</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>type-challenges-easy</title>
      <link href="/2025/05/12/type-challenges-easy/"/>
      <url>/2025/05/12/type-challenges-easy/</url>
      
        <content type="html"><![CDATA[<h2 id="题库代码仓库地址"><a href="#题库代码仓库地址" class="headerlink" title="题库代码仓库地址"></a>题库代码仓库地址</h2><p><a href="https://github.com/type-challenges/type-challenges">type-challenges</a></p><h2 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyPick</span>&lt;T, U <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> U]: T[U]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reanonly"><a href="#Reanonly" class="headerlink" title="Reanonly"></a>Reanonly</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyReadonly</span>&lt;T&gt; = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [key <span class="keyword">in</span> keyof T]: T[key]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Tuple-to-Object"><a href="#Tuple-to-Object" class="headerlink" title="Tuple to Object"></a>Tuple to Object</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TupleToObject</span>&lt;T <span class="keyword">extends</span> <span class="keyword">readonly</span> <span class="built_in">any</span>[]&gt; = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> T[<span class="built_in">number</span>]]: key</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="First-of-Array"><a href="#First-of-Array" class="headerlink" title="First of Array"></a>First of Array</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">First</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [] ? <span class="built_in">never</span> : T[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// 注意这里只能用中括号，不能用点</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">First</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T[<span class="string">&#x27;length&#x27;</span>] <span class="keyword">extends</span> <span class="number">0</span> ? <span class="built_in">never</span> : T[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">First</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [infer A, ...infer rest] ? A : <span class="built_in">never</span></span><br></pre></td></tr></table></figure><h2 id="length-of-Tuple"><a href="#length-of-Tuple" class="headerlink" title="length of Tuple"></a>length of Tuple</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Length</span>&lt;T <span class="keyword">extends</span> <span class="keyword">readonly</span> <span class="built_in">any</span>[]&gt; = T[<span class="string">&#x27;length&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="Exclude"><a href="#Exclude" class="headerlink" title="Exclude"></a>Exclude</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyExclude</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? <span class="built_in">never</span> : T</span><br></pre></td></tr></table></figure><h2 id="Awaited"><a href="#Awaited" class="headerlink" title="Awaited"></a>Awaited</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyAwaited</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="title class_">PromiseLike</span>&lt;infer U&gt; ?  (U <span class="keyword">extends</span> <span class="title class_">PromiseLike</span>&lt;<span class="built_in">any</span>&gt; ? <span class="title class_">MyAwaited</span>&lt;U&gt; : U ) : <span class="built_in">never</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高赞答案</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyAwaited</span>&lt;T <span class="keyword">extends</span> <span class="title class_">PromiseLike</span>&lt;<span class="built_in">any</span>&gt;&gt; = T <span class="keyword">extends</span> <span class="title class_">PromiseLike</span>&lt;infer U&gt;</span><br><span class="line">  ? U <span class="keyword">extends</span> <span class="title class_">PromiseLike</span>&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">    ? <span class="title class_">MyAwaited</span>&lt;U&gt;</span><br><span class="line">    : U</span><br><span class="line">  : <span class="built_in">never</span>;</span><br></pre></td></tr></table></figure><h2 id="If"><a href="#If" class="headerlink" title="If"></a>If</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">If</span>&lt;C <span class="keyword">extends</span> <span class="built_in">boolean</span>, T, F&gt; = C <span class="keyword">extends</span> <span class="literal">true</span> ? T : F</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Case1</span> = <span class="variable constant_">IF</span>&lt;<span class="built_in">boolean</span>, <span class="string">&quot;a&quot;</span>, <span class="number">2</span>&gt; <span class="comment">// 类型是 &quot;a&quot; | 2, 为什么？</span></span><br></pre></td></tr></table></figure><h2 id="Concat"><a href="#Concat" class="headerlink" title="Concat"></a>Concat</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Concat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[] | <span class="keyword">readonly</span> <span class="built_in">any</span>[], U <span class="keyword">extends</span> <span class="built_in">any</span>[] | <span class="keyword">readonly</span> <span class="built_in">any</span>[]&gt; = [...T, ...U]</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高赞答案：因为readonly unknown[]是unkonw[]的子类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Tuple</span> = <span class="keyword">readonly</span> unknown[];</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Concat</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Tuple</span>, U <span class="keyword">extends</span> <span class="title class_">Tuple</span>&gt; = [...T, ...U];</span><br></pre></td></tr></table></figure><h2 id="Includes"><a href="#Includes" class="headerlink" title="Includes"></a>Includes</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Includes</span>&lt;T <span class="keyword">extends</span> <span class="keyword">readonly</span> <span class="built_in">any</span>[], U&gt; = </span><br><span class="line">T <span class="keyword">extends</span> [infer A,...infer B] ? (<span class="title class_">Equal</span>&lt;U,A&gt; <span class="keyword">extends</span> <span class="literal">true</span> ? <span class="literal">true</span> : <span class="title class_">Includes</span>&lt;B, U&gt;) : <span class="literal">false</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高赞回答</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IsEqual</span>&lt;T, U&gt; =</span><br><span class="line">(&lt;G&gt;<span class="function">() =&gt;</span> G <span class="keyword">extends</span> T ? <span class="number">1</span> : <span class="number">2</span>) <span class="keyword">extends</span></span><br><span class="line">(&lt;G&gt;<span class="function">() =&gt;</span> G <span class="keyword">extends</span> U ? <span class="number">1</span> : <span class="number">2</span>)</span><br><span class="line">? <span class="literal">true</span></span><br><span class="line">: <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Includes</span>&lt;<span class="title class_">Value</span> <span class="keyword">extends</span> <span class="built_in">any</span>[], <span class="title class_">Item</span>&gt; =</span><br><span class="line"><span class="title class_">IsEqual</span>&lt;<span class="title class_">Value</span>[<span class="number">0</span>], <span class="title class_">Item</span>&gt; <span class="keyword">extends</span> <span class="literal">true</span></span><br><span class="line">? <span class="literal">true</span></span><br><span class="line">: <span class="title class_">Value</span> <span class="keyword">extends</span> [<span class="title class_">Value</span>[<span class="number">0</span>], ...infer rest]</span><br><span class="line">? <span class="title class_">Includes</span>&lt;rest, <span class="title class_">Item</span>&gt;</span><br><span class="line">: <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h2 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Push</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], U&gt; = [...T, U]</span><br></pre></td></tr></table></figure><h2 id="Unshift"><a href="#Unshift" class="headerlink" title="Unshift"></a>Unshift</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Unshift</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], U&gt; = [U, ...T]</span><br></pre></td></tr></table></figure><h2 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters(*)"></a>Parameters(*)</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyParameters</span>&lt;T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span>&gt; = T <span class="keyword">extends</span> (...<span class="attr">any</span>: infer S) =&gt; <span class="built_in">any</span> ? S : <span class="built_in">any</span> </span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>keyof</li><li>key in U</li><li>T[number]</li><li>infer &#x3D;&gt; 未知量，按顺序</li><li>T[length]</li><li>[…T, …U]</li></ul>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript类和接口</title>
      <link href="/2025/05/10/typescript%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/"/>
      <url>/2025/05/10/typescript%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="类和继承"><a href="#类和继承" class="headerlink" title="类和继承"></a>类和继承</h2><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><ul><li><p>示例</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Piece</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">position</span>: <span class="title class_">Position</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> color: Color,</span></span><br><span class="line"><span class="params">    file: File,</span></span><br><span class="line"><span class="params">    rank: Rank</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">position</span> = <span class="keyword">new</span> <span class="title class_">Position</span>(x, y)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ts类中的属性和方法支持三个访问修饰符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public 任何地方可以访问</span><br><span class="line">private 只能当前类的实例访问</span><br><span class="line">protected 当前类和字类的实例可访问</span><br></pre></td></tr></table></figure></li><li><p>使用<code>private readonly color: Color</code><br>自动把参数值赋给this &#x3D;&gt; this.color &#x3D; color<br>(position也是，不过如果不显示的写，position类型是Position | undefined)</p></li></ul><h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><p>使用abstract声明的类只能继承，不能实例化</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>类使用class关键字声明，扩展类用extends关键字</li><li>类可以是具体的，也可以是抽象的（abstract），抽象类可以有抽象属性和抽象方法<br>（抽象属性和抽象方法表示子类一定要实现，非抽象方法在抽象类中就要实现，否则会报错）</li><li>方法的可见性可以是private,protected,public(默认)。<br>方法分为实例方法和静态方法(static)</li><li>类可以有实例属性，可见性可以是private,protected,public(默认)。<br>实例属性可以在构造函数的参数中声明，也可通过属性初始化语句声明</li><li>声明实例属性时可以使用readonly把属性标记为只读</li></ul><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.显式调用, 使用super只能访问父类的方法，不能访问父类的属性</span></span><br><span class="line"><span class="variable language_">super</span>.<span class="title function_">take</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.在子类的constructor中调用：</span></span><br><span class="line"><span class="variable language_">super</span>()</span><br></pre></td></tr></table></figure><h2 id="以this作为返回类型"><a href="#以this作为返回类型" class="headerlink" title="以this作为返回类型"></a>以this作为返回类型</h2><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>interface</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li><p>与类型别名相似，接口是一种命名类型的方式。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Sushi</span> = &#123;</span><br><span class="line">  <span class="attr">calories</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">salty</span>: <span class="built_in">boolean</span>,</span><br><span class="line">  <span class="attr">tasty</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Sushi</span> &#123;</span><br><span class="line">  <span class="attr">calories</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">salty</span>: <span class="built_in">boolean</span>,</span><br><span class="line">  <span class="attr">tasty</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>把类型组合在一起：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Food</span> = &#123;</span><br><span class="line">  <span class="attr">calories</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">tasty</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Sushi</span> = <span class="title class_">Food</span> &amp; &#123;</span><br><span class="line">  <span class="attr">salty</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Cake</span> = <span class="title class_">Food</span> &amp; &#123;</span><br><span class="line">  <span class="attr">sweet</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">  <span class="attr">calories</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">tasty</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Sushi</span> <span class="keyword">extends</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">  <span class="attr">salty</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Cake</span> <span class="keyword">extends</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">  <span class="attr">sweet</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口和类型别名的区别？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.类型别名更为通用，右边可以是任何类型；而在接口中，右边必须是结构</span><br><span class="line">2.扩展接口时，ts会检查扩展的接口是否可赋值给被扩展的接口；类型会重载，不会报错</span><br><span class="line">3.同一作用域的多个同名接口将自动合并，同一作用域中的多个同名类型别名将报错</span><br></pre></td></tr></table></figure></li></ul><h3 id="声明合并"><a href="#声明合并" class="headerlink" title="声明合并"></a>声明合并</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>两个接口不能有冲突，如果一个接口中某个属性的类型是T，另一个接口中该属性的类型是U，会报错</li><li>如果接口中声明了泛型，那么两个接口要使用完全相同的方式声明泛型（名称不一样也是不行的）</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>接口可以声明实例属性，但是不能带有可见性修饰符，也不能用static关键字。readonly可以用</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">eat</span>(<span class="attr">food</span>: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">  <span class="title function_">sleep</span>(<span class="attr">hours</span>: <span class="built_in">number</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;doubao&#x27;</span></span><br><span class="line">  <span class="title function_">eat</span>(<span class="params">food: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Ate some &#x27;</span>, food, <span class="string">&#x27;. Mmm！&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sleep</span>(<span class="params">hours: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Slep for &#x27;</span>, hours, <span class="string">&#x27; hours&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现接口还是扩展抽象类"><a href="#实现接口还是扩展抽象类" class="headerlink" title="实现接口还是扩展抽象类"></a>实现接口还是扩展抽象类</h3><ul><li>接口更通用、更轻量；抽象类更具体，功能更丰富</li><li>如果多个类共用同一个实现，使用抽象类；如果需要轻量表示“这个类型是T型”，使用接口</li></ul><h2 id="类是结构化类型"><a href="#类是结构化类型" class="headerlink" title="类是结构化类型"></a>类是结构化类型</h2><ul><li>如果常规的对象定义了同样的属性或方法，也与类兼容</li><li>检查一个结构是否可赋值给一个类时，如果类中有private或protected字段，而且结构不是类或其子类的实例，<br>那么结构就不可赋值给类</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Zebra</span> &#123;</span><br><span class="line">  <span class="title function_">trot</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Poole</span> &#123;</span><br><span class="line">  <span class="title function_">trot</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ambleAround</span>(<span class="params">animal: Zebra</span>) &#123;</span><br><span class="line">  animal.<span class="title function_">trot</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">ambleAround</span>(<span class="keyword">new</span> <span class="title class_">Zebra</span>())</span><br><span class="line"><span class="title function_">ambleAround</span>(<span class="keyword">new</span> <span class="title class_">Poole</span>())</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; <span class="keyword">private</span> x = <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a: A</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="keyword">new</span> A)</span><br><span class="line"><span class="title function_">f</span>(<span class="keyword">new</span> B)</span><br><span class="line"><span class="title function_">f</span>(&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;) <span class="comment">// error </span></span><br></pre></td></tr></table></figure><h2 id="类既声明值也声明类型"><a href="#类既声明值也声明类型" class="headerlink" title="类既声明值也声明类型"></a>类既声明值也声明类型</h2><p><code>typeof Person</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> age: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PersonConstructor</span>: <span class="keyword">typeof</span> <span class="title class_">Person</span> = <span class="title class_">Person</span>;</span><br><span class="line"><span class="keyword">const</span> anotherPerson = <span class="keyword">new</span> <span class="title class_">PersonConstructor</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">25</span>);</span><br><span class="line">anotherPerson.<span class="title function_">greet</span>(); <span class="comment">// 输出: Hello, my name is Bob and I am 25 years old.</span></span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyMap</span>&lt;K,V&gt; &#123;</span><br><span class="line">  <span class="comment">// 1.constructor上不能声明泛型，应该在类声明中声明泛型</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">initKey: K, initVal: V</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="attr">k</span>: K): V &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">set</span>(<span class="attr">k</span>: K, <span class="attr">value</span>: V): <span class="built_in">void</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2.实例方法可以访问类声明中的泛型，并且可以自定义泛型</span></span><br><span class="line">  merge&lt;<span class="variable constant_">K1</span>, <span class="variable constant_">V1</span>&gt;(<span class="attr">map</span>: <span class="title class_">MyMap</span>&lt;<span class="variable constant_">K1</span>, <span class="variable constant_">V1</span>&gt;): <span class="title class_">MyMap</span>&lt;K | <span class="variable constant_">K1</span>, V | <span class="variable constant_">V1</span>&gt; &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3.静态方法不能方位类的泛型，这里的K,V是静态方法自己声明的</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">of</span>&lt;K, V&gt;(<span class="attr">k</span>: K, <span class="attr">v</span>: V): <span class="title class_">MyMap</span>&lt;K, V&gt; &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h2><p>混入其实就是一个函数，只不过这个函数接受一个类构造方法，返回一个类构造方法。</p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器可以用来装饰类、类方法、属性和方法参数。实际上就算是在装饰目标上调用函数。</p><h2 id="模拟final类"><a href="#模拟final类" class="headerlink" title="模拟final类"></a>模拟final类</h2><p>final：把类标记为不可扩展，把方法标记为不可覆盖</p><p>在ts中可以用private来模拟实现final类<br>(构造函数前用private,不能继承也不能new; 如果构造函数前是protected,那么可以继承，不能new)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">create</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>鞋子工厂:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Shoe</span> = &#123;</span><br><span class="line">  <span class="attr">purpose</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BalletFlat</span> <span class="keyword">implements</span> <span class="title class_">Shoe</span> &#123;</span><br><span class="line">  purpose = <span class="string">&#x27;dancing&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boot</span> <span class="keyword">implements</span> <span class="title class_">Shoe</span> &#123;</span><br><span class="line">  purpose = <span class="string">&#x27;woodcutting&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sneaker</span> <span class="keyword">implements</span> <span class="title class_">Shoe</span> &#123;</span><br><span class="line">  purpose = <span class="string">&#x27;walking&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> shoeFactory = &#123;</span><br><span class="line">  <span class="title function_">create</span>(<span class="attr">type</span>: <span class="string">&#x27;ballet&#x27;</span> | <span class="string">&#x27;boot&#x27;</span> | <span class="string">&#x27;sneaker&#x27;</span>): <span class="title class_">Shoe</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span>(<span class="keyword">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;ballet&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BalletFlat</span>()</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;boot&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Boot</span>()</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;sneaker&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Sneaker</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&gt; 优化</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ShoeFactory</span> = &#123;</span><br><span class="line">  <span class="title function_">create</span>(<span class="attr">type</span>: <span class="string">&#x27;balletFlat&#x27;</span>): <span class="title class_">BalletFlat</span></span><br><span class="line">  <span class="title function_">create</span>(<span class="attr">type</span>: <span class="string">&#x27;boot&#x27;</span>): <span class="title class_">Boot</span></span><br><span class="line">  <span class="title function_">create</span>(<span class="attr">type</span>: <span class="string">&#x27;sneaker&#x27;</span>): <span class="title class_">Sneaker</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">shoeFactory</span>: <span class="title class_">ShoeFactory</span> = &#123;</span><br><span class="line">  <span class="title function_">create</span>(<span class="attr">type</span>: <span class="string">&#x27;balletFlat&#x27;</span> | <span class="string">&#x27;boot&#x27;</span> | <span class="string">&#x27;sneaker&#x27;</span>): <span class="title class_">Shoe</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span>(<span class="keyword">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;balletFlat&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BalletFlat</span>()</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;boot&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Boot</span>()</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;sneaker&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Sneaker</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">RequestBuilder</span>()</span><br><span class="line">  .<span class="title function_">setURL</span>(<span class="string">&#x27;/users&#x27;</span>)</span><br><span class="line">  .<span class="title function_">setMethod</span>(<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line">  .<span class="title function_">setData</span>(&#123; <span class="string">&#x27;firstname&#x27;</span>: <span class="string">&#x27;Anna&#x27;</span> &#125;)</span><br><span class="line">  .<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RequestBuilder</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">data</span>: <span class="built_in">object</span> | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span> | <span class="string">&#x27;post&#x27;</span> | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">url</span>: <span class="built_in">string</span> | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">setURL</span>(<span class="attr">url</span>: <span class="built_in">string</span>): <span class="variable language_">this</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">url</span> = url</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setMethod</span>(<span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span> | <span class="string">&#x27;post&#x27;</span>): <span class="variable language_">this</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">method</span> = method</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setData</span>(<span class="attr">data</span>: <span class="built_in">object</span>): <span class="variable language_">this</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = data</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript函数</title>
      <link href="/2025/05/10/typescript%E5%87%BD%E6%95%B0/"/>
      <url>/2025/05/10/typescript%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="声明和调用函数"><a href="#声明和调用函数" class="headerlink" title="声明和调用函数"></a>声明和调用函数</h2><ol><li>ts函数中通常显示注解函数参数，返回参数能推导出来，可以不写</li><li>ts支持五种声明函数的方法：<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 具名函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet1</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;hello &#x27;</span> + name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 函数表达式</span></span><br><span class="line"><span class="keyword">let</span> greet2 = <span class="keyword">function</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;hello &#x27;</span> + name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 箭头函数表达式</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">greet3</span> = (<span class="params">name: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;hello &#x27;</span> + name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 箭头函数表达式简写形式</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">greet4</span> = (<span class="params">name: <span class="built_in">string</span></span>) =&gt; <span class="string">&#x27;hello &#x27;</span> + name</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 构造函数方法（危险，一般不用）</span></span><br><span class="line"><span class="keyword">let</span> greet5 = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;return &quot;hello &quot; + name&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="可选和默认参数"><a href="#可选和默认参数" class="headerlink" title="可选和默认参数"></a>可选和默认参数</h3><ul><li>可选参数用?, 默认参数用&#x3D;</li><li>可选参数必须放在末尾，默认参数不用</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">message:<span class="built_in">string</span>, userId?: <span class="built_in">string</span> = <span class="string">&#x27;Not signed in&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="comment">// xxx</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以简写为下面的形式, ts会根据默认参数进行推导userId的类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">message:<span class="built_in">string</span>, userId = <span class="string">&#x27;Not signed in&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="comment">// xxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><ul><li>arguments不安全（里面每一项都是any类型）</li><li>一个函数最多只能由一个剩余参数，且必须在参数列表的最后面</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sumVariadic</span>(<span class="params">...numbers: <span class="built_in">number</span>[]</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Console</span> &#123;</span><br><span class="line">  <span class="title function_">log</span>(message?:<span class="built_in">any</span>, ...<span class="attr">optionalParams</span>: <span class="built_in">any</span>[]): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="call，apply，bind"><a href="#call，apply，bind" class="headerlink" title="call，apply，bind"></a>call，apply，bind</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">add.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">10</span>, <span class="number">20</span>])</span><br><span class="line">add.<span class="title function_">call</span>(<span class="literal">null</span>, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">add.<span class="title function_">bind</span>(<span class="literal">null</span>, <span class="number">10</span>, <span class="number">20</span>)()</span><br></pre></td></tr></table></figure><h3 id="注解this的类型"><a href="#注解this的类型" class="headerlink" title="注解this的类型"></a>注解this的类型</h3><ul><li>this是.左侧的对象</li><li>如果函数使用this，在函数的第一个参数中声明this的类型。this不是常规的参数，而是保留字，<br>是函数签名的一部分。生成为js后，第一个this参数是没有的。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fancyDate</span>(<span class="params"><span class="variable language_">this</span>: <span class="built_in">Date</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.getDate()&#125;</span>/<span class="subst">$&#123;<span class="variable language_">this</span>.getMonth()&#125;</span>/<span class="subst">$&#123;<span class="variable language_">this</span>.getFullYear()&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成器和迭代器"><a href="#生成器和迭代器" class="headerlink" title="生成器和迭代器"></a>生成器和迭代器</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">generator</span>(): <span class="title class_">IterableIterator</span>&lt;number&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> a</span><br><span class="line">    <span class="keyword">const</span> total = a + b</span><br><span class="line">    a = b</span><br><span class="line">    b = total</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可迭代对象是有Symbol.iterator属性的对象，而且该属性的值是一个函数，返回一个迭代器</li><li>迭代器是定义有next方法的对象，该方法返回一个具有value和done属性的对象</li><li>generator是生成器，调用这个函数得到的值是一个可迭代对象, 也是迭代器，成为可迭代的迭代器。<br>因为该值既有Symbol.iterator, 也有next方法</li></ul><p>可迭代对象：<code>IterableIterator&lt;number&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = &#123;</span><br><span class="line">  *[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">yield</span> i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用迭代器"><a href="#使用迭代器" class="headerlink" title="使用迭代器"></a>使用迭代器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用for-of迭代一个迭代器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a <span class="keyword">of</span> numbers) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展开一个迭代器</span></span><br><span class="line"><span class="keyword">let</span> allNumbers = [...numbers]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构一个迭代器</span></span><br><span class="line"><span class="keyword">let</span> [one, two, ...rest] = numbers</span><br></pre></td></tr></table></figure><h3 id="调用签名"><a href="#调用签名" class="headerlink" title="调用签名"></a>调用签名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a: number, b: number</span>): number &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用签名如下：</span></span><br><span class="line">type <span class="title class_">Sum</span> = <span class="function">(<span class="params">a: number, b: number</span>) =&gt;</span> number</span><br></pre></td></tr></table></figure><ul><li>函数的调用签名只包含类型层面的代码，只有类型没有值</li><li>调用签名没法表示默认值（因为默认值是值，不是类型）</li><li>调用签名没有函数的定义体，无法推导出返回类型，所以必须显示注解</li></ul><p>使用函数调用签名重写log函数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">message:<span class="built_in">string</span>, userId?: <span class="built_in">string</span> = <span class="string">&#x27;Not signed in&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="comment">// xxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&gt;</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Log</span> = <span class="function">(<span class="params">message: <span class="built_in">string</span>, userId?: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">log</span>: <span class="title class_">Log</span> = <span class="keyword">function</span>(<span class="params">message, userId = <span class="string">&#x27;Not signed in&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="comment">// xxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上下文类型推导"><a href="#上下文类型推导" class="headerlink" title="上下文类型推导"></a>上下文类型推导</h3><p>1.示例一：<br>看下面的例子，message和userId不用显示注解类型，因为ts会进行上下文推导</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Log</span> = <span class="function">(<span class="params">message: <span class="built_in">string</span>, userId?: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">log</span>: <span class="title class_">Log</span> = <span class="keyword">function</span>(<span class="params">message, userId = <span class="string">&#x27;Not signed in&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="comment">// xxx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.示例二：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">times</span>(<span class="params">f: (index: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span>, n: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">    <span class="title function_">f</span>(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用times</span></span><br><span class="line"><span class="comment">// 1. 在行内声明，无需显式注解</span></span><br><span class="line"><span class="title function_">times</span>(<span class="function"><span class="params">n</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(n), <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 2. 非行内声明，需要显式注解，因为ts无法进行推导</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">n: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">times</span>(f, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="函数类型重载"><a href="#函数类型重载" class="headerlink" title="函数类型重载"></a>函数类型重载</h3><h4 id="两种写法"><a href="#两种写法" class="headerlink" title="两种写法"></a>两种写法</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简写</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Log</span> = <span class="function">(<span class="params">message: <span class="built_in">string</span>, userId?: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Log</span> = &#123;</span><br><span class="line">  (<span class="attr">message</span>: <span class="built_in">string</span>, userId?: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数重载只能用完整写法，因为type不能重复定义，示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Reserve</span> = &#123;</span><br><span class="line">  (<span class="attr">from</span>: <span class="title class_">Date</span>, <span class="attr">to</span>: <span class="title class_">Date</span>, <span class="attr">desination</span>: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">  (<span class="attr">from</span>: <span class="title class_">Date</span>, <span class="attr">desination</span>: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这样写会报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">reserve</span>: <span class="title class_">Reserve</span> = <span class="function">(<span class="params"><span class="keyword">from</span>, to, destination</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// xxx</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要声明组合后的调用签名，因为ts无法自动推导</span></span><br><span class="line"><span class="comment">// 注意：类型和数量都需要匹配！！！</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">reserve</span>: <span class="title class_">Reserve</span> = (<span class="attr">from</span>: <span class="title class_">Date</span>, <span class="attr">to</span>: <span class="title class_">Date</span> | <span class="built_in">string</span>, destination?: <span class="built_in">string</span> | <span class="literal">null</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常函数库里会这样写:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> add &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">addStr</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">addNum</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line">add.<span class="title function_">addNum</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">add.<span class="title function_">addStr</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="重载的签名需要具体一些"><a href="#重载的签名需要具体一些" class="headerlink" title="重载的签名需要具体一些"></a>重载的签名需要具体一些</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">CreateElement</span> = &#123;</span><br><span class="line">  (<span class="attr">tag</span>: <span class="string">&#x27;a&#x27;</span>): <span class="title class_">HTMLAnchorElement</span></span><br><span class="line">  (<span class="attr">tag</span>: <span class="string">&#x27;canvas&#x27;</span>): <span class="title class_">HTMLCanvasElement</span></span><br><span class="line">  (<span class="attr">tag</span>: <span class="string">&#x27;table&#x27;</span>): <span class="title class_">HTMLTableElement</span></span><br><span class="line">  (<span class="attr">tag</span>: <span class="built_in">string</span>): <span class="title class_">HTMLElement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Add</span> = &#123;</span><br><span class="line">  (<span class="attr">a</span>: <span class="built_in">string</span>, <span class="attr">b</span>: <span class="built_in">string</span>): <span class="built_in">string</span></span><br><span class="line">  (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&gt; 使用泛型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Add</span> = &#123;</span><br><span class="line">  &lt;T&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: T): T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么时候绑定泛型"><a href="#什么时候绑定泛型" class="headerlink" title="什么时候绑定泛型"></a>什么时候绑定泛型</h3><ol><li>写法一<br>T在<code>调用签名</code>中声明，ts将在调用Filter类型的函数时为T绑定具体类型</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Filter</span> = &#123;</span><br><span class="line">  &lt;T&gt;(<span class="attr">array</span>: T[], <span class="attr">f</span>: <span class="function">(<span class="params">item: T</span>) =&gt;</span> <span class="built_in">boolean</span>): T[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">filter</span>: <span class="title class_">Filter</span> = <span class="function">(<span class="params">array, f</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> array.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">f</span>(item))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>写法二<br>把T的作用域限定在<code>类型别名</code>Filter中，ts则要求在使用Filter时显示绑定类型</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Filter</span>&lt;T&gt; = &#123;</span><br><span class="line">  (<span class="attr">array</span>: T[], <span class="attr">f</span>: <span class="function">(<span class="params">item: T</span>) =&gt;</span> <span class="built_in">boolean</span>): T[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NumberFilter</span> = <span class="title class_">Filter</span>&lt;<span class="built_in">number</span>&gt; </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StringFilter</span> = <span class="title class_">Filter</span>&lt;<span class="built_in">string</span>&gt; </span><br><span class="line"><span class="keyword">let</span> <span class="attr">numberFilter</span>: <span class="title class_">NumberFilter</span> = <span class="keyword">function</span>(<span class="params">array, f</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> array.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">f</span>(item))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">stringFilter</span>: <span class="title class_">NumberFilter</span> = <span class="keyword">function</span>(<span class="params">array, f</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> array.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">f</span>(item))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可以在哪声明泛型"><a href="#可以在哪声明泛型" class="headerlink" title="可以在哪声明泛型"></a>可以在哪声明泛型</h3><p>只要是ts支持的声明调用签名的方法，都有办法在签名中加入泛型</p><h3 id="泛型推导"><a href="#泛型推导" class="headerlink" title="泛型推导"></a>泛型推导</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> mymap&lt;T, U&gt;(<span class="attr">array</span>: T[], <span class="attr">f</span>: <span class="function">(<span class="params">item: T</span>) =&gt;</span> U): U[] &#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    result[i] = <span class="title function_">f</span>(array[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标悬浮到mymap上，能看到T和U分别对应的string和boolean</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="title function_">mymap</span>([<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>], <span class="function">(<span class="params">item</span>) =&gt;</span> <span class="title class_">Boolean</span>(item))</span><br></pre></td></tr></table></figure><ul><li>也可以显式注解泛型，不过显式注解泛型时，所有的泛型都必须注解</li><li>ts会检查推导出来的每个泛型是否可赋值给显式绑定的泛型，如果不可赋值，将报错</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mymap&lt;<span class="built_in">string</span>, <span class="built_in">boolean</span>&gt;([<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>], <span class="function">(<span class="params">item</span>) =&gt;</span> <span class="title class_">Boolean</span>(item))</span><br><span class="line"><span class="comment">// 会报错</span></span><br><span class="line">mymap&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt;([<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>], <span class="function">(<span class="params">item</span>) =&gt;</span> <span class="title class_">Boolean</span>(item))</span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line">mymap&lt;<span class="built_in">string</span>, <span class="built_in">number</span> | <span class="built_in">boolean</span>&gt;([<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>], <span class="function">(<span class="params">item</span>) =&gt;</span> <span class="title class_">Boolean</span>(item))</span><br></pre></td></tr></table></figure><h3 id="泛型别名"><a href="#泛型别名" class="headerlink" title="泛型别名"></a>泛型别名</h3><ul><li><p>在类型别名中只有这一个地方可以声明泛型：紧随类型别名的名称之后，赋值运算符(&#x3D;)之前</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyEvent</span>&lt;T&gt; = &#123;</span><br><span class="line">  <span class="attr">target</span>: T,</span><br><span class="line">  <span class="attr">type</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用MyEvent这样的泛型时，必须显式绑定类型参数</p></li><li><p>泛型别名也可以在函数的签名中使用，Ts为T绑定类型时，还会自动为MyEvent绑定</p></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> triggerEvent&lt;T&gt;(<span class="attr">event</span>: <span class="title class_">MyEvent</span>&lt;T&gt;): <span class="built_in">void</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">triggerEvent</span>(&#123;</span><br><span class="line">  <span class="attr">target</span>: <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#mybutton&#x27;</span>),</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;mouseover&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推导出来T是Element | null</span></span><br></pre></td></tr></table></figure><h3 id="受限的多态"><a href="#受限的多态" class="headerlink" title="受限的多态"></a>受限的多态</h3><p>使用extends</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TreeNode</span> = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> mapNode&lt;T <span class="keyword">extends</span> <span class="title class_">TreeNode</span>&gt;(<span class="attr">node</span>: T, <span class="attr">f</span>: <span class="function">(<span class="params">value: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...node,</span><br><span class="line">    <span class="attr">value</span>: <span class="title function_">f</span>(node.<span class="property">value</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型默认类型"><a href="#泛型默认类型" class="headerlink" title="泛型默认类型"></a>泛型默认类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyEvent</span>&lt;<span class="title class_">Type</span> <span class="keyword">extends</span> <span class="built_in">string</span>, <span class="title class_">Target</span> <span class="keyword">extends</span> <span class="title class_">HTMLElement</span> = <span class="title class_">HTMLElement</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">Type</span>,</span><br><span class="line">  <span class="attr">target</span>: <span class="title class_">Target</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-vue3新特性</title>
      <link href="/2024/09/01/vue-vue3%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2024/09/01/vue-vue3%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="组合式-API-Composition-API"><a href="#组合式-API-Composition-API" class="headerlink" title="组合式 API (Composition API)"></a>组合式 API (Composition API)</h2><blockquote><p>通过组合式 API，我们可以使用导入的 API 函数来描述组件逻辑。在单文件组件中，组合式 API 通常会与 <code>&lt;script setup&gt; </code>搭配使用。这个 setup attribute 是一个标识，告诉 Vue 需要在编译时进行一些处理，让我们可以更简洁地使用组合式 API。比如，<code>&lt;script setup&gt;</code> 中的导入和顶层变量&#x2F;函数都能够在模板中直接使用。(也可以使用setup函数)</p></blockquote><p>文档：<a href="https://cn.vuejs.org/api/sfc-script-setup.html">https://cn.vuejs.org/api/sfc-script-setup.html</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应式状态</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用来修改状态、触发更新的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">  count.<span class="property">value</span>++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生命周期钩子</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The initial count is <span class="subst">$&#123;count.value&#125;</span>.`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Count is: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="ref函数和reactive函数"><a href="#ref函数和reactive函数" class="headerlink" title="ref函数和reactive函数"></a>ref函数和reactive函数</h2><p>都是用来将数据变成响应式的。<br>ref一般用于基本类型数据，reactive一般用于引用类型数据<br>(但引用类型数据用ref也可以，只不过需要加.value)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increase</span>(<span class="params">count</span>) &#123;</span><br><span class="line">  count.<span class="property">value</span>++ <span class="comment">// 需要用.value,在template中可以省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = <span class="title function_">reative</span>([</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;xiaoming&#x27;</span> &#125;</span><br><span class="line">])</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">  list.<span class="title function_">push</span>(&#123; <span class="attr">id</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(), <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vue3响应式原理（简单版）"><a href="#vue3响应式原理（简单版）" class="headerlink" title="vue3响应式原理（简单版）"></a>vue3响应式原理（简单版）</h3><p>通过Proxy进行属性拦截</p><h2 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h2><p>props,attrs,slots,emit</p><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p><a href="https://cn.vuejs.org/guide/components/props.html">https://cn.vuejs.org/guide/components/props.html</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">defineProps&lt;&#123;</span><br><span class="line">  <span class="attr">msg</span>: <span class="built_in">string</span></span><br><span class="line">&#125;&gt;()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">msg</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="string">&#x27;默认数据&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">len</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="attrs"><a href="#attrs" class="headerlink" title="attrs"></a>attrs</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useAttrs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> attrs = <span class="title function_">useAttrs</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="slots（插槽）"><a href="#slots（插槽）" class="headerlink" title="slots（插槽）"></a>slots（插槽）</h3><p><a href="https://cn.vuejs.org/guide/components/slots.html">https://cn.vuejs.org/guide/components/slots.html</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useSlots &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> slots = <span class="title function_">useSlots</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(slots.<span class="property">default</span> &amp;&amp; slots.<span class="title function_">default</span>())</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>打印结果示例：<br><img src="/img/vue3-slots.png" alt="打印结果示例"></p><h3 id="emit"><a href="#emit" class="headerlink" title="emit"></a>emit</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>])</span><br><span class="line"><span class="title function_">emit</span>(<span class="string">&#x27;change&#x27;</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="toRef函数"><a href="#toRef函数" class="headerlink" title="toRef函数"></a>toRef函数</h2><p><a href="https://cn.vuejs.org/api/reactivity-utilities.html#toref">https://cn.vuejs.org/api/reactivity-utilities.html#toref</a></p><p>使用扩展运算符，这是state内部的属性不是响应式的，使用toRef可以将属性变成响应式的</p><h2 id="computed函数"><a href="#computed函数" class="headerlink" title="computed函数"></a>computed函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> total = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> amount * price</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="watch和watchEffect函数"><a href="#watch和watchEffect函数" class="headerlink" title="watch和watchEffect函数"></a>watch和watchEffect函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>vue-router v4版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  router.<span class="title function_">push</span>(<span class="string">&#x27;/abc&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="v-for-和-v-if-一起使用"><a href="#v-for-和-v-if-一起使用" class="headerlink" title="v-for 和 v-if 一起使用"></a>v-for 和 v-if 一起使用</h3><p>vue2是v-for优先级高<br>vue3是v-if优先级高</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题-node篇</title>
      <link href="/2024/09/01/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-node%E7%AF%87/"/>
      <url>/2024/09/01/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-node%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="如何理解node中模块的概念"><a href="#如何理解node中模块的概念" class="headerlink" title="如何理解node中模块的概念"></a>如何理解node中模块的概念</h2><p>模块就是通过 <em>函数作用域</em>，把变量和函数，进行隔离</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">moduleA</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="attr">bar</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">    <span class="attr">baz</span>: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">moduleA</span>().<span class="property">foo</span></span><br></pre></td></tr></table></figure><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable language_">module</span> = &#123;</span><br><span class="line">  <span class="attr">exports</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params"><span class="variable language_">module</span>, <span class="built_in">exports</span></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> bar = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> baz = <span class="string">&#x27;world&#x27;</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    bar, baz</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// exports.bar = bar // 可以</span></span><br><span class="line">  <span class="comment">// exports = &#123;bar, baz&#125; // 无效</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">resolve</span>(<span class="variable language_">module</span>, <span class="variable language_">module</span>.<span class="property">exports</span>);</span><br></pre></td></tr></table></figure><p>&#x3D;&gt; 多个模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable language_">module</span> = &#123;</span><br><span class="line">  <span class="string">&#x27;./src/A.js&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">exports</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;./src/B.js&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">exports</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">require</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">module</span>[id].<span class="property">exports</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"><span class="variable language_">module</span>, <span class="built_in">exports</span>, <span class="built_in">require</span></span>)&#123;</span><br><span class="line">  <span class="comment">// ./src/A.js文件内容</span></span><br><span class="line">  <span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">&#x27;./src/B.js&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> bar = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> baz = <span class="string">&#x27;2&#x27;</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    foo, bar, baz</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="variable language_">module</span>[<span class="string">&#x27;./src/A.js&#x27;</span>], <span class="variable language_">module</span>[<span class="string">&#x27;./src/A.js&#x27;</span>].<span class="property">exports</span>, <span class="built_in">require</span>)</span><br></pre></td></tr></table></figure><h2 id="简述require的模块加载机制"><a href="#简述require的模块加载机制" class="headerlink" title="简述require的模块加载机制"></a>简述require的模块加载机制</h2><p>核心模块，包模块(node_modules), 相对路径，绝对路径<br>缓存 (<code>cache[module]</code>)</p><h3 id="实现一个简单的requrie"><a href="#实现一个简单的requrie" class="headerlink" title="实现一个简单的requrie"></a>实现一个简单的requrie</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; readFileSync &#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Script</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">my_require</span>(<span class="params">filename</span>) &#123;</span><br><span class="line">  <span class="comment">// 读取文件</span></span><br><span class="line">  <span class="comment">// 需要区分核心模块，包模块(node_modules), 相对路径，绝对路径，这里只考虑相对路径和绝对路径</span></span><br><span class="line">  <span class="keyword">const</span> fileContent = <span class="title function_">readFileSync</span>(path.<span class="title function_">resolve</span>(__dirname, filename))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用函数包裹原始代码</span></span><br><span class="line">  <span class="keyword">const</span> wrapper = <span class="string">`function(required, module, exports)&#123;</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;fileContent&#125;</span></span></span><br><span class="line"><span class="string">  &#125;`</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable language_">module</span> = &#123;</span><br><span class="line">    <span class="attr">exports</span>: &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 运行原始代码</span></span><br><span class="line">  <span class="keyword">const</span> script = <span class="keyword">new</span> <span class="title class_">Script</span>(wrapper)</span><br><span class="line">  <span class="keyword">const</span> func = script.<span class="title function_">runInThisContext</span>()</span><br><span class="line"></span><br><span class="line">  <span class="title function_">func</span>(my_require, <span class="variable language_">module</span>, <span class="variable language_">module</span>.<span class="property">exports</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">global</span>.<span class="property">my_require</span> = my_require</span><br></pre></td></tr></table></figure><h3 id="为什么浏览器端不能使用require"><a href="#为什么浏览器端不能使用require" class="headerlink" title="为什么浏览器端不能使用require"></a>为什么浏览器端不能使用require</h3><p>require的模块加载机制，是通过读取文件，以及script上下文执行实现的，浏览器端不能读</p><h3 id="扩展：import-x2F-export的实现？"><a href="#扩展：import-x2F-export的实现？" class="headerlink" title="扩展：import&#x2F;export的实现？"></a>扩展：import&#x2F;export的实现？</h3><h2 id="如何理解node的事件循环模型"><a href="#如何理解node的事件循环模型" class="headerlink" title="如何理解node的事件循环模型"></a>如何理解node的事件循环模型</h2><p><img src="/img/shijianxunhuan.png" alt="node的事件循环模型"></p><p>下面的代码的输出顺序？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 started&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout0&#x27;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout1&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">  <span class="title function_">setImmediate</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setImmediate&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;nextTick&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise.then&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure><p>输出顺序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// script start</span></span><br><span class="line"><span class="comment">// async1 started</span></span><br><span class="line"><span class="comment">// async2</span></span><br><span class="line"><span class="comment">// promise1</span></span><br><span class="line"><span class="comment">// promise2</span></span><br><span class="line"><span class="comment">// script end</span></span><br><span class="line"><span class="comment">// nextTick</span></span><br><span class="line"><span class="comment">// async end</span></span><br><span class="line"><span class="comment">// promise.then</span></span><br><span class="line"><span class="comment">// setTimeout0</span></span><br><span class="line"><span class="comment">// setImmediate</span></span><br><span class="line"><span class="comment">// setTimeout1</span></span><br></pre></td></tr></table></figure><h2 id="如何描述异步I-x2F-O的流程"><a href="#如何描述异步I-x2F-O的流程" class="headerlink" title="如何描述异步I&#x2F;O的流程"></a>如何描述异步I&#x2F;O的流程</h2><h3 id="什么是阻塞和非阻塞"><a href="#什么是阻塞和非阻塞" class="headerlink" title="什么是阻塞和非阻塞"></a>什么是阻塞和非阻塞</h3><p>系统在接受输入的时候，再到输出的过程中，能不能接受别的输入<br>比如说请求文件上传，loading过程中用户还能执行别的操作，那这个上传过程就是非阻塞的。</p><h3 id="如何实现非阻塞？"><a href="#如何实现非阻塞？" class="headerlink" title="如何实现非阻塞？"></a>如何实现非阻塞？</h3><h4 id="方案一：多线程"><a href="#方案一：多线程" class="headerlink" title="方案一：多线程"></a>方案一：多线程</h4><p>线程上下文切换，线程同步（加锁）</p><h4 id="方案二：单线程-异步I-x2F-O"><a href="#方案二：单线程-异步I-x2F-O" class="headerlink" title="方案二：单线程 + 异步I&#x2F;O"></a>方案二：单线程 + 异步I&#x2F;O</h4><ul><li>I&#x2F;O不能阻塞CPU的执行</li><li>不要带来锁的问题</li><li>性能要OK</li></ul><h2 id="简述V8的垃圾回收机制以及关键点"><a href="#简述V8的垃圾回收机制以及关键点" class="headerlink" title="简述V8的垃圾回收机制以及关键点"></a>简述V8的垃圾回收机制以及关键点</h2><h3 id="为什么会产生垃圾"><a href="#为什么会产生垃圾" class="headerlink" title="为什么会产生垃圾"></a>为什么会产生垃圾</h3><h3 id="垃圾回收，是如何实现的？"><a href="#垃圾回收，是如何实现的？" class="headerlink" title="垃圾回收，是如何实现的？"></a>垃圾回收，是如何实现的？</h3><p>分代式垃圾回收机制</p><ul><li>Major 主垃圾回收器 &#x2F; 新生代 -&gt; scavenge算法 ：对等分成两份，一半是active区域，一般是空闲区域；当active区域快满了，把活着的放到空闲区域，然后清除整个active区域。这次操作之后active区域和空闲区域的作用就反转了，原先的active区域就变成了空闲区，原先的空闲区就变成了active区。（多次操作的变量会升级到老生代）</li><li>Minio 副垃圾回收器 &#x2F; 老生代 -&gt; 标记清除 : 从根节点触发，所有的能够索引到的，都不是垃圾，其他的，就是垃圾</li></ul><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p>常见导致内存泄漏的行为：<br>1.全局变量<br>2.函数闭包<br>3.事件监听</p><p>检测方法：<br>1.heapdunp<br>2.chrome devtools 快照</p><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><h3 id="简述对于node的多进程架构的理解"><a href="#简述对于node的多进程架构的理解" class="headerlink" title="简述对于node的多进程架构的理解"></a>简述对于node的多进程架构的理解</h3><ul><li>Mater - Worker的一个双向通信协议</li><li>fork</li></ul><p>cluster?</p><h3 id="如何创建子进程，以及子进程crash之后如何重启"><a href="#如何创建子进程，以及子进程crash之后如何重启" class="headerlink" title="如何创建子进程，以及子进程crash之后如何重启"></a>如何创建子进程，以及子进程crash之后如何重启</h3><h4 id="创建子进程的方式？"><a href="#创建子进程的方式？" class="headerlink" title="创建子进程的方式？"></a>创建子进程的方式？</h4><p>spawn fork exec execFile</p><ul><li><p>spawn(最基础的)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在父进程中</span></span><br><span class="line"><span class="keyword">const</span> cp = <span class="title function_">spawn</span>(<span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;child.js&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">cwd</span>: path.<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;./worker&#x27;</span>)</span><br><span class="line">  <span class="attr">stdio</span>: [process.<span class="property">stdio</span>, process.<span class="property">stdout</span>, process.<span class="property">stderr</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在子进程中</span></span><br><span class="line">process.<span class="property">stdout</span>.<span class="title function_">write</span>(<span class="string">&#x27;sum&#x27;</span> + sum);</span><br></pre></td></tr></table></figure></li><li><p>fork</p></li><li><p>exec</p></li><li><p>execFile</p></li></ul><h4 id="如何重启"><a href="#如何重启" class="headerlink" title="如何重启"></a>如何重启</h4><ul><li>一般在生成环境中，使用pm2进行进程守护，父进程监听子进程的退出事件，监听到之后重启</li><li>进行健康检查，定时启动一个进程，查询目标进程的健康状态</li></ul><h2 id="简述koa中间件原理"><a href="#简述koa中间件原理" class="headerlink" title="简述koa中间件原理"></a>简述koa中间件原理</h2><p><a href="https://github.com/koajs/compose/blob/master/index.js">https://github.com/koajs/compose/blob/master/index.js</a></p><p>就是实现下面的compose函数，next的时候调用下一个函数，最后往回执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> middleware = []</span><br><span class="line">middleware.<span class="title function_">push</span>(<span class="function">(<span class="params">ctx, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br><span class="line">middleware.<span class="title function_">push</span>(<span class="function">(<span class="params">ctx, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line">middleware.<span class="title function_">push</span>(<span class="function">(<span class="params">ctx, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="title function_">compose</span>(middleware)</span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">// 1 3 5 6 4 2</span></span><br></pre></td></tr></table></figure><p>核心原理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">middleware</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">context, next</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatch</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dispatch</span>(<span class="params">i</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(i &gt; middleware.<span class="property">length</span>) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">      <span class="keyword">if</span>(i === middleware.<span class="property">length</span>) fn = next || (<span class="function">()=&gt;</span>&#123;&#125;)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">const</span> result = <span class="title function_">fn</span>(context, dispatch.<span class="title function_">bind</span>(<span class="literal">null</span>, i + <span class="number">1</span>))</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-贪心和动规</title>
      <link href="/2024/08/26/%E7%AE%97%E6%B3%95-%E8%B4%AA%E5%BF%83%E5%92%8C%E5%8A%A8%E8%A7%84/"/>
      <url>/2024/08/26/%E7%AE%97%E6%B3%95-%E8%B4%AA%E5%BF%83%E5%92%8C%E5%8A%A8%E8%A7%84/</url>
      
        <content type="html"><![CDATA[<h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p>都是根据局部最优解，得出全局最优解</p><h2 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h2><h3 id="饼干问题"><a href="#饼干问题" class="headerlink" title="饼干问题"></a>饼干问题</h3><p><a href="https://leetcode.cn/problems/assign-cookies/description/">https://leetcode.cn/problems/assign-cookies/description/</a></p><blockquote><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。<br>对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &gt;&#x3D; g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是满足尽可能多的孩子，并输出这个最大数值。</p></blockquote><p>解法：把每块饼干给最小能满足的孩子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findContentChildren = <span class="keyword">function</span> (<span class="params">g, s</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 胃口从小到大排序，饼干从小到大排序</span></span><br><span class="line">  g.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b);</span><br><span class="line">  s.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b);</span><br><span class="line">  <span class="comment">// 看饼干能否满足孩子，可以的话饼干+1,孩子+1</span></span><br><span class="line">  <span class="comment">// 不能的话看下一块饼干，一直往下找</span></span><br><span class="line">  <span class="comment">// 如果找到最后还没有，返回结果；</span></span><br><span class="line">  <span class="keyword">let</span> i=<span class="number">0</span>,j = <span class="number">0</span>; <span class="comment">// 当前孩子和饼干位置</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;g.<span class="property">length</span> &amp;&amp; j&lt;s.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(s[j]&gt;=g[i]) &#123;</span><br><span class="line">        j++</span><br><span class="line">        i++</span><br><span class="line">        result++</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        j++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="跳跃游戏"><a href="#跳跃游戏" class="headerlink" title="跳跃游戏"></a>跳跃游戏</h3><p><a href="https://leetcode.cn/problems/jump-game/description/">https://leetcode.cn/problems/jump-game/description/</a></p><blockquote><p>给你一个非负整数数组 nums ，你最初位于数组的 第一个下标 。数组中的每个元素代表你在该位置可以跳跃的最大长度。<br>判断你是否能够到达最后一个下标，如果可以，返回 true ；否则，返回 false 。</p></blockquote><p>解法：每次计算下一步能跳到的最远距离</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canJump = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> low = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> high = nums[low] + low <span class="comment">// 第一个可以跳到的最远的位置</span></span><br><span class="line">    <span class="keyword">if</span>(high &gt;= nums.<span class="property">length</span> - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> next = high <span class="comment">// 下一个可以跳到的最远的位置</span></span><br><span class="line">    <span class="keyword">let</span> nextIndex = low + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = low + <span class="number">1</span>; i &lt;= high; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> dis = nums[i] + i</span><br><span class="line">      <span class="keyword">if</span>(dis &gt; next) &#123;</span><br><span class="line">        next = dis</span><br><span class="line">        nextIndex = i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(next === high) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span>(next &gt;= nums.<span class="property">length</span> - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    low = nextIndex</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="跳跃游戏2"><a href="#跳跃游戏2" class="headerlink" title="跳跃游戏2"></a>跳跃游戏2</h3><p><a href="https://leetcode.cn/problems/jump-game-ii/description/">https://leetcode.cn/problems/jump-game-ii/description/</a></p><blockquote><p>给定一个长度为 n 的 0 索引整数数组 nums。初始位置为 nums[0]。<br>每个元素 nums[i] 表示从索引 i 向前跳转的最大长度。换句话说，如果你在 nums[i] 处，你可以跳转到任意 nums[i + j] 处</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jump = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果只有一个值，一步也不用跳</span></span><br><span class="line">  <span class="keyword">if</span> (nums.<span class="property">length</span> === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> low = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> step = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> high = nums[low] + low <span class="comment">// 第一个可以跳到的最远的位置</span></span><br><span class="line">    <span class="keyword">if</span> (high &gt;= nums.<span class="property">length</span> - <span class="number">1</span>) <span class="keyword">return</span> step</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> next = high <span class="comment">// 下一个可以跳到的最远的位置</span></span><br><span class="line">    <span class="keyword">let</span> nextIndex = low + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = low + <span class="number">1</span>; i &lt;= high; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> dis = nums[i] + i</span><br><span class="line">      <span class="keyword">if</span> (dis &gt; next) &#123;</span><br><span class="line">        next = dis</span><br><span class="line">        nextIndex = i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (next &gt;= nums.<span class="property">length</span> - <span class="number">1</span>) <span class="keyword">return</span> step + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    step++</span><br><span class="line">    low = nextIndex</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="买入股票的最佳时机"><a href="#买入股票的最佳时机" class="headerlink" title="买入股票的最佳时机"></a>买入股票的最佳时机</h3><blockquote><p>给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。<br>你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。<br>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。</p></blockquote><p>解法：记录遇到的最小值，如果当前值大于它，那么有利润并计算利润；否则，更新最小值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">prices</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="keyword">function</span> (<span class="params">prices</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (prices.<span class="property">length</span> === <span class="number">0</span> || prices.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span>, preMin = prices[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; prices.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(prices[i] &gt; preMin) &#123;</span><br><span class="line">      max = <span class="title class_">Math</span>.<span class="title function_">max</span>(max, prices[i] - preMin)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      preMin = prices[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>（其他解法，可忽略）<br>回溯法（超时）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 从里面取出两个，后一个的值减去前一个最大</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="keyword">function</span> (<span class="params">prices</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> path = []</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">backTrace</span>(<span class="params">startIndex = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(path.<span class="property">length</span> === <span class="number">2</span>) &#123;</span><br><span class="line">      max = <span class="title class_">Math</span>.<span class="title function_">max</span>(max, path[<span class="number">1</span>] - path[<span class="number">0</span>])</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=startIndex; i&lt;prices.<span class="property">length</span>;i++) &#123;</span><br><span class="line">      path.<span class="title function_">push</span>(prices[i])</span><br><span class="line">      <span class="title function_">backTrace</span>(i+<span class="number">1</span>)</span><br><span class="line">      path.<span class="title function_">pop</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">backTrace</span>()</span><br><span class="line">  <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>双层遍历（超时）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxProfit = <span class="keyword">function</span>(<span class="params">prices</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(prices.<span class="property">length</span>===<span class="number">0</span>||prices.<span class="property">length</span>===<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;prices.<span class="property">length</span>-<span class="number">1</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=i+<span class="number">1</span>;j&lt;prices.<span class="property">length</span>;j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(prices[j]-prices[i]&gt;res)&#123;</span><br><span class="line">        res = prices[j] - prices[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="买入股票的最佳时机2"><a href="#买入股票的最佳时机2" class="headerlink" title="买入股票的最佳时机2"></a>买入股票的最佳时机2</h3><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/description/">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/description/</a></p><blockquote><p>给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。<br>在每一天，你可以决定是否购买和&#x2F;或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。<br>返回 你能获得的 最大 利润 。</p></blockquote><p>思路：只要一涨，就去卖；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">prices</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="keyword">function</span>(<span class="params">prices</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;prices.<span class="property">length</span>;i++) &#123;</span><br><span class="line">    sum += prices[i] &gt; prices[i-<span class="number">1</span>] ? prices[i] - prices[i-<span class="number">1</span>] : <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p><a href="https://blog.csdn.net/qq_47540091/article/details/125505851">https://blog.csdn.net/qq_47540091/article/details/125505851</a></p><h3 id="机器人走路-不同路径"><a href="#机器人走路-不同路径" class="headerlink" title="机器人走路(不同路径)"></a>机器人走路(不同路径)</h3><p><a href="https://leetcode.cn/problems/unique-paths/description/">https://leetcode.cn/problems/unique-paths/description/</a></p><blockquote><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。<br>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。<br>问总共有多少条不同的路径？</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uniquePaths = <span class="keyword">function</span> (<span class="params">m, n</span>) &#123;</span><br><span class="line">  <span class="comment">// dp[i][j] = dp[i][j-1] + dp[i-1][j]</span></span><br><span class="line">  <span class="keyword">let</span> dp = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(m), <span class="function">() =&gt;</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">      dp[i][j] = dp[i][j - <span class="number">1</span>] + dp[i - <span class="number">1</span>][j]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="机器人走路2（不同路径2）"><a href="#机器人走路2（不同路径2）" class="headerlink" title="机器人走路2（不同路径2）"></a>机器人走路2（不同路径2）</h3><p><a href="https://leetcode.cn/problems/unique-paths-ii/description/">https://leetcode.cn/problems/unique-paths-ii/description/</a></p><blockquote><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。<br>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish”）。<br>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？<br>网格中的障碍物和空位置分别用 1 和 0 来表示。</p></blockquote><p>解法：<br><code>dp[i][j] = dp[i][j] = obstacleGrid[i][j] === 1 ? 0 : dp[i-1][j] + dp[i][j-1]</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">obstacleGrid</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> uniquePathsWithObstacles = <span class="keyword">function</span> (<span class="params">obstacleGrid</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> m = obstacleGrid.<span class="property">length</span>, n = obstacleGrid[<span class="number">0</span>].<span class="property">length</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> dp = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(m), <span class="function">() =&gt;</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>))</span><br><span class="line">  dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span> - obstacleGrid[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">  <span class="comment">// 初始化第一行和第一列</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obstacleGrid[i][<span class="number">0</span>] === <span class="number">0</span> &amp;&amp; dp[i - <span class="number">1</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">      dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][j] === <span class="number">0</span> &amp;&amp; dp[<span class="number">0</span>][j - <span class="number">1</span>]) &#123;</span><br><span class="line">      dp[<span class="number">0</span>][j] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">      dp[i][j] = obstacleGrid[i][j] === <span class="number">1</span> ? <span class="number">0</span> : dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另一种考虑方式：（需要额外判断终点是否有障碍物）<br><code>dp[i][j] = (1 - obstacleGrid[i - 1][j]) * dp[i - 1][j] + (1 - obstacleGrid[i][j - 1]) * dp[i][j - 1]</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uniquePathsWithObstacles = <span class="keyword">function</span> (<span class="params">obstacleGrid</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> m = obstacleGrid.<span class="property">length</span>, n = obstacleGrid[<span class="number">0</span>].<span class="property">length</span></span><br><span class="line">  <span class="comment">// 如果起点终点本身有障碍物，那么路径是0</span></span><br><span class="line">  <span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] === <span class="number">1</span> || obstacleGrid[m - <span class="number">1</span>][n - <span class="number">1</span>] === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> dp = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(m), <span class="function">() =&gt;</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>))</span><br><span class="line">  dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">  <span class="comment">// 初始化第一行和第一列</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obstacleGrid[i][<span class="number">0</span>] === <span class="number">0</span> &amp;&amp; dp[i - <span class="number">1</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">      dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][j] === <span class="number">0</span> &amp;&amp; dp[<span class="number">0</span>][j - <span class="number">1</span>]) &#123;</span><br><span class="line">      dp[<span class="number">0</span>][j] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">      dp[i][j] = (<span class="number">1</span> - obstacleGrid[i - <span class="number">1</span>][j]) * dp[i - <span class="number">1</span>][j] + (<span class="number">1</span> - obstacleGrid[i][j - <span class="number">1</span>]) * dp[i][j - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="最小路径和"><a href="#最小路径和" class="headerlink" title="最小路径和"></a>最小路径和</h3><p><a href="https://leetcode.cn/problems/0i0mDW/description/">https://leetcode.cn/problems/0i0mDW/description/</a></p><blockquote><p>给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。<br>说明：一个机器人每次只能向下或者向右移动一步。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j]</span></span><br><span class="line"><span class="keyword">var</span> minPathSum = <span class="keyword">function</span> (<span class="params">grid</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> m = grid.<span class="property">length</span>, n = grid[<span class="number">0</span>].<span class="property">length</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> dp = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(m), <span class="function">() =&gt;</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">  dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化第一行和第一列</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">    dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + grid[i][<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">    dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>] + grid[<span class="number">0</span>][j]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">      dp[i][j] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]) + grid[i][j]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="最大子数组和-最大和的连续子数组"><a href="#最大子数组和-最大和的连续子数组" class="headerlink" title="最大子数组和(最大和的连续子数组)"></a>最大子数组和(最大和的连续子数组)</h3><p><a href="https://leetcode.cn/problems/maximum-subarray/">https://leetcode.cn/problems/maximum-subarray/</a></p><blockquote><p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。<br>子数组是数组中的一个连续部分。</p></blockquote><p>动态规划解法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 对于到末尾到第i个下标的数组，在第i个位置上，可以要前面的，也可以不要前面的：Math.max(dp[i-1] + nums[i], nums[i])</span></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> dp = [nums[<span class="number">0</span>]], max = nums[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    dp[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(dp[i-<span class="number">1</span>] + nums[i], nums[i])</span><br><span class="line">    max = <span class="title class_">Math</span>.<span class="title function_">max</span>(dp[i], max)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>贪心解法：<br>只要你有负数（前面的子数组），那么一定会拉低我的值，我就不要你</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxSubArray = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.<span class="property">length</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      sum = sum + nums[i]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sum = nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="title class_">Math</span>.<span class="title function_">max</span>(result, sum)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h3><p><a href="https://leetcode.cn/problems/longest-increasing-subsequence/description/">https://leetcode.cn/problems/longest-increasing-subsequence/description/</a></p><blockquote><p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。<br>子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dp[i]表示子数组最后一个值取到i的子数组，他的最长严格递增子序列的长度</span></span><br><span class="line"><span class="comment">// 找到前面比当前值小的那个数dp[k] dp值最大的+1</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLIS = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> dp = [<span class="number">1</span>], max = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> tempMax = <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> k = i - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(k&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(nums[k] &lt; nums[i]) &#123;</span><br><span class="line">          tempMax = <span class="title class_">Math</span>.<span class="title function_">max</span>(tempMax, dp[k] + <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      k--</span><br><span class="line">    &#125;</span><br><span class="line">    dp[i] = tempMax</span><br><span class="line">    max = <span class="title class_">Math</span>.<span class="title function_">max</span>(max, dp[i])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="零钱兑换"><a href="#零钱兑换" class="headerlink" title="零钱兑换"></a>零钱兑换</h3><p><a href="https://leetcode.cn/problems/coin-change/description/">https://leetcode.cn/problems/coin-change/description/</a></p><blockquote><p>给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。<br>计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。<br>你可以认为每种硬币的数量是无限的。<br>示例 1：<br>输入：coins &#x3D; [1, 2, 5], amount &#x3D; 11<br>输出：3<br>解释：11 &#x3D; 5 + 5 + 1</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> coinChange = <span class="keyword">function</span> (<span class="params">coins, amount</span>) &#123;</span><br><span class="line">  <span class="comment">// dp[amout]表示凑amount块钱，需要的最少硬币数</span></span><br><span class="line">  <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="title class_">Array</span>(amount + <span class="number">1</span>)</span><br><span class="line">  dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 这个硬币数量一定小于amount+1(因为硬币最小值是1，最多需要amount个1块钱硬币)</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; amount + <span class="number">1</span>; i++) &#123;</span><br><span class="line">    dp[i] = amount + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// dp[11] =&gt; Math.min(12， dp[10] + 1, dp[9] + 1, dp[5] + 1) // 分别是最大值以及取1，2，5得到的最优解</span></span><br><span class="line">  <span class="comment">// dp[i] = Math.min(dp[i], dp[i-coins[j]] + 1) 如果i&gt;=coins[j]</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; amount + <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; coins.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(i &gt;= coins[j]) &#123;</span><br><span class="line">        dp[i] = <span class="title class_">Math</span>.<span class="title function_">min</span>(dp[i], dp[i - coins[j]] + <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[amount] === amount + <span class="number">1</span> ? -<span class="number">1</span> : dp[amount]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="填满背包的最大价格"><a href="#填满背包的最大价格" class="headerlink" title="填满背包的最大价格"></a>填满背包的最大价格</h3><blockquote><p>背包问题 给定两个长度都为N的数组weights和values，weights[i]和values[i]分别代表 i号物品的重量和价值 给定一个正数bag，表示一个载重bag的袋子，装的物品不能超过这个重量 返回能装下的最大价值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">maxValue</span>(<span class="params">weights, values, bag</span>) &#123;</span><br><span class="line">  <span class="comment">// dp[i]表示载重为i的袋子能装下的最大价值</span></span><br><span class="line">  <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="title class_">Array</span>(bag + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> len = weights.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;bag+<span class="number">1</span>;i++) &#123; <span class="comment">// 遍历所有载重，得到所有dp</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;len;j++) &#123; <span class="comment">// 遍历所有物品</span></span><br><span class="line">      <span class="keyword">if</span>(i&gt;=weights[j]) &#123; <span class="comment">// 如果物品重量小于载重，那么可以放</span></span><br><span class="line">        dp[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(dp[i], dp[i-weights[j]] + values[j])</span><br><span class="line">        max = <span class="title class_">Math</span>.<span class="title function_">max</span>(max, dp[i])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-数据结构相关</title>
      <link href="/2024/08/24/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9B%B8%E5%85%B3/"/>
      <url>/2024/08/24/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="实现一个LRU缓存"><a href="#实现一个LRU缓存" class="headerlink" title="实现一个LRU缓存"></a>实现一个LRU缓存</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lru = <span class="keyword">new</span> <span class="title class_">LRUCache</span>(<span class="number">2</span>)</span><br><span class="line">lru.<span class="title function_">push</span>(<span class="number">1</span>)</span><br><span class="line">lru.<span class="title function_">push</span>(<span class="number">2</span>) <span class="comment">// [1,2]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lru.<span class="title function_">get</span>(<span class="number">1</span>)) <span class="comment">// [2,1], 打印1</span></span><br><span class="line"></span><br><span class="line">lru.<span class="title function_">push</span>(<span class="number">3</span>,<span class="number">3</span>) <span class="comment">// [1,3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lru.<span class="title function_">get</span>(<span class="number">2</span>)) <span class="comment">// 打印-1</span></span><br><span class="line">lru.<span class="title function_">push</span>(<span class="number">4</span>,<span class="number">4</span>) <span class="comment">// [3,4]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lru.<span class="title function_">get</span>(<span class="number">1</span>)) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">maxLen = <span class="number">3</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">maxLen</span> = maxLen</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">push</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentLen = <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span></span><br><span class="line">    <span class="comment">// 如果当前长度+1&lt;=this.maxLen，那么不需要去除，把queue里最早的那个val去除，在最后面插入</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>item===val)</span><br><span class="line">    <span class="keyword">if</span>(currentLen + <span class="number">1</span> &lt;= <span class="variable language_">this</span>.<span class="property">maxLen</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(index!==-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">splice</span>(index,<span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(val)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则，如果queue中存在这个值，那么去除；否则，淘汰第一个；在最后面插入</span></span><br><span class="line">      <span class="keyword">if</span>(index!==-<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">splice</span>(index,<span class="number">1</span>)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">shift</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(val)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">val</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>item===val)</span><br><span class="line">    <span class="keyword">if</span>(index === -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="comment">// 找到的这个值，需要更新位置到最后面（最新鲜）</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(val)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求环状链表"><a href="#求环状链表" class="headerlink" title="求环状链表"></a>求环状链表</h2><p>双指针(<a href="https://leetcode.cn/problems/linked-list-cycle/">https://leetcode.cn/problems/linked-list-cycle/</a>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hasCycle = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = head</span><br><span class="line">    <span class="keyword">let</span> p2 = head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p1!==<span class="literal">null</span> &amp;&amp; p2!==<span class="literal">null</span>) &#123;</span><br><span class="line">        p1 = p1.<span class="property">next</span></span><br><span class="line">        <span class="keyword">if</span>(p2.<span class="property">next</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        p2 = p2.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">        <span class="keyword">if</span>(p1===p2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉树的前序、中序、后序遍历"><a href="#二叉树的前序、中序、后序遍历" class="headerlink" title="二叉树的前序、中序、后序遍历"></a>二叉树的前序、中序、后序遍历</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">preTraverse</span>(<span class="params">root, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!root) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">callback</span>(root)</span><br><span class="line">  <span class="title function_">preTraverse</span>(root.<span class="property">left</span>)</span><br><span class="line">  <span class="title function_">preTraverse</span>(root.<span class="property">right</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">midTraverse</span>(<span class="params">root, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!root) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">preTraverse</span>(root.<span class="property">left</span>)</span><br><span class="line">  <span class="title function_">callback</span>(root)</span><br><span class="line">  <span class="title function_">preTraverse</span>(root.<span class="property">right</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">postTraverse</span>(<span class="params">root, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!root) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">preTraverse</span>(root.<span class="property">left</span>)</span><br><span class="line">  <span class="title function_">preTraverse</span>(root.<span class="property">right</span>)</span><br><span class="line">  <span class="title function_">callback</span>(root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树的层序遍历"><a href="#树的层序遍历" class="headerlink" title="树的层序遍历"></a>树的层序遍历</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">traverse</span>(<span class="params">root, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!root) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> queue = [root]</span><br><span class="line">  <span class="keyword">while</span>(queue.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>()</span><br><span class="line">    <span class="title function_">traverse</span>(node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(node.<span class="property">children</span>) &#123;</span><br><span class="line">      node.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">        queue.<span class="title function_">push</span>(item)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目：<a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/description/">https://leetcode.cn/problems/binary-tree-level-order-traversal/description/</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> levelOrder = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> queue = [root];</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> len = queue.<span class="property">length</span>; <span class="comment">// 这一层有几个节点</span></span><br><span class="line">        <span class="keyword">let</span> temp = []; <span class="comment">// 存储这一层的节点</span></span><br><span class="line">        <span class="keyword">while</span>(len) &#123;</span><br><span class="line">           <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>();</span><br><span class="line">           len--</span><br><span class="line">           temp.<span class="title function_">push</span>(node.<span class="property">val</span>);</span><br><span class="line">           <span class="comment">// 下一层的节点</span></span><br><span class="line">           <span class="keyword">if</span>(node.<span class="property">left</span>) &#123;</span><br><span class="line">            queue.<span class="title function_">push</span>(node.<span class="property">left</span>)</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(node.<span class="property">right</span>) &#123;</span><br><span class="line">            queue.<span class="title function_">push</span>(node.<span class="property">right</span>)</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把这一层节点放入结果中</span></span><br><span class="line">        res.<span class="title function_">push</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="获取二叉树的层级"><a href="#获取二叉树的层级" class="headerlink" title="获取二叉树的层级"></a>获取二叉树的层级</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepth</span>(<span class="params">root</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="title function_">deepth</span>(root.<span class="property">left</span>), <span class="title function_">deepth</span>(root.<span class="property">right</span>)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现类数组转数组"><a href="#实现类数组转数组" class="headerlink" title="实现类数组转数组"></a>实现类数组转数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="variable language_">arguments</span>]</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>)</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">splice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">0</span>)</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat</span>.<span class="title function_">apply</span>([], <span class="variable language_">arguments</span>)</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">apply</span>([], <span class="variable language_">arguments</span>)</span><br></pre></td></tr></table></figure><h2 id="实现DOM转JSON"><a href="#实现DOM转JSON" class="headerlink" title="实现DOM转JSON"></a>实现DOM转JSON</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#head_wrapper&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只是一个简单实现，当然复杂的还要节点类型以及dom.attributes</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dom2json</span>(<span class="params">dom</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">  obj.<span class="property">tag</span> = dom.<span class="property">tagName</span></span><br><span class="line">  obj.<span class="property">children</span> = []</span><br><span class="line">  dom.<span class="property">childNodes</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">child</span>)=&gt;</span> obj.<span class="property">children</span>.<span class="title function_">push</span>(<span class="title function_">dom2json</span>(child)))</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">dom2json</span>(dom))</span><br></pre></td></tr></table></figure><h2 id="实现JSON转DOM"><a href="#实现JSON转DOM" class="headerlink" title="实现JSON转DOM"></a>实现JSON转DOM</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vnode = &#123;</span><br><span class="line">  <span class="attr">tag</span>: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">  <span class="attr">attrs</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;app&#x27;</span>, <span class="attr">class</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">children</span>: [&#123;</span><br><span class="line">    <span class="attr">tag</span>: <span class="string">&#x27;ul&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;<span class="attr">tag</span>: <span class="string">&#x27;li&#x27;</span>, <span class="attr">children</span>: [<span class="string">&#x27;list 1&#x27;</span>]&#125;,</span><br><span class="line">      &#123;<span class="attr">tag</span>: <span class="string">&#x27;li&#x27;</span>, <span class="attr">children</span>: [<span class="string">&#x27;list 2&#x27;</span>]&#125;,</span><br><span class="line">      &#123;<span class="attr">tag</span>: <span class="string">&#x27;li&#x27;</span>, <span class="attr">children</span>: [<span class="string">&#x27;list 2&#x27;</span>]&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">json2dom</span>(<span class="params">vnode</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> vnode===<span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="title class_">String</span>(vnode))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> node = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(vnode.<span class="property">tag</span>)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> vnode.<span class="property">attrs</span>) &#123;</span><br><span class="line">    node.<span class="title function_">setAttribute</span>(key, vnode.<span class="property">attrs</span>[key])</span><br><span class="line">  &#125;</span><br><span class="line">  vnode.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">child</span>)=&gt;</span>&#123;</span><br><span class="line">    node.<span class="title function_">appendChild</span>(<span class="title function_">json2dom</span>(child))</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">json2dom</span>(vnode))</span><br></pre></td></tr></table></figure><h2 id="实现树转数组"><a href="#实现树转数组" class="headerlink" title="实现树转数组"></a>实现树转数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;根节点&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&#x27;一级节点1&#x27;</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&#x27;一级节点2&#x27;</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&#x27;一级节点3&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换结果为：</span></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123;id: 1, text:&#x27;根节点&#x27;, parentId: 0&#125;,</span></span><br><span class="line"><span class="comment">//   &#123;id: 2, text:&#x27;一级节点1&#x27;, parentId: 1&#125;,</span></span><br><span class="line"><span class="comment">//   &#123;id: 3, text:&#x27;一级节点2&#x27;, parentId: 1&#125;,</span></span><br><span class="line"><span class="comment">//   &#123;id: 4, text:&#x27;一级节点3&#x27;, parentId: 1&#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">tree2arr</span>(<span class="params">tree, parentId = <span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  <span class="keyword">if</span>(!tree || !tree.<span class="property">length</span>) <span class="keyword">return</span> res</span><br><span class="line">  tree.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">    item.<span class="property">parentId</span> = parentId</span><br><span class="line">    res.<span class="title function_">push</span>(item)</span><br><span class="line">    res.<span class="title function_">push</span>(...<span class="title function_">tree2arr</span>(item.<span class="property">children</span>, item.<span class="property">id</span>))</span><br><span class="line">    <span class="keyword">delete</span> item.<span class="property">children</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现数组转树"><a href="#实现数组转树" class="headerlink" title="实现数组转树"></a>实现数组转树</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>:<span class="string">&#x27;根节点&#x27;</span>, <span class="attr">parentId</span>: <span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>:<span class="string">&#x27;一级节点1&#x27;</span>, <span class="attr">parentId</span>: <span class="number">1</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>:<span class="string">&#x27;一级节点2&#x27;</span>, <span class="attr">parentId</span>: <span class="number">1</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">text</span>:<span class="string">&#x27;一级节点3&#x27;</span>, <span class="attr">parentId</span>: <span class="number">1</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换结果为</span></span><br><span class="line"><span class="comment">// [&#123;</span></span><br><span class="line"><span class="comment">//   id: 1,</span></span><br><span class="line"><span class="comment">//   text: &#x27;根节点&#x27;,</span></span><br><span class="line"><span class="comment">//   children: [&#123;</span></span><br><span class="line"><span class="comment">//     id: 2,</span></span><br><span class="line"><span class="comment">//     text: &#x27;一级节点1&#x27;</span></span><br><span class="line"><span class="comment">//   &#125;,&#123;</span></span><br><span class="line"><span class="comment">//     id: 3,</span></span><br><span class="line"><span class="comment">//     text: &#x27;一级节点2&#x27;</span></span><br><span class="line"><span class="comment">//   &#125;,&#123;</span></span><br><span class="line"><span class="comment">//     id: 4,</span></span><br><span class="line"><span class="comment">//     text: &#x27;一级节点3&#x27;</span></span><br><span class="line"><span class="comment">//   &#125;]</span></span><br><span class="line"><span class="comment">// &#125;]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arr2tree</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> roots = []</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> parent = arr.<span class="title function_">find</span>(<span class="function">(<span class="params">item2</span>)=&gt;</span>item.<span class="property">parentId</span> === item2.<span class="property">id</span>)</span><br><span class="line">    <span class="keyword">if</span>(!parent) &#123; <span class="comment">// 根节点</span></span><br><span class="line">      roots.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(!parent.<span class="property">children</span>) parent.<span class="property">children</span> = []</span><br><span class="line">      parent.<span class="property">children</span>.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> roots</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现对象打平"><a href="#实现对象打平" class="headerlink" title="实现对象打平"></a>实现对象打平</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;a&#x27;</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;c&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">&#x27;d&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="string">&#x27;e&#x27;</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;&#x27;a.b.c&#x27;: 1, &#x27;a.b.d&#x27;: 2, &#x27;a.b.e&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flattenObj</span>(<span class="params">obj, prefix = <span class="string">&#x27;&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">let</span> value = obj[key]</span><br><span class="line">    <span class="keyword">let</span> currentKey = prefix === <span class="string">&#x27;&#x27;</span> ? key : prefix + <span class="string">&#x27;.&#x27;</span> + key</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> value !== <span class="string">&#x27;object&#x27;</span> || value === <span class="literal">null</span>) &#123;</span><br><span class="line">      res[currentKey] = value</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> theObj = <span class="title function_">flattenObj</span>(value, currentKey)</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(res, theObj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-排序与双指针</title>
      <link href="/2024/08/23/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%8F%8C%E6%8C%87%E9%92%88/"/>
      <url>/2024/08/23/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%8F%8C%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>O(n^2)的排序算法：冒泡，选择，插入<br>O(nlogn)的排序算法：快排，归并<br>O(n)的排序算法：桶排序，计数排序，基数排序</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>1.第一轮，相邻的两个两两比较，把最小的冒泡到第1个<br>2.第二轮，相邻的两个两两比较，把第二小的冒泡到第2个<br>3.重复len-1轮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = arr.<span class="property">length</span> - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j - <span class="number">1</span>] &gt; arr[j]) &#123;</span><br><span class="line">        [arr[j - <span class="number">1</span>], arr[j]] = [arr[j], arr[j - <span class="number">1</span>]]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者反过来想，把最大的冒泡到最后面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = arr.<span class="property">length</span> - <span class="number">1</span>; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        [arr[j + <span class="number">1</span>], arr[j]] = [arr[j], arr[j + <span class="number">1</span>]]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>1.第一轮，选取最小的放到第1个<br>2.第二轮，选取第二小的放到第2个<br>3.重复len-1轮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>-<span class="number">1</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> minIndex = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=i+<span class="number">1</span>;j&lt;arr.<span class="property">length</span>;j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j]&lt;arr[minIndex]) &#123;</span><br><span class="line">        minIndex = j</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(minIndex!==i) &#123;</span><br><span class="line">      [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><ol><li>从第2个开始，往前找，如果一直是大于这个数的，把这些数往后移，最后插入这个数</li><li>从第3个，重复这个过程（len-1轮）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentVal = arr[i]</span><br><span class="line">    <span class="keyword">let</span> j = i - <span class="number">1</span> <span class="comment">// j是需要插入的位置的前一个位置</span></span><br><span class="line">    <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; currentVal) &#123;</span><br><span class="line">        arr[j + <span class="number">1</span>] = arr[j]</span><br><span class="line">        j--</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[j + <span class="number">1</span>] = currentVal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>1.从数组中选取一个作为pivot,把小于等于pivot的移到左边，把大于pivot的移到右边<br>2.继续快速排序左边的和右边的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非原地排序版本</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pivotIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>(<span class="number">0</span>, arr.<span class="property">length</span>));</span><br><span class="line">  <span class="keyword">const</span> pivot = arr[pivotIndex];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> left = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>item&lt;=pivot &amp;&amp; index!==pivotIndex);</span><br><span class="line">  <span class="keyword">let</span> right = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>item&gt;pivot);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [...<span class="title function_">quickSort</span>(left), pivot, ...<span class="title function_">quickSort</span>(right)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原地排序版本</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">q</span>(<span class="params">arr, low, high</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(high-low&lt;=<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> pivotIndex = low + <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>(<span class="number">0</span>, high+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">const</span> pivot = arr[pivotIndex];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> i=low,j=high</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span>(arr[i]&lt;=pivot) &#123;</span><br><span class="line">        i++</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(arr[j]&gt;pivot) &#123;</span><br><span class="line">        j--</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(i&gt;=j) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      [arr[i], arr[j]] = [arr[j], arr[i]]</span><br><span class="line">      i++</span><br><span class="line">      j--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把pivot放到合适的位置上</span></span><br><span class="line">    [arr[pivotIndex] , arr[j]] = [arr[j], arr[pivotIndex]]</span><br><span class="line"></span><br><span class="line">    <span class="title function_">q</span>(arr, low, j - <span class="number">1</span>)</span><br><span class="line">    <span class="title function_">q</span>(arr, j + <span class="number">1</span>, high)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">q</span>(arr, <span class="number">0</span> ,arr.<span class="property">length</span> - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>1.排序左边的，排序右边的<br>2.合并两个有序数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> mid = (arr.<span class="property">length</span> &gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; <span class="comment">// 这里不减一的话数组长度为2时会无限递归</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> left = <span class="title function_">mergeSort</span>(arr.<span class="title function_">slice</span>(<span class="number">0</span>, mid + <span class="number">1</span>))</span><br><span class="line">  <span class="keyword">const</span> right = <span class="title function_">mergeSort</span>(arr.<span class="title function_">slice</span>(mid + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">arr1, arr2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; arr1.<span class="property">length</span> &amp;&amp; j &lt; arr2.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr1[i] &lt; arr2[j]) &#123;</span><br><span class="line">        res.<span class="title function_">push</span>(arr1[i++])</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">push</span>(arr2[j++])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &lt; arr1.<span class="property">length</span>) &#123;</span><br><span class="line">      res = res.<span class="title function_">concat</span>(arr1.<span class="title function_">slice</span>(i))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j &lt; arr2.<span class="property">length</span>) &#123;</span><br><span class="line">      res = res.<span class="title function_">concat</span>(arr2.<span class="title function_">slice</span>(j))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(left, right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>1、构建最大堆(从最后一个非叶子节点开始，下沉每一个节点)<br>2、将堆头元素和堆尾元素交换，堆的大小减一<br>3、重新将堆头元素下沉到指定位置<br>4、重复2，3步骤，直到堆的大小为1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">heapSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="comment">// 构建最大堆</span></span><br><span class="line">  <span class="keyword">let</span> n = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n/<span class="number">2</span>) - <span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="title function_">heapify</span>(arr, n , i)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(n&gt;<span class="number">1</span>) &#123;</span><br><span class="line">    [arr[<span class="number">0</span>], arr[n-<span class="number">1</span>]] = [arr[n-<span class="number">1</span>], arr[<span class="number">0</span>]]</span><br><span class="line">    n--</span><br><span class="line">    <span class="title function_">heapify</span>(arr, n, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">heapify</span>(<span class="params">arr, n, i</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> largestIndex = i;</span><br><span class="line">  <span class="keyword">let</span> leftIndex = <span class="number">2</span> * i + <span class="number">1</span>, rightIndex = <span class="number">2</span> * i + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(leftIndex &lt; n &amp;&amp; arr[leftIndex] &gt; arr[largestIndex]) &#123;</span><br><span class="line">    largestIndex = leftIndex</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(rightIndex &lt; n &amp;&amp; arr[rightIndex] &gt; arr[largestIndex]) &#123;</span><br><span class="line">    largestIndex = rightIndex</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(largestIndex !== i) &#123;</span><br><span class="line">    [arr[i], arr[largestIndex]] = [arr[largestIndex], arr[i]]</span><br><span class="line">    <span class="title function_">heapify</span>(arr, n, largestIndex)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><p>按照一定的算法分为n个桶，使数字能较为均匀的分布到n个桶中。<br>如第1个桶放小于10的，第2个桶放10~20的<br>然后对每个桶进行排序，最后按顺序合并每个桶得到最终的结果。</p><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><p>计数排序时特殊的桶排序。<br>比如说分数是0~100分，那么就分101个桶。</p><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>只能排序非负整数。<br>比如说十进制的数，先按个位数排序，再按十位数排序。</p><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><h3 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h3><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/description/">https://leetcode.cn/problems/linked-list-cycle-ii/description/</a></p><blockquote><p>给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。<br>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。不允许修改 链表。</p></blockquote><p>解答：两个指针，一个指针一次前进1，一个指针1次前进2；如果有环，这两个指针一定会相遇</p><h3 id="返回arr的最长无重复子数组的长度"><a href="#返回arr的最长无重复子数组的长度" class="headerlink" title="返回arr的最长无重复子数组的长度"></a>返回arr的最长无重复子数组的长度</h3><p><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/">https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/</a></p><blockquote><p>给定一个字符串 s ，请你找出其中不含有重复字符的最长子串的长度。</p></blockquote><p>解答：两个指针，初始一个指针i指向第0个位置，一个指针j指向第1个位置；如果j指向的字符没有出现过，那么j往右边移动，更新长度，否则，i往右边移动</p><h3 id="盛水最多的容器"><a href="#盛水最多的容器" class="headerlink" title="盛水最多的容器"></a>盛水最多的容器</h3><p><a href="https://leetcode.cn/problems/container-with-most-water/description/">https://leetcode.cn/problems/container-with-most-water/description/</a></p><blockquote><p>给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。<br>找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。<br>返回容器可以储存的最大水量。</p></blockquote><p>解答：两个指针，一个指向最左边，一个指向最右边；移动矮的那一边（因为如果移动高的，水量一定不会变多）</p><h3 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h3><p><a href="https://leetcode.cn/problems/3sum/description/">https://leetcode.cn/problems/3sum/description/</a></p><blockquote><p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i !&#x3D; j、i !&#x3D; k 且 j !&#x3D; k ，同时还满足 nums[i] + nums[j] + nums[k] &#x3D;&#x3D; 0 。请你返回所有和为 0 且不重复的三元组。<br>注意：答案中不可以包含重复的三元组。</p></blockquote><p>打败5%的写法。。。 todo 优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> threeSum = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">    1、从小到大排序</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  <span class="keyword">let</span> hash = &#123;&#125;</span><br><span class="line">  nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span> - <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="property">length</span> - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="comment">/* 如果大于0，之后的不可能等于0，直接break */</span></span><br><span class="line">      <span class="keyword">let</span> sum = nums[i] + nums[j]</span><br><span class="line">      <span class="keyword">if</span>(sum&gt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 二分 */</span></span><br><span class="line">      <span class="keyword">let</span> low = j + <span class="number">1</span>, high = nums.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span>(low &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = low + ((high - low) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(sum + nums[mid] === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> temp = [nums[i], nums[j], nums[mid]]</span><br><span class="line">          temp.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">          <span class="comment">/* 用hash保证不重复 */</span></span><br><span class="line">          <span class="keyword">const</span> key = <span class="string">`<span class="subst">$&#123;nums[i]&#125;</span>,<span class="subst">$&#123;nums[j]&#125;</span>,<span class="subst">$&#123;nums[mid]&#125;</span>`</span></span><br><span class="line">          <span class="keyword">if</span> (hash[key] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            hash[key] = <span class="number">1</span></span><br><span class="line">            res.<span class="title function_">push</span>(temp)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sum+nums[mid] &gt;<span class="number">0</span>) &#123;</span><br><span class="line">          high = mid - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          low = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&#x3D;&gt; 双指针写法 时间复杂度：O(n^2)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> threeSum = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">    1、从小到大排序</span></span><br><span class="line"><span class="comment">    2、第一轮，第一个指针指向0，第2个指针指向1，第3个指针指向最后</span></span><br><span class="line"><span class="comment">            1、 如果和为0，那么第2个指针右移，第3个指针左移</span></span><br><span class="line"><span class="comment">                为了防止重复，在第2个指针的值和前一个相同时，一直右移；</span></span><br><span class="line"><span class="comment">                在第3个指针指向的值和后一个相同时，一直左移；</span></span><br><span class="line"><span class="comment">            2、如果和大于0，那么第3个指针左移</span></span><br><span class="line"><span class="comment">            3、如果和小于0，那么第2个指针右移</span></span><br><span class="line"><span class="comment">            重复，知道第2个指针的位置&gt;= 第3个指针</span></span><br><span class="line"><span class="comment">    3、第一个指针，检查第一个指针，如果和前一个值相同，一直右移；</span></span><br><span class="line"><span class="comment">    4、在第一个指针在没有移动到最后时，一直重复上述过程</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">let</span> res = [], len = nums.<span class="property">length</span></span><br><span class="line">  nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> first = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(first&lt;len) &#123;</span><br><span class="line">    <span class="keyword">let</span> second = first + <span class="number">1</span>, last = len - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(second &lt; last) &#123;</span><br><span class="line">        <span class="keyword">let</span> sum = nums[first] + nums[second] + nums[last]</span><br><span class="line">        <span class="keyword">if</span>(sum===<span class="number">0</span>) &#123;</span><br><span class="line">            res.<span class="title function_">push</span>([nums[first], nums[second], nums[last]])</span><br><span class="line">            second++</span><br><span class="line">            last--</span><br><span class="line">            <span class="keyword">while</span>(nums[second] === nums[second-<span class="number">1</span>]) &#123;</span><br><span class="line">                second++</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(nums[last] === nums[last+<span class="number">1</span>]) &#123;</span><br><span class="line">                last--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            last--</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            second++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    first++</span><br><span class="line">    <span class="keyword">while</span>(nums[first] === nums[first-<span class="number">1</span>]) &#123;</span><br><span class="line">        first ++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-二分与回溯</title>
      <link href="/2024/08/19/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%88%86%E4%B8%8E%E5%9B%9E%E6%BA%AF/"/>
      <url>/2024/08/19/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%88%86%E4%B8%8E%E5%9B%9E%E6%BA%AF/</url>
      
        <content type="html"><![CDATA[<p><strong>二分和回溯在代码书写上是有明确的公式的。</strong></p><h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><p>前提：有序数组<br>思想：判断中间位置的值大小，对半分去找</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">search</span>(<span class="params">arr, target</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> low = <span class="number">0</span>, high = arr.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span>(low &lt;= high) &#123;</span><br><span class="line">    <span class="keyword">let</span> mid = low + ((high - low) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span>(arr[mid] === target) &#123;</span><br><span class="line">      <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[mid]&lt;target)&#123;</span><br><span class="line">      low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      high = mid -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【相关题库】：<a href="https://leetcode.cn/tag/binary-search/problemset/">https://leetcode.cn/tag/binary-search/problemset/</a><br>【经典题目】：<br>求平方根 - <a href="https://leetcode.cn/problems/sqrtx/description/">https://leetcode.cn/problems/sqrtx/description/</a><br>寻找旋转排序数组中的最小值 - <a href="https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/description/">https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/description/</a></p><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">combine</span>(<span class="params">n, k</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [], path = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">backTrace</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 停止条件</span></span><br><span class="line">    <span class="keyword">if</span>(condition) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>([...path]);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试一个，然后去掉这个尝试，进行下一轮</span></span><br><span class="line">    <span class="keyword">for</span>(condition) &#123;</span><br><span class="line">      path.<span class="title function_">push</span>(i);</span><br><span class="line">      <span class="title function_">backTrace</span>();</span><br><span class="line">      path.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">backTrace</span>();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【相关题库】：<a href="https://leetcode.cn/tag/backtracking/problemset/">https://leetcode.cn/tag/backtracking/problemset/</a></p><h3 id="组合1"><a href="#组合1" class="headerlink" title="组合1"></a>组合1</h3><p>给定两个整数 n 和 k, 返回范围 [1,n] 中所有可能的 k 个数的组合<br><a href="https://leetcode.cn/problems/combinations/description/">https://leetcode.cn/problems/combinations/description/</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> combine = <span class="keyword">function</span>(<span class="params">n, k</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [], path = []</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">backTrace</span>(<span class="params">startIndex</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(path.<span class="property">length</span>===k) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>([...path]);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=startIndex;i&lt;=n;i++)&#123;</span><br><span class="line">      path.<span class="title function_">push</span>(i);</span><br><span class="line">      <span class="title function_">backTrace</span>(i+<span class="number">1</span>);</span><br><span class="line">      path.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">backTrace</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="组合总数"><a href="#组合总数" class="headerlink" title="组合总数"></a>组合总数</h3><p>找出candidates中可以使数字和为目标数 target 的所有 不同组合（需要不重复）<br><a href="https://leetcode.cn/problems/combination-sum/description/">https://leetcode.cn/problems/combination-sum/description/</a></p><p>关键在于从某个值开始找到了组合之后，之后的值不能再使用这个值了（startIndex）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">candidates</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> combinationSum = <span class="keyword">function</span> (<span class="params">candidates, target</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [], path = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">backTrace</span>(<span class="params">startIndex = <span class="number">0</span>, sum = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 和如果满足，放入结果，返回</span></span><br><span class="line">    <span class="keyword">if</span> (sum === target) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>([...path])</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历可选数组，选择一个值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = startIndex; i &lt; candidates.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(sum + candidates[i] &gt; target) <span class="keyword">return</span></span><br><span class="line">      path.<span class="title function_">push</span>(candidates[i])</span><br><span class="line">      <span class="title function_">backTrace</span>(i, sum + candidates[i])</span><br><span class="line">      path.<span class="title function_">pop</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从小到大排序</span></span><br><span class="line">  candidates.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">  <span class="title function_">backTrace</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="组合总数2"><a href="#组合总数2" class="headerlink" title="组合总数2"></a>组合总数2</h3><p>找出candidates中可以使数字和为目标数 target 的所有 不同组合， candidates中的值不能重复取<br><a href="https://leetcode.cn/problems/combination-sum-ii/description/">https://leetcode.cn/problems/combination-sum-ii/description/</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">candidates</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> combinationSum2 = <span class="keyword">function</span> (<span class="params">candidates, target</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [], path = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">backTrace</span>(<span class="params">startIndex, sum = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 和如果满足，放入结果，返回</span></span><br><span class="line">    <span class="keyword">if</span> (sum === target) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>([...path])</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历可选数组，选择一个值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = startIndex; i &lt; candidates.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(sum + candidates[i] &gt; target) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">if</span>(i===startIndex || candidates[i] !== candidates[i-<span class="number">1</span>]) &#123;</span><br><span class="line">        path.<span class="title function_">push</span>(candidates[i])</span><br><span class="line">        <span class="title function_">backTrace</span>(i + <span class="number">1</span>, sum + candidates[i])</span><br><span class="line">        path.<span class="title function_">pop</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从小到大排序</span></span><br><span class="line">  candidates.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">  <span class="title function_">backTrace</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h3><p>数组nums, 返回其所有可能的全排列<br><a href="https://leetcode.cn/problems/permutations/description/">https://leetcode.cn/problems/permutations/description/</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> permute = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [], path = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">backTrace</span>(<span class="params">tempNums</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(path.<span class="property">length</span> === nums.<span class="property">length</span>) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>([...path]);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;tempNums.<span class="property">length</span>;i++) &#123;</span><br><span class="line">      path.<span class="title function_">push</span>(tempNums[i]);</span><br><span class="line">      <span class="keyword">let</span> currentNums = [...tempNums];</span><br><span class="line">      currentNums.<span class="title function_">splice</span>(i,<span class="number">1</span>)</span><br><span class="line">      <span class="title function_">backTrace</span>(currentNums);</span><br><span class="line">      path.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">backTrace</span>(nums)</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="全排列2"><a href="#全排列2" class="headerlink" title="全排列2"></a>全排列2</h3><p>数组nums, 返回其所有可能的全排列，不重复<br><a href="https://leetcode.cn/problems/permutations-ii/description/">https://leetcode.cn/problems/permutations-ii/description/</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [1,1,2] =&gt; [[1,1,2],[1,2,1],[2,1,1]]</span></span><br><span class="line"><span class="keyword">var</span> permuteUnique = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [], path = []</span><br><span class="line">  <span class="keyword">let</span> visited = []</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">backTrace</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.<span class="property">length</span> === nums.<span class="property">length</span>) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>([...path]);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 剪枝</span></span><br><span class="line">      <span class="keyword">if</span>(visited[i] || (i&gt;<span class="number">0</span> &amp;&amp; nums[i] === nums[i-<span class="number">1</span>] &amp;&amp; !visited[i-<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      path.<span class="title function_">push</span>(nums[i])</span><br><span class="line">      visited[i] = <span class="literal">true</span></span><br><span class="line">      <span class="title function_">backTrace</span>()</span><br><span class="line">      visited[i] = <span class="literal">false</span></span><br><span class="line">      path.<span class="title function_">pop</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 排序，为了解决重复元素的问题</span></span><br><span class="line">  nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a-b)</span><br><span class="line">  <span class="title function_">backTrace</span>()</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="N皇后问题"><a href="#N皇后问题" class="headerlink" title="N皇后问题"></a>N皇后问题</h3><p><a href="https://leetcode.cn/problems/n-queens/submissions/104834571/">https://leetcode.cn/problems/n-queens/submissions/104834571/</a></p><blockquote><p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。<br>n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。<br>给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。<br>每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> solveNQueens = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">initChess</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> chess = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      chess[i] = []</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        chess[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> chess;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">isValid</span>(<span class="params">x, y, chess</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = chess.<span class="property">length</span>;</span><br><span class="line">    <span class="comment">// 这一列上存在别的皇后</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; x; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (chess[i][y] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左上角存在别的皇后</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = x - <span class="number">1</span>, j = y - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; i--, j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (chess[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右上角存在别的皇后</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = x - <span class="number">1</span>, j = y + <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &lt; n; i--, j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (chess[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">solve</span>(<span class="params">chess, row</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (row == chess.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> ans = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = chess.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">        ans[i] = chess[i].<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      res.<span class="title function_">push</span>(ans);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = chess.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isValid</span>(row, i, chess)) &#123;</span><br><span class="line">        chess[row][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">        <span class="title function_">solve</span>(chess, row + <span class="number">1</span>);</span><br><span class="line">        chess[row][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> chess = <span class="title function_">initChess</span>(n);</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="title function_">solve</span>(chess, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题-基础篇</title>
      <link href="/2024/08/11/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2024/08/11/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="前端需要注意哪些SEO"><a href="#前端需要注意哪些SEO" class="headerlink" title="前端需要注意哪些SEO"></a>前端需要注意哪些SEO</h3><details><summary>展开查看</summary><pre>  <code>1、meta标签中的title, description, keywords2、语义化标签3、重要的html放在最前面4、重要的html不用Js动态生成5、少用Iframe6、图片增加alt7、提高网站速度8.用div+css代替table  </code></pre></details><h3 id="img的title和alt有什么区别"><a href="#img的title和alt有什么区别" class="headerlink" title="img的title和alt有什么区别"></a>img的title和alt有什么区别</h3><details><summary>展开查看</summary><pre>  <code>title是鼠标悬浮展示的问题alt是读屏器显示文字或者图片无法获取展示的问题</code></pre></details><h3 id="语义化的理解"><a href="#语义化的理解" class="headerlink" title="语义化的理解"></a>语义化的理解</h3><details><summary>展开查看</summary><pre>  <code>定义：用正确的标签做正确的事情。语义化的标签有head,aside, footer, article, main等。作用：- seo方面：语义化标签有利于搜索引擎解析，有利于seo- css方面：在没有css样式的情况下也能以一种文档格式显示，并且是容易阅读的- 代码方面：代码可读性、有利于代码维护</code></pre></details><h3 id="html5有哪些新特性，移除了哪些元素"><a href="#html5有哪些新特性，移除了哪些元素" class="headerlink" title="html5有哪些新特性，移除了哪些元素"></a>html5有哪些新特性，移除了哪些元素</h3><details><summary>展开查看</summary><pre>  <code>新增：1、canvas2、video，audio3、增加语义化标签(header,footer等)4、表单控件(form, calendar, date等)4、sessionStorage, localStorage5、web worker, Geolocation6、离线缓存<p>移除：<br>1、s,font,big等标签；<br>2、frame, frameset,noframes等标签<br>  </code><br></pre></p></details><h3 id="html5的离线缓存怎么用，工作原理？"><a href="#html5的离线缓存怎么用，工作原理？" class="headerlink" title="html5的离线缓存怎么用，工作原理？"></a>html5的离线缓存怎么用，工作原理？</h3><details><summary>展开查看</summary><pre>  <code>- 作用  在用户没有网络连接时使用本地离线缓存的资源正常展示页面，有网络连接时更新资源。- 原理  html5的离线缓存是通过一个.appstore文件实现的，其中定义了需要缓存的资源。  在离线状态下使用缓存资源；在在线情况下，更新缓存。- 如何使用  1.在html标签中定义mainfest="xxx.appstore"  2.xxx.appstore中定义需要缓存的资源  3.通过window.applicationcache操作缓存的资源(已经被废弃了)  </code></pre></details><h3 id="浏览器是怎么对HTML5的离线存储资源进行管理和加载的呢？"><a href="#浏览器是怎么对HTML5的离线存储资源进行管理和加载的呢？" class="headerlink" title="浏览器是怎么对HTML5的离线存储资源进行管理和加载的呢？"></a>浏览器是怎么对HTML5的离线存储资源进行管理和加载的呢？</h3><details><summary>展开查看</summary><pre>  <code>1.在线时：  （1）看html文件是否有mainfest属性，如果有加载mainfest文件；  （2）如果是第一次访问app,就会下载并缓存mainfest中定义的文件；  （3）如果非第一次，浏览器会使用离线的资源加载页面；然后比对新的mainfest和旧的mainfest文件，如果文件内容没有发生变化，就不做任何操作；如果文件内容改变了，浏览器会重新下载mainfest文件中列出的资源并进行离线缓存(再下一次才会是更新后的页面）。2.离线时：直接加载离线缓存资源  </code></pre></details><h3 id="说说cookie-sesssionStorage-localStorage-innerDB的区别"><a href="#说说cookie-sesssionStorage-localStorage-innerDB的区别" class="headerlink" title="说说cookie,sesssionStorage,localStorage,innerDB的区别"></a>说说cookie,sesssionStorage,localStorage,innerDB的区别</h3><details><summary>展开查看</summary><pre>  <code>存储大小，清除时间，请求携带  </code></pre></details><h3 id="iframe优缺点"><a href="#iframe优缺点" class="headerlink" title="iframe优缺点"></a>iframe优缺点</h3><details><summary>展开查看</summary><pre>  <code>优点：1、使用方便简单，不用重复开发缺点：1、seo方面2、阻塞主页面的onload事件3、和主页面共享连接池，而浏览器对相同域的连接数有限制，会影响页面的并行加载  </code></pre></details><h3 id="web标准和w3c标准"><a href="#web标准和w3c标准" class="headerlink" title="web标准和w3c标准"></a>web标准和w3c标准</h3><details><summary>展开查看</summary><pre>  <code>1、标签小写2、标签闭合3、不乱嵌套标签4、语义化，结构和样式分离  </code></pre></details><h3 id="xhtml和html有什么区别"><a href="#xhtml和html有什么区别" class="headerlink" title="xhtml和html有什么区别"></a>xhtml和html有什么区别</h3><details><summary>展开查看</summary><pre>  <code>  xhtml比html语法更严格，如标签必须闭合等  xhtml基于xml,html4.x基于SGML,html5.0是自身的规范（xml是SGML的子级）  </code></pre></details><h3 id="Doctype作用？严格模式与混杂模式如何区分？它们有什么意义？"><a href="#Doctype作用？严格模式与混杂模式如何区分？它们有什么意义？" class="headerlink" title="Doctype作用？严格模式与混杂模式如何区分？它们有什么意义？"></a>Doctype作用？严格模式与混杂模式如何区分？它们有什么意义？</h3><details><summary>展开查看</summary><pre>  <code>Doctype告知浏览器需要怎样解析文档严格模式和混杂模式通过DTD文件区分，所以HTML5中没有严格模式和混杂模式之分严格模式会用严格w3c标准去解析，混杂模式语法更宽松，兼容老旧的浏览器。  </code></pre></details><h3 id="为什么html5只需要-lt-Doctype-html-gt-了"><a href="#为什么html5只需要-lt-Doctype-html-gt-了" class="headerlink" title="为什么html5只需要&lt;!Doctype html&gt;了"></a>为什么html5只需要&lt;!Doctype html&gt;了</h3><details><summary>展开查看</summary><pre>  <code>因为html5不是基于SGML了，不需要dtd文件  </code></pre></details><h3 id="行内元素和块状元素有哪些？空元素有哪些？行内元素和块状元素的区别"><a href="#行内元素和块状元素有哪些？空元素有哪些？行内元素和块状元素的区别" class="headerlink" title="行内元素和块状元素有哪些？空元素有哪些？行内元素和块状元素的区别"></a>行内元素和块状元素有哪些？空元素有哪些？行内元素和块状元素的区别</h3><details><summary>展开查看</summary><pre>  <code>行内元素: a,b,span,strong,em块状元素：div,h1-h6,p,table,ul,li空元素（不能有子节点的）：br,hr,input,link,meta,img行内元素不能设置宽高，不独占一行；块状元素能设置宽高，独占一行  </code></pre></details><h3 id="HTML全局属性有哪些"><a href="#HTML全局属性有哪些" class="headerlink" title="HTML全局属性有哪些"></a>HTML全局属性有哪些</h3><details><summary>展开查看</summary><pre>  <code>1.id2.class3.data-*4.style5.title6.draggable7.lang  </code></pre></details><h3 id="Canvas和svg的区别"><a href="#Canvas和svg的区别" class="headerlink" title="Canvas和svg的区别"></a>Canvas和svg的区别</h3><details><summary>展开查看</summary><pre>  <code>1.canvas绘制的是位图，svg是矢量图2.canvas放大会失真, svg不会3.canvas适合图像密集型，如游戏等4.svg内部都是dom元素，可以直接操控  </code></pre></details><h3 id="viewport-逻辑像素和物理像素"><a href="#viewport-逻辑像素和物理像素" class="headerlink" title="viewport,逻辑像素和物理像素"></a>viewport,逻辑像素和物理像素</h3><details><summary>展开查看</summary><pre>  <code>1.width // 设置viewport宽度，正整数，或字符串device-width2.height // 设置viewport高度，正整数，或字符串deivce-height3.initial-scale // 初始缩放比例4.mininum-scale // 允许用户最小缩放比例5.maxinum-scale // 允许用户最大缩放比例6.user-scalable // 是否允许手动缩放  </code></pre></details><h3 id="div-css的布局较table布局有什么优点"><a href="#div-css的布局较table布局有什么优点" class="headerlink" title="div+css的布局较table布局有什么优点"></a>div+css的布局较table布局有什么优点</h3><details><summary>展开查看</summary><pre>  <code>1.性能优势：  （1）代码精简  （2）页面渲染速度（div+css 表现和结构分离）2.seo优势  （1）提高搜索引擎抓取效率（和table相比，减少了嵌套和冗余，更有利于搜索引擎解析）  （2）提高页面质量得分  （3）减少相似页面  （4）更好的可访问性和用户体验(div+css 支持无障碍阅读)  </code></pre></details><h3 id="渲染优化"><a href="#渲染优化" class="headerlink" title="渲染优化"></a>渲染优化</h3><details><summary>展开查看</summary><pre>  <code>1.禁止使用iframe2.禁止使用gif图片实现loading3.使用css3动画代替js动画4.小图片尽量用base645.页面中不要出现空的href和src6.网页gzip,cdn托管,data缓存，图片服务器7.当需要很多样式时用className,不直接操控style8.少用全局变量，缓存dom节点查找结果9.将样式表放在顶部，将js放在底部  </code></pre></details><h3 id="src和href的区别"><a href="#src和href的区别" class="headerlink" title="src和href的区别"></a>src和href的区别</h3><details><summary>展开查看</summary><pre>  <code>src是定义要下载资源的地址,href是建立与资源的联系如img上的src,a标签上的href  </code></pre></details><h3 id="strong和em的区别"><a href="#strong和em的区别" class="headerlink" title="strong和em的区别"></a>strong和em的区别</h3><details><summary>展开查看</summary><pre>  <code>strong是粗体,em是斜体strong表示重要性, em表示强调  </code></pre></details><h3 id="strong和b的区别"><a href="#strong和b的区别" class="headerlink" title="strong和b的区别"></a>strong和b的区别</h3><details><summary>展开查看</summary><pre>  <code>b标签和strong标签在网页中的显示效果是一样的，但实际目的不同。b标签是为了加粗的显示效果而使用，是样式标签；而strong标签是为了强调文本的重要性，是语义化标签。  </code></pre></details><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><details><summary>展开查看</summary><ul><li>能读取其他函数内部变量的函数</li></ul></details><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><details><summary>展开查看</summary><ul><li>控制变量和函数的可访问范围</li><li>只能向上访问，不能向下访问</li><li>全局作用域，函数作用域，块级作用域</li></ul></details><h3 id="js的原型和原型链"><a href="#js的原型和原型链" class="headerlink" title="js的原型和原型链"></a>js的原型和原型链</h3><details><summary>展开查看</summary><pre>  <code>1.obj.toString()和Object.prototype.toString.call(obj)结果为何不同？2.obj.__proto__和Object.getPrototypeOf(obj)一样吗？3.如何优先使用顶层原型上的变量/函数？（Object.defineProperty,get)  </code></pre></details><h3 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h3><h3 id="js实现继承"><a href="#js实现继承" class="headerlink" title="js实现继承"></a>js实现继承</h3><h3 id="对this对象的理解"><a href="#对this对象的理解" class="headerlink" title="对this对象的理解"></a>对this对象的理解</h3><h3 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h3><h3 id="new操作符"><a href="#new操作符" class="headerlink" title="new操作符"></a>new操作符</h3><details><summary>展开查看</summary><pre>  <code>1. 定义一个对象2. 修改对象的原型，指向构造函数原型3. 在对象上调用构造函数,得到result4. result是对象，则返回这个对象；否则返回定义的对象  </code></pre></details><h3 id="ajax原理"><a href="#ajax原理" class="headerlink" title="ajax原理"></a>ajax原理</h3><details><summary>展开查看</summary><pre>  <code>const xhr = new XMLHttpRequest()xhr.open('get', url, true)xhr.send(data)xhr.onreadyStateChange = function() &#123;  if(xhr.readyState === 4) &#123;    if(xhr.status === 200) &#123;      success(xhr.responseText);    &#125; else &#123;      fail(xhr.status);    &#125;  &#125;&#125;  </code></pre></details><h3 id="如何解决跨域问题"><a href="#如何解决跨域问题" class="headerlink" title="如何解决跨域问题"></a>如何解决跨域问题</h3><details><summary>展开查看</summary><pre>  <code>jsonp, 服务端Access-cross-allow-origin, 服务代理，document.domain+iframe(只能实现同一个主域，不同子域之间的操作)  </code></pre></details><h3 id="模块化开发该怎么做"><a href="#模块化开发该怎么做" class="headerlink" title="模块化开发该怎么做"></a>模块化开发该怎么做</h3><details><summary>展开查看</summary><pre>  <code>以前：立即执行函数，不暴露私有变量现在：cmd,amd,cjs,esmodule  </code></pre></details><h3 id="异步加载js的方法"><a href="#异步加载js的方法" class="headerlink" title="异步加载js的方法"></a>异步加载js的方法</h3><details><summary>展开查看</summary><pre>  <code>script标签中defer/async动态script标签  </code></pre></details><h3 id="哪些操作会导致内存泄漏"><a href="#哪些操作会导致内存泄漏" class="headerlink" title="哪些操作会导致内存泄漏"></a>哪些操作会导致内存泄漏</h3><details><summary>展开查看</summary>内存泄漏是指任何对象或变量在不需要它后仍然存在，导致内存没有回收<ul><li>未正确使用的闭包</li><li>未回收的全局变量</li><li>定时器</li><li>未回收的dom引用（垃圾回收机制无法识别）</li><p>todo 未正确使用的闭包导致内存泄漏举例？</p></ul></details><h3 id="xml和json的区别"><a href="#xml和json的区别" class="headerlink" title="xml和json的区别"></a>xml和json的区别</h3><details><summary>展开查看</summary><ul><li>体积上：json比xml更轻量</li><li>方便性：json比xml更简单方便，更容易解析</li><li>数据上: xml数据描述性比json更强</li></ul></details><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>用过哪些设计模式，设计模式的6大原则？</p><h3 id="为什么要有同源限制"><a href="#为什么要有同源限制" class="headerlink" title="为什么要有同源限制"></a>为什么要有同源限制</h3><details><summary>展开查看</summary><pre>  <code>定义:ip,端口，协议都相同。作用：web安全比如一个网站，嵌入银行网站登录页面，如果没有同源显示，可以点登录的时候发送请求到攻击者的网站，就可以获取到登录名和密码  </code></pre></details><h3 id="offsetWidth-x2F-offsetHeight"><a href="#offsetWidth-x2F-offsetHeight" class="headerlink" title="offsetWidth&#x2F;offsetHeight,"></a>offsetWidth&#x2F;offsetHeight,</h3><details><summary>展开查看</summary><pre>  <code>offsetWidth/offsetHeight包括content,padding,borderclientWidth/clientHeight包括content,paddingscrollWidth/scrollHeight包括content,padding+溢出内容的尺寸  </code></pre></details><p>todo 实现getBoundingClientRect() ?</p><h3 id="js有哪些方法定义对象"><a href="#js有哪些方法定义对象" class="headerlink" title="js有哪些方法定义对象"></a>js有哪些方法定义对象</h3><details><summary>展开查看</summary><ul><li>对象字面量</li><li>Object.create</li><li>new Object()</li></ul></details><h3 id="常见兼容性问题"><a href="#常见兼容性问题" class="headerlink" title="常见兼容性问题"></a>常见兼容性问题</h3><details><summary>展开查看</summary><ul><li>浏览器默认的margin和padding不同</li><li>addEventListener,attachEvent</li><li>ie下,event对象只有x,y;没有pageX,pageY</li></ul></details><h3 id="对promise的了解，手写一个promise"><a href="#对promise的了解，手写一个promise" class="headerlink" title="对promise的了解，手写一个promise"></a>对promise的了解，手写一个promise</h3><h3 id="js的基本数据类型"><a href="#js的基本数据类型" class="headerlink" title="js的基本数据类型"></a>js的基本数据类型</h3><details><summary>展开查看</summary><pre>  <code>string,number,boolean,null,undefined,object | symbol bigintsymbol:独一无二，不可变=》全局变量冲突，内部变量覆盖bigint:可以表示超过2^53-1的数字  </code></pre></details><h3 id="JS-ES的内置对象由哪些"><a href="#JS-ES的内置对象由哪些" class="headerlink" title="JS ES的内置对象由哪些"></a>JS ES的内置对象由哪些</h3><details><summary>展开查看</summary><pre>  <code>1.值属性类: Infinity,NaN,undefined,null2.函数属性: parseInt,parseFloat3.对象: Object,Function,Boolean,Symbol,Error4.数字: Number,Math,Date5.字符串: String,RegExp6.集合: Set,Map,WeakMap7.抽象控制: promise8.映射: proxy  </code></pre></details><h3 id="js有几种类型的值"><a href="#js有几种类型的值" class="headerlink" title="js有几种类型的值"></a>js有几种类型的值</h3><details><summary>展开查看</summary><pre>  <code>原始数据类型：string,number,boolean,null,undefined,symbol引用数据类型：对象，数组，函数<p>区别：<br>1.存储位置不同<br>  原始数据类型放在栈中&#x3D;》栈区由编译器自动分配释放&#x3D;》临时变量方式<br>  引用数据类型&#x3D;》堆内存由开发者进行分配？（大部分其他语言中）&#x3D;》直到应用结束<br>2.效果不同(存储位置不同，导致效果不同)<br>  原始数据类型赋值后，不存在引用关系<br>  属性引用关系</p><p>原始数据类型放在堆中，空间小，大小固定，操作频繁<br>引用类型数据大，大小不固定，赋值给的是地址<br>  </code><br></pre></p></details><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="isNaN和Number-isNaN的区别"><a href="#isNaN和Number-isNaN的区别" class="headerlink" title="isNaN和Number.isNaN的区别"></a>isNaN和Number.isNaN的区别</h4><details><summary>展开查看</summary><pre>  <code>isNaN会尝试进行数据类型转换，如果不能转为number,那就是NaNNumber.isNaN会先判断是否是数字，如果不是，返回true，再判断能不能转为number<p>所以isNaN(undefined) &#x2F;&#x2F; true<br>Number.isNaN(undefined) &#x2F;&#x2F; false<br>但要注意isNaN(null)和Number.isNaN（null)是true,因为Number(undefined)是0<br>  </code><br></pre></p></details><h4 id="其他类型转换的场景"><a href="#其他类型转换的场景" class="headerlink" title="其他类型转换的场景"></a>其他类型转换的场景</h4><details><summary>展开查看</summary><pre>  <code>1.转成字符串2.转成数字3.转成布尔值  undefined,null,"", +0,-0, NaN, false => false  </code></pre></details><h4 id="原始类型的值是如何具有属性操作的？"><a href="#原始类型的值是如何具有属性操作的？" class="headerlink" title="原始类型的值是如何具有属性操作的？"></a>原始类型的值是如何具有属性操作的？</h4><details><summary>展开查看</summary><pre>  <code>1.是因为js的包装类型原始数据类型，在调用属性的时候，js会隐式地将其转为对象如 let a = '123'; console.log(a.length); //3Object(a) // String &#123;'123'&#125;<p>2.如何去包装<br>a.valueOf()<br>  </code><br></pre></p></details><h3 id="变量提升和变量提升的意义"><a href="#变量提升和变量提升的意义" class="headerlink" title="变量提升和变量提升的意义"></a>变量提升和变量提升的意义</h3><details><summary>展开查看</summary><pre>  <code>无论在任何位置声明的函数、变量都会被提升到当前作用域顶部函数作用域优先级高于变量。变量声明前访问是undefined,函数就是函数<p>意义：<br>1.性能（解析引用提升了性能，不需要执行到重新解析）<br>2.更加灵活<br>  </code><br></pre></p></details><h3 id="eval的作用"><a href="#eval的作用" class="headerlink" title="eval的作用"></a>eval的作用</h3><h3 id="null和undefined的区别"><a href="#null和undefined的区别" class="headerlink" title="null和undefined的区别"></a>null和undefined的区别</h3><h3 id="同步和异步的区别"><a href="#同步和异步的区别" class="headerlink" title="同步和异步的区别"></a>同步和异步的区别</h3><h3 id="渐进增强和优雅降级"><a href="#渐进增强和优雅降级" class="headerlink" title="渐进增强和优雅降级"></a>渐进增强和优雅降级</h3><h3 id="严格模式的限制"><a href="#严格模式的限制" class="headerlink" title="严格模式的限制"></a>严格模式的限制</h3><details><summary>展开查看</summary><ul><li>变量必须先声明后使用</li><li>函数参数不能有同名变量</li><li>不能用width</li><li>this不能指向全局变量</li></ul></details><h3 id="attribute和property的区别"><a href="#attribute和property的区别" class="headerlink" title="attribute和property的区别"></a>attribute和property的区别</h3><details><summary>展开查看</summary><ul><li>attribute是dom相关的，property是js相关的</li><li>attribute有property没有的属性，property也有attribute没有的属性</li><li>attribute有id,class,style等，property有id,nextSibling等</li></ul></details><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><h3 id="面向对象编程和面向过程编程"><a href="#面向对象编程和面向过程编程" class="headerlink" title="面向对象编程和面向过程编程"></a>面向对象编程和面向过程编程</h3><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="http的几种请求方法和用途"><a href="#http的几种请求方法和用途" class="headerlink" title="http的几种请求方法和用途"></a>http的几种请求方法和用途</h3><ul><li>get 获取</li><li>post 更新</li><li>put 上传</li><li>delete 删除</li><li>head 只获取头部</li><li>options 预检请求（服务端支持哪些方法，cors）</li><li>connect 建立隧道</li><li>trace 追踪请求路径</li></ul><h3 id="http状态码和含义"><a href="#http状态码和含义" class="headerlink" title="http状态码和含义"></a>http状态码和含义</h3><ul><li>1xx<ul><li>100 continue</li><li>101 switching protocal</li></ul></li><li>2xx<ul><li>200 请求成功</li><li>201 range请求成功</li><li>204 请求成功，但没有内容</li></ul></li><li>3xx<ul><li>301 永久重定向</li><li>302 临时重定向, 请求方法不变为get(但是大部分浏览器会变)</li><li>303 临时重定向，请求方法都变为get</li><li>304 not modified</li><li>307 临时重定向, 不允许请求方法变为get</li></ul></li><li>4xx<ul><li>400 客户端请求体错误</li><li>401 未进行认证</li><li>403 认证不通过（forbidden）</li><li>405 客户端请求方法不允许</li></ul></li><li>5xx<ul><li>500 服务内部错误</li><li>503 服务不可达，服务过载或维护</li></ul></li></ul><h3 id="永久重定向和临时重定向的区别"><a href="#永久重定向和临时重定向的区别" class="headerlink" title="永久重定向和临时重定向的区别"></a>永久重定向和临时重定向的区别</h3><h3 id="http请求报文"><a href="#http请求报文" class="headerlink" title="http请求报文"></a>http请求报文</h3><h3 id="http响应报文"><a href="#http响应报文" class="headerlink" title="http响应报文"></a>http响应报文</h3><h3 id="http1-0-vs-http1-1-vs-http2-0"><a href="#http1-0-vs-http1-1-vs-http2-0" class="headerlink" title="http1.0 vs http1.1 vs http2.0"></a>http1.0 vs http1.1 vs http2.0</h3><h3 id="https"><a href="#https" class="headerlink" title="https"></a>https</h3><h3 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h3><h3 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h3><h3 id="常见web安全和防护原理"><a href="#常见web安全和防护原理" class="headerlink" title="常见web安全和防护原理"></a>常见web安全和防护原理</h3><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="从浏览器地址栏输入url到显示页面的步骤-重要"><a href="#从浏览器地址栏输入url到显示页面的步骤-重要" class="headerlink" title="从浏览器地址栏输入url到显示页面的步骤(重要)"></a>从浏览器地址栏输入url到显示页面的步骤(重要)</h3><h3 id="如何进行网站性能优化-重要"><a href="#如何进行网站性能优化-重要" class="headerlink" title="如何进行网站性能优化(重要)"></a>如何进行网站性能优化(重要)</h3><p>1.content方面<br>   (1) 减少https请求：合并文件<br>  （2）减少DNS查询<br>  （3）减少DOM数量<br>  （4）简单的动画用css3动画代替js动画<br>2.server方面<br>  （1）etag缓存<br>  （2）cdn<br>  （3）gzip压缩<br>3.js方面<br>  （1）压缩js文件<br>   (2) 将脚本放到页面底部<br>  （3）删除不需要的脚本<br>  （4）减少DOM访问<br>  （5）将js和css从外部引入？<br>4.css方面<br>   (1) 合并css文件<br>  （2）将样式表放到页面顶部<br>  （3）少使用css表达式<br>  （4）使用Link不使用@import<br>5.图片方面<br>  （1）精灵图<br>  （2）图片压缩<br>  （3）inline image(base64图片)<br>  （4）不要在html中拉伸图片<br>6.cookie方面<br>  （1）减少cookie大小</p><h3 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h3><p>渲染引擎和js引擎<br>渲染引擎：chrome是blink，safari是webkit<br>js引擎: 主要是v8引擎</p><h3 id="web开发中常用的会话跟踪方法"><a href="#web开发中常用的会话跟踪方法" class="headerlink" title="web开发中常用的会话跟踪方法"></a>web开发中常用的会话跟踪方法</h3><details><summary>展开查看</summary><ul><li>cookie,sessionStorage和localStorage</li><li>session</li><li>ip地址</li></ul></details><h3 id="对web标准、可用性、可访问性的理解"><a href="#对web标准、可用性、可访问性的理解" class="headerlink" title="对web标准、可用性、可访问性的理解"></a>对web标准、可用性、可访问性的理解</h3><h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><h3 id="为什么利用多个域名来存储网站资源会更有效"><a href="#为什么利用多个域名来存储网站资源会更有效" class="headerlink" title="为什么利用多个域名来存储网站资源会更有效"></a>为什么利用多个域名来存储网站资源会更有效</h3><h3 id="一次js请求一般情况下有哪些地方会有缓存处理？"><a href="#一次js请求一般情况下有哪些地方会有缓存处理？" class="headerlink" title="一次js请求一般情况下有哪些地方会有缓存处理？"></a>一次js请求一般情况下有哪些地方会有缓存处理？</h3><h3 id="一个页面上有大量的图片，加载很慢，有哪些方法优化这些图片的加载，给用户更好的体验"><a href="#一个页面上有大量的图片，加载很慢，有哪些方法优化这些图片的加载，给用户更好的体验" class="headerlink" title="一个页面上有大量的图片，加载很慢，有哪些方法优化这些图片的加载，给用户更好的体验"></a>一个页面上有大量的图片，加载很慢，有哪些方法优化这些图片的加载，给用户更好的体验</h3>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript类型进阶</title>
      <link href="/2024/04/10/typescript%E7%B1%BB%E5%9E%8B%E8%BF%9B%E9%98%B6/"/>
      <url>/2024/04/10/typescript%E7%B1%BB%E5%9E%8B%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="类型之间的关系"><a href="#类型之间的关系" class="headerlink" title="类型之间的关系"></a>类型之间的关系</h2><h3 id="子类型和超类型"><a href="#子类型和超类型" class="headerlink" title="子类型和超类型"></a>子类型和超类型</h3><blockquote><p>如果B是A的子类型，那么在需要A的地方都可以使用B<br>如果B是A的超类型，那么在需要B的地方都可以使用A</p></blockquote><p>1、所有类型都是any的子类型, 所有类型也都是unknown的子类型<br>2、nerver是所有类型的子类型</p><h3 id="型变"><a href="#型变" class="headerlink" title="型变"></a>型变</h3><p>规定：<br><code>A&lt;:B</code>,指A类型是B类型的子类型，或是同种类型<br><code>A&gt;:B</code>,指A类型是B类型的超类型，或是同种类型</p><p>型变有4种：</p><ol><li>不变：只能是T</li><li>协变：可以是<code>&lt;:T</code></li><li>逆变： 可以是<code>&gt;:T</code></li><li>双变： 可以是<code>&lt;:T</code> 或者 <code>&gt;:T</code></li></ol><h4 id="结构和数组型变"><a href="#结构和数组型变" class="headerlink" title="结构和数组型变"></a>结构和数组型变</h4><p>对于对象，如果想保证A对象可赋值给B对象，那么A的每个属性都<code>&lt;:</code>B对象的对应属性。(也就是协变)</p><h4 id="函数型变"><a href="#函数型变" class="headerlink" title="函数型变"></a>函数型变</h4><p>如果函数A的参数数量小于函数B的参数数量，而且满足以下条件，那么函数A是函数B的子类型<br>1、函数A的this类型未指定，或者函数A的this类型<code>&gt;:</code>函数B的this类型（逆变）<br>2、函数A的各个参数类型<code>&gt;:</code>函数B的各个参数类型（逆变）《&#x3D; 见下面例子<br>3、函数A的返回类型<code>&lt;:</code>函数B的返回类型（协变）《&#x3D; 见下面例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">shirp</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Crow</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Bird</span> &#123;</span><br><span class="line">  <span class="title function_">caw</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shrip</span>(<span class="params">bird: Bird</span>): <span class="title class_">Bird</span> &#123;</span><br><span class="line">  bird.<span class="title function_">shirp</span>();</span><br><span class="line">  <span class="keyword">return</span> bird;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面再定义一个函数，函数参数是一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">f:(bird: Bird)=&gt;Bird</span>): viod &#123;&#125;</span><br></pre></td></tr></table></figure><p>1、型变返回值（&lt;:）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">birdToCrow</span>(<span class="params">d: Bird</span>): <span class="title class_">Crow</span> &#123;&#125;</span><br><span class="line"><span class="title function_">clone</span>(birdToCrow); <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">birdToAnimal</span>(<span class="params">d: Bird</span>): <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"><span class="title function_">clone</span>(birdToAnimal); <span class="comment">// error</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">f:(bird: Bird)=&gt;Bird</span>): viod &#123;</span><br><span class="line">  <span class="keyword">let</span> parent = <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">  <span class="keyword">let</span> babyBird = <span class="title function_">f</span>(parent);</span><br><span class="line">  babyBird.<span class="title function_">shirp</span>(); <span class="comment">// 如果f返回的是Animal,这里就会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、 型变参数（&gt;:）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">animalToBird</span>(<span class="params">a: Animal</span>): <span class="title class_">Bird</span> &#123;&#125;</span><br><span class="line"><span class="title function_">clone</span>(animalToBird); <span class="comment">// ok</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">crowToBird</span>(<span class="params">c: Crow</span>): <span class="title class_">Bird</span> &#123;&#125;</span><br><span class="line"><span class="title function_">clone</span>(crowToBird); <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; crowToBird可能是这样的实现，传给clone的话参数是Bird类型，使用Bird类型进行.caw就会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">crowToBird</span>(<span class="params">c: Crow</span>): <span class="title class_">Bird</span> &#123;</span><br><span class="line">  c.<span class="title function_">caw</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、型变this（&gt;:）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">parentThis</span>(<span class="params">b: Bird</span>): <span class="title class_">Bird</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">childThis</span>(<span class="params">b: Bird</span>): <span class="title class_">Bird</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">test</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可赋值性"><a href="#可赋值性" class="headerlink" title="可赋值性"></a>可赋值性</h3><p>A类型可赋值给B类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. A &lt;: B</span><br><span class="line">2. A是any</span><br></pre></td></tr></table></figure><p>对于枚举</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. A是枚举B的成员</span><br><span class="line">2. B至少有一个成员是number类型，且A是数字</span><br></pre></td></tr></table></figure><h3 id="类型拓宽"><a href="#类型拓宽" class="headerlink" title="类型拓宽"></a>类型拓宽</h3><h4 id="let-var-null-undefined"><a href="#let-var-null-undefined" class="headerlink" title="let,var,null,undefined"></a>let,var,null,undefined</h4><p>使用let,var会类型拓宽，从字面量放大到包含该字面量的基类型。<br>const不会。<br>如果不想让typescript进行类型拓宽，需要显示注解类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a : <span class="string">&#x27;x&#x27;</span> = <span class="string">&#x27;x&#x27;</span>; <span class="comment">// x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&#x27;x&#x27;</span>; <span class="comment">// x</span></span><br><span class="line"><span class="keyword">let</span> c = b; <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">d</span>:<span class="string">&#x27;x&#x27;</span> = <span class="string">&#x27;x&#x27;</span>; <span class="comment">// x</span></span><br><span class="line"><span class="keyword">let</span> e = d; <span class="comment">// x</span></span><br></pre></td></tr></table></figure><p>null和undefined会被拓宽为any,但是从作用域出来之后就不拓宽了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">x</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="literal">null</span>; <span class="comment">// any</span></span><br><span class="line">  a = <span class="number">3</span>; <span class="comment">// any</span></span><br><span class="line">  a = <span class="string">&#x27;b&#x27;</span>; <span class="comment">//any</span></span><br><span class="line">  <span class="keyword">return</span> a; <span class="comment">// any</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">x</span>() <span class="comment">// string</span></span><br></pre></td></tr></table></figure><h4 id="const类型断言"><a href="#const类型断言" class="headerlink" title="const类型断言"></a>const类型断言</h4><p>as const能禁止类型拓宽</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = &#123; <span class="attr">x</span>: <span class="number">3</span> &#125; <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// &#123;readonly x:3&#125;</span></span><br></pre></td></tr></table></figure><p>as const不仅能阻止拓宽类型，还能递归把成员设为readonly</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d = [<span class="number">1</span>, &#123;<span class="attr">x</span>: <span class="number">2</span>&#125;] <span class="comment">// (number | &#123;x: number&#125;)[]</span></span><br><span class="line"><span class="keyword">let</span> e = [<span class="number">1</span>, &#123;<span class="attr">x</span>: <span class="number">2</span>&#125;] <span class="keyword">as</span> <span class="keyword">const</span> <span class="comment">// readonly [1, &#123;readonly x : 2&#125;]</span></span><br></pre></td></tr></table></figure><h4 id="多余属性检查"><a href="#多余属性检查" class="headerlink" title="多余属性检查"></a>多余属性检查</h4><p>ts做的多余属性检查，无需关注</p><h4 id="细化"><a href="#细化" class="headerlink" title="细化"></a>细化</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserTextEvent</span> = &#123; <span class="attr">value</span>: <span class="built_in">string</span>, <span class="attr">target</span>: <span class="title class_">HTMLInputElement</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserMouseEvent</span> = &#123; <span class="attr">value</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>], <span class="attr">target</span>: <span class="title class_">HTMLElement</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserEvent</span> = <span class="title class_">UserTextEvent</span> | <span class="title class_">UserMouseEvent</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">event: UserEvent</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> event.<span class="property">value</span> === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    event.<span class="property">value</span>; <span class="comment">// string</span></span><br><span class="line">    event.<span class="property">target</span>; <span class="comment">// HTMLInputElement | HTMLElement =&gt; ts不深入推导</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  event.<span class="property">value</span>; <span class="comment">// [number, number]</span></span><br><span class="line">  event.<span class="property">target</span>; <span class="comment">// HTMLInputElement | HTMLElement =&gt; ts不深入推导</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserTextEvent</span> = &#123; <span class="attr">type</span>: <span class="string">&#x27;TextEvent&#x27;</span>, <span class="attr">value</span>: <span class="built_in">string</span>, <span class="attr">target</span>: <span class="title class_">HTMLInputElement</span> &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserMouseEvent</span> = &#123; <span class="attr">type</span>: <span class="string">&#x27;MouseEvent&#x27;</span>, <span class="attr">value</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>], <span class="attr">target</span>: <span class="title class_">HTMLElement</span> &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserEvent</span> = <span class="title class_">UserTextEvent</span> | <span class="title class_">UserMouseEvent</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">event: UserEvent</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">type</span> === <span class="string">&#x27;TextEvent&#x27;</span>) &#123;</span><br><span class="line">    event.<span class="property">value</span> <span class="comment">// string</span></span><br><span class="line">    event.<span class="property">target</span> <span class="comment">// HTMLInputElement</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  event.<span class="property">value</span> <span class="comment">// [number, number]</span></span><br><span class="line">  event.<span class="property">target</span> <span class="comment">// HTMLElement</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象类型进阶"><a href="#对象类型进阶" class="headerlink" title="对象类型进阶"></a>对象类型进阶</h2><h3 id="对象类型的类型运算符"><a href="#对象类型的类型运算符" class="headerlink" title="对象类型的类型运算符"></a>对象类型的类型运算符</h3><h4 id="“键入”运算符"><a href="#“键入”运算符" class="headerlink" title="“键入”运算符"></a>“键入”运算符</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ApiResponse</span> = &#123;</span><br><span class="line">  <span class="attr">user</span>: &#123;</span><br><span class="line">    <span class="attr">userId</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">friendList</span>: &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="built_in">number</span>,</span><br><span class="line">      <span class="attr">friends</span>: &#123;</span><br><span class="line">        <span class="attr">firstName</span>: <span class="built_in">string</span>,</span><br><span class="line">        <span class="attr">lastName</span>: <span class="built_in">string</span></span><br><span class="line">      &#125;[]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方括号表示法键入，不能用点号表示法</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FriendList</span> = <span class="title class_">ApiResponse</span>[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;friendList&#x27;</span>]</span><br><span class="line"><span class="comment">// 因为是数组，所以用number; 如果是元组，用具体的0，1，...</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Firend</span> = <span class="title class_">FriendList</span>[<span class="string">&#x27;friends&#x27;</span>][<span class="built_in">number</span>]</span><br></pre></td></tr></table></figure><h4 id="keyof运算符"><a href="#keyof运算符" class="headerlink" title="keyof运算符"></a>keyof运算符</h4><blockquote><p>keyof运算符获取对象所有键值的类型，合并为一个字符串字面量类型</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ApiResponseKeys</span> = keyof <span class="title class_">ApiResponse</span> <span class="comment">// &#x27;user&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserKeys</span> = keyof <span class="title class_">ApiResponse</span>[<span class="string">&#x27;user&#x27;</span>] <span class="comment">// &#x27;userId&#x27; | &#x27;friendList&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="“键入”运算符和keyof运算符结合"><a href="#“键入”运算符和keyof运算符结合" class="headerlink" title="“键入”运算符和keyof运算符结合"></a>“键入”运算符和keyof运算符结合</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> get&lt;O <span class="keyword">extends</span> <span class="built_in">object</span>, K <span class="keyword">extends</span> keyof O&gt;(<span class="attr">o</span>: O, <span class="attr">k</span>: K): O[K] &#123;</span><br><span class="line">  <span class="keyword">return</span> o[k]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Record类型"><a href="#Record类型" class="headerlink" title="Record类型"></a>Record类型</h3><blockquote><p>Record类型类型用于描述有映射关系的对象(比常规的索引签名更强大)</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Weekday</span> = <span class="string">&#x27;Mon&#x27;</span> | <span class="string">&#x27;Tue&#x27;</span> | <span class="string">&#x27;Wed&#x27;</span> | <span class="string">&#x27;Thu&#x27;</span> | <span class="string">&#x27;Fri&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Day</span> = <span class="title class_">Weekday</span> | <span class="string">&#x27;Sat&#x27;</span> | <span class="string">&#x27;Sun&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">nextDay</span>: <span class="title class_">Record</span>&lt;<span class="title class_">Weekday</span>, <span class="title class_">Day</span>&gt; = &#123;</span><br><span class="line">  <span class="title class_">Mon</span>: <span class="string">&#x27;Tue&#x27;</span>,</span><br><span class="line">  <span class="title class_">Tue</span>: <span class="string">&#x27;Wed&#x27;</span>,</span><br><span class="line">  <span class="title class_">Wed</span>: <span class="string">&#x27;Thu&#x27;</span>,</span><br><span class="line">  <span class="title class_">Thu</span>: <span class="string">&#x27;Fri&#x27;</span>,</span><br><span class="line">  <span class="title class_">Fri</span>: <span class="string">&#x27;Sat&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">nextDay</span>: &#123;[K <span class="keyword">in</span> <span class="title class_">Weekday</span>]: <span class="title class_">Day</span>&#125; = &#123;</span><br><span class="line">  <span class="title class_">Mon</span>: <span class="string">&#x27;Tue&#x27;</span>,</span><br><span class="line">  <span class="title class_">Tue</span>: <span class="string">&#x27;Wed&#x27;</span>,</span><br><span class="line">  <span class="title class_">Wed</span>: <span class="string">&#x27;Thu&#x27;</span>,</span><br><span class="line">  <span class="title class_">Thu</span>: <span class="string">&#x27;Fri&#x27;</span>,</span><br><span class="line">  <span class="title class_">Fri</span>: <span class="string">&#x27;Sat&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ts内置的Record类型是使用映射类型实现的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Record</span>&lt;K <span class="keyword">extends</span> keyof <span class="built_in">any</span>, T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Account</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">isEmployee</span>: <span class="built_in">boolean</span>,</span><br><span class="line">  <span class="attr">notes</span>: <span class="built_in">string</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有字段可选 ————  ？</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalAccount</span> = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof <span class="title class_">Account</span>]?: <span class="title class_">Account</span>[K]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有字段可为null ————  +(基本不用)</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NullableAccount</span> = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof <span class="title class_">Account</span>]: <span class="title class_">Account</span>[K] | <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有字段只读 ————  readonly</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReanonlyAccount</span> = &#123;</span><br><span class="line">  reanonly [K <span class="keyword">in</span> keyof <span class="title class_">Account</span>]: <span class="title class_">Account</span>[K]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有字段可写 ———— -</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Account2</span> = &#123;</span><br><span class="line">  -reanonly [K <span class="keyword">in</span> keyof <span class="title class_">ReanonlyAccount</span>]: <span class="title class_">Account</span>[K]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有字段必须 ———— -</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Account3</span> = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof <span class="title class_">OptionalAccount</span>]-?: <span class="title class_">Account</span>[K]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内置的映射类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Record</span>&lt;<span class="title class_">Keys</span>, <span class="title class_">Values</span>&gt;</span><br><span class="line"><span class="title class_">Partial</span>&lt;<span class="title class_">Object</span>&gt;</span><br><span class="line"><span class="title class_">Required</span>&lt;<span class="title class_">Object</span>&gt;</span><br><span class="line"><span class="title class_">Reanonly</span>&lt;<span class="title class_">Object</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pick</span></span><br><span class="line"><span class="title class_">Pick</span>&lt;<span class="title class_">Object</span>, <span class="title class_">Keys</span>&gt;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Pick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="伴生对象模式"><a href="#伴生对象模式" class="headerlink" title="伴生对象模式"></a>伴生对象模式</h3><blockquote><p>把类型和对象配对在一起，称为伴生对象模式</p></blockquote><h2 id="函数类型进阶"><a href="#函数类型进阶" class="headerlink" title="函数类型进阶"></a>函数类型进阶</h2><h3 id="改善元组的类型推导"><a href="#改善元组的类型推导" class="headerlink" title="改善元组的类型推导"></a>改善元组的类型推导</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> tuper&lt;T <span class="keyword">extends</span> unknown[]&gt;(...<span class="attr">args</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> args</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="title function_">tuper</span>(<span class="number">1</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="用户定义的类型防护措施"><a href="#用户定义的类型防护措施" class="headerlink" title="用户定义的类型防护措施"></a>用户定义的类型防护措施</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isString</span>(<span class="params">a: unknown</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要明确a传入string时，返回的是true</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isString</span>(<span class="params">a: unknown</span>): a is <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件类型"><a href="#条件类型" class="headerlink" title="条件类型"></a>条件类型</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IsString</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">string</span> ? <span class="literal">true</span> : <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="条件分配"><a href="#条件分配" class="headerlink" title="条件分配"></a>条件分配</h3><blockquote><p>分配率</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取出T中那些不在U中的类型</span></span><br><span class="line"><span class="keyword">type</span> without&lt;T,U&gt; = T <span class="keyword">extends</span> U ? <span class="built_in">never</span> : T</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A = without&lt;<span class="built_in">boolean</span> | <span class="built_in">number</span> | <span class="built_in">string</span>, <span class="built_in">boolean</span>&gt;</span><br><span class="line">       = without&lt;<span class="built_in">boolean</span>, <span class="built_in">boolean</span>&gt;</span><br><span class="line">        | without&lt;<span class="built_in">number</span>, <span class="built_in">boolean</span>&gt;</span><br><span class="line">        | without&lt;<span class="built_in">string</span>, <span class="built_in">boolean</span>&gt;</span><br><span class="line">       = <span class="built_in">never</span> | <span class="built_in">number</span> | <span class="built_in">string</span></span><br><span class="line">       = <span class="built_in">number</span> | <span class="built_in">string</span></span><br></pre></td></tr></table></figure><h3 id="infer关键字"><a href="#infer关键字" class="headerlink" title="infer关键字"></a>infer关键字</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ElementType</span>&lt;T&gt; = T <span class="keyword">extends</span> unknown[] ? T[<span class="built_in">number</span>] : T</span><br><span class="line"><span class="keyword">type</span> A = <span class="title class_">ElementType</span>&lt;<span class="built_in">number</span>[]&gt; <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用infer改写</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ElementType2</span>&lt;T&gt; = T <span class="keyword">extends</span> (infer U)[] ? U : T</span><br></pre></td></tr></table></figure><h3 id="内置的条件类型"><a href="#内置的条件类型" class="headerlink" title="内置的条件类型"></a>内置的条件类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从T的类型中排除在U的类型</span></span><br><span class="line"><span class="title class_">Exclude</span>&lt;T, U&gt;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Exclude</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? <span class="built_in">never</span> : T;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算T中可赋值给U的类型</span></span><br><span class="line"><span class="title class_">Extract</span>&lt;T, U&gt;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Extract</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? T : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从T中排除null和undefined</span></span><br><span class="line"><span class="title class_">NonNullable</span>&lt;T&gt;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NonNullable</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="literal">null</span> | <span class="literal">undefined</span> ? <span class="built_in">never</span> : T;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算函数的返回类型，不适用泛型和重载的函数</span></span><br><span class="line"><span class="title class_">ReturnType</span>&lt;F&gt;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReturnType</span>&lt;T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>&gt; = T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; infer R ? R : <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算类构造方法的实例类型</span></span><br><span class="line"><span class="title class_">InstanceType</span>&lt;C&gt;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">InstanceType</span>&lt;T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>&gt; = T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; infer R ? R : <span class="built_in">any</span>;</span><br></pre></td></tr></table></figure><h2 id="断言-少用"><a href="#断言-少用" class="headerlink" title="断言(少用)"></a>断言(<code>少用</code>)</h2><h3 id="类型断言-as"><a href="#类型断言-as" class="headerlink" title="类型断言(as)"></a>类型断言(as)</h3><blockquote><p>只能断言一个类型是自身的超类型或子类型，不能断定number是string</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">formatInput</span>(<span class="params">input: <span class="built_in">string</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getInput</span>(<span class="params"></span>): <span class="built_in">string</span> | <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> input = <span class="title function_">getInput</span>()</span><br><span class="line"><span class="title function_">formatInput</span>(input <span class="keyword">as</span> <span class="built_in">string</span>)</span><br></pre></td></tr></table></figure><h3 id="非空断言"><a href="#非空断言" class="headerlink" title="非空断言(!)"></a>非空断言(!)</h3><blockquote><p>用于断言类型不是null或undefined</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="property">parentNode</span>!.<span class="title function_">removeChild</span>(element)</span><br></pre></td></tr></table></figure><h3 id="明确赋值断言"><a href="#明确赋值断言" class="headerlink" title="明确赋值断言(!)"></a>明确赋值断言(!)</h3><blockquote><p>用于断言变量已经明确赋值</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改写为let userId!: string 进行明确赋值断言</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">userId</span>: <span class="built_in">string</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">GlobalCache</span> = &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="attr">key</span>: <span class="built_in">string</span>): <span class="built_in">any</span>;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>; <span class="comment">// 索引签名，允许通过字符串键访问属性</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">globalCache</span>: <span class="title class_">GlobalCache</span> = &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fetchUser</span>()</span><br><span class="line"><span class="comment">// 这里会报错</span></span><br><span class="line">userId.<span class="title function_">toUpperCase</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">  userId = globalCache.<span class="title function_">get</span>(<span class="string">&#x27;userId&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟名义类型（略）"><a href="#模拟名义类型（略）" class="headerlink" title="模拟名义类型（略）"></a>模拟名义类型（略）</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">CompanyId</span> = <span class="built_in">string</span> &amp; &#123; <span class="keyword">readonly</span> <span class="attr">brand</span>: unique symbol&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserId</span> = <span class="built_in">string</span> &amp; &#123; <span class="keyword">readonly</span> <span class="attr">brand</span>: unique symbol&#125;</span><br><span class="line"><span class="keyword">type</span> id = <span class="title class_">CompanyId</span> | <span class="title class_">UserId</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryForUser</span>(<span class="params">id: UserId</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CompanyId</span>(<span class="params">id: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> id <span class="keyword">as</span> <span class="title class_">CompanyId</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserId</span>(<span class="params">id: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> id <span class="keyword">as</span> <span class="title class_">UserId</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> companyId = <span class="title class_">CompanyId</span>(<span class="string">&#x27;8AKSDLEP&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> userId = <span class="title class_">UserId</span>(<span class="string">&#x27;dwerwerwer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">queryForUser</span>(companyId)</span><br><span class="line"><span class="title function_">queryForUser</span>(userId)</span><br></pre></td></tr></table></figure><h2 id="安全地扩展原型"><a href="#安全地扩展原型" class="headerlink" title="安全地扩展原型"></a>安全地扩展原型</h2><p>使用interface</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define <span class="variable language_">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">    zip&lt;U&gt;(<span class="attr">list</span>: U[]): [T, U][]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css动画效果</title>
      <link href="/2022/06/22/css%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
      <url>/2022/06/22/css%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="缓动动画"><a href="#缓动动画" class="headerlink" title="缓动动画"></a>缓动动画</h2><h3 id="小球下落效果"><a href="#小球下落效果" class="headerlink" title="小球下落效果"></a>小球下落效果</h3><div class="example ball-wrap">  <div class="ball"></div></div><style>  @keyframes bounce {    60%, 80%, 100% {      transform: translateY(80px);      animation-timing-function: cubic-bezier(.215, .61, .355, 1);    }    70% {      transform: translateY(60px);    }    90% {      transform: translateY(70px);    }  }  .example {    margin-bottom: 20px;  }  .ball-wrap {    width: 50px;height:100px;    border: 1px solid black;  }  .ball {    width: 20px;height:20px;background:orange;border-radius:50%;margin: 0 auto;    animation: bounce 3s cubic-bezier(.755, .05, .855, .06) infinite;  }</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> bounce &#123;</span><br><span class="line">  <span class="number">60%</span>, <span class="number">80%</span>, <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">80px</span>);</span><br><span class="line">    <span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(.<span class="number">215</span>, .<span class="number">61</span>, .<span class="number">355</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">70%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">60px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">90%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">70px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ball</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;<span class="attribute">height</span>:<span class="number">20px</span>;<span class="attribute">background</span>:orange;<span class="attribute">border-radius</span>:<span class="number">50%</span>;<span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">animation</span>: bounce <span class="number">3s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">755</span>, .<span class="number">05</span>, .<span class="number">855</span>, .<span class="number">06</span>) infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三次贝塞尔曲线可视化：<a href="https://cubic-bezier.com/">https://cubic-bezier.com</a></p><h3 id="输入框提示效果"><a href="#输入框提示效果" class="headerlink" title="输入框提示效果"></a>输入框提示效果</h3><style>  .input-wrap {    height: 24px;    position: relative;  }  .input-wrap .callout {    background: pink;    position: absolute;    left: 185px;    top: -20px;    transform: scale(0);    transition: .25s transform;  }  .input-wrap input:focus + .callout{    transition: .5s cubic-bezier(.25, .1, .3, 1.5) transform;    transform: scale(1);  }</style><div class="input-wrap example">  <input></input>  <div class="callout">一些提示，<br/>比如只能输入数字</div></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;callout&quot;</span>&gt;</span>一些提示，<span class="tag">&lt;<span class="name">br</span>/&gt;</span>比如只能输入数字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.input-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.input-wrap</span> <span class="selector-class">.callout</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">185px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="attribute">transition</span>: .<span class="number">25s</span> transform;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.input-wrap</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> + <span class="selector-class">.callout</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: .<span class="number">5s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">25</span>, .<span class="number">1</span>, .<span class="number">3</span>, <span class="number">1.5</span>) transform;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逐帧动画"><a href="#逐帧动画" class="headerlink" title="逐帧动画"></a>逐帧动画</h2><h3 id="loading效果"><a href="#loading效果" class="headerlink" title="loading效果"></a>loading效果</h3><p>网上随便找的一个马跑步素材：</p><style>  @keyframes run {    to {      background-position: -550px;    }  }.horse {  width: 140px;  height: 140px;  background: url('/img/horse2.jpg');  animation: run 4s steps(4) infinite;}</style><div class="horse example"></div><p>核心原理：background-position和steps</p><p>如果Loading图片为100x100,且有8个loading条：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> loading &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">800px</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>: loading <span class="number">1s</span> <span class="built_in">steps</span>(<span class="number">8</span>) infinite;</span><br></pre></td></tr></table></figure><h3 id="闪烁效果"><a href="#闪烁效果" class="headerlink" title="闪烁效果"></a>闪烁效果</h3><style>  @keyframes blink {    50% { background: transparent; }  }  .blink-example {    width: 1px;    height: 20px;    background: black;    animation: blink 1s steps(1) infinite;  }</style><div class="blink-example"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>: blink <span class="number">1s</span> <span class="built_in">steps</span>(<span class="number">1</span>) infinite;</span><br></pre></td></tr></table></figure><h2 id="打字动画"><a href="#打字动画" class="headerlink" title="打字动画"></a>打字动画</h2><style>  @keyframes typing {    from {      width: 0;    }  }  @keyframes caret {    50% { border-color: transparent; }  }  .css-wrap {    width: 15ch;    overflow: hidden;    white-space: nowrap;    animation: typing 15s steps(15) infinite, caret 1s steps(1) infinite;    border-right: .05em solid;  }</style><div class="css-wrap">CSS is awesome!</div><br/><div class="css-wrap">123456789123456</div><br/><p>打字动画实际上是文字逐个显示动画+光标闪烁动画</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> typing &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">15ch</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">animation</span>: typing <span class="number">15s</span> <span class="built_in">steps</span>(<span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>: typing <span class="number">15s</span> <span class="built_in">steps</span>(<span class="number">15</span>);</span><br></pre></td></tr></table></figure><h2 id="状态平滑的动画"><a href="#状态平滑的动画" class="headerlink" title="状态平滑的动画"></a>状态平滑的动画</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-play-state</span>: pause;</span><br></pre></td></tr></table></figure><h2 id="沿环形路径平移的动画"><a href="#沿环形路径平移的动画" class="headerlink" title="沿环形路径平移的动画"></a>沿环形路径平移的动画</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>用内层的变形来抵消外层的变形效果。</p><style>@keyframes spin {  to {    transform: rotate(1turn);  }}.path {  width: 100px;  height: 100px;  background: orange;  border-radius: 50%;}.avatar {  width: 20px;  height: 20px;  margin: 0 auto;  border-radius: 50%;  overflow: hidden;  animation: spin 3s infinite linear;  transform-origin: 50% 50px;  /* 50px 是背景圆形的半径 */}.avatar img {  animation: spin 3s infinite linear;  animation-direction: reverse;}</style><div class="path example">  <div class="avatar">    <img src="/img/avatar.jpg">  </div></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;path&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/img/avatar.jpg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> spin &#123;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">1turn</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.path</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.avatar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">animation</span>: spin <span class="number">3s</span> infinite linear;</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">50px</span>;  <span class="comment">/* 50px 是背景圆形的半径 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.avatar</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: inherit;</span><br><span class="line">  <span class="attribute">animation-direction</span>: reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>使用translate模拟transform-origin，从而不需要在Img外层多嵌套一个元素。</p><style>@keyframes spin2 {  from {    transform: translateY(50px)              rotate(0turn)              translateY(-50px)              translateY(50%)              rotate(1turn)              translateY(-50%)  }  to {    transform: translateY(50px)              rotate(1turn)              translateY(-50px)              translateY(50%)              rotate(0turn)              translateY(-50%)  }}@keyframes spin3 {  from {    transform: rotate(0turn)              translateY(-50px)              translateY(50%)              rotate(1turn)  }  to {    transform: rotate(1turn)              translateY(-50px)              translateY(50%)              rotate(0turn)  }}.img {  width: 20px;  height: 20px;  margin: 0 auto;  border-radius: 50%;  animation: spin2 3s infinite;}.img2 {  width: 20px;  height: 20px;  position: relative;  top: 40px;  border-radius: 50%;  animation: spin3 3s infinite;}</style><div class="path example">  <img src="/img/avatar.jpg" class="img"></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;path&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/img/avatar.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> spin2 &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">50px</span>)</span><br><span class="line">              <span class="built_in">rotate</span>(<span class="number">0turn</span>)</span><br><span class="line">              <span class="built_in">translateY</span>(-<span class="number">50px</span>)</span><br><span class="line">              <span class="built_in">translateY</span>(<span class="number">50%</span>)</span><br><span class="line">              <span class="built_in">rotate</span>(<span class="number">1turn</span>)</span><br><span class="line">              <span class="built_in">translateY</span>(-<span class="number">50%</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">50px</span>)</span><br><span class="line">              <span class="built_in">rotate</span>(<span class="number">1turn</span>)</span><br><span class="line">              <span class="built_in">translateY</span>(-<span class="number">50px</span>)</span><br><span class="line">              <span class="built_in">translateY</span>(<span class="number">50%</span>)</span><br><span class="line">              <span class="built_in">rotate</span>(<span class="number">0turn</span>)</span><br><span class="line">              <span class="built_in">translateY</span>(-<span class="number">50%</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一开始头像就位于圆心，上面的css代码可简化：<br>也就是把translateY(50px) translateY(-50%)去除，这两句做的实际上就是把头像移到圆心。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> spin2 &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0turn</span>)</span><br><span class="line">              <span class="built_in">translateY</span>(-<span class="number">50px</span>)</span><br><span class="line">              <span class="built_in">translateY</span>(<span class="number">50%</span>)</span><br><span class="line">              <span class="built_in">rotate</span>(<span class="number">1turn</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">1turn</span>)</span><br><span class="line">              <span class="built_in">translateY</span>(-<span class="number">50px</span>)</span><br><span class="line">              <span class="built_in">translateY</span>(<span class="number">50%</span>)</span><br><span class="line">              <span class="built_in">rotate</span>(<span class="number">0turn</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> css揭秘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css用户体验</title>
      <link href="/2022/05/04/css%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"/>
      <url>/2022/05/04/css%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="选择适合的鼠标光标"><a href="#选择适合的鼠标光标" class="headerlink" title="选择适合的鼠标光标"></a>选择适合的鼠标光标</h2><h3 id="禁用光标"><a href="#禁用光标" class="headerlink" title="禁用光标"></a>禁用光标</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>: not-allowed;</span><br></pre></td></tr></table></figure><h3 id="隐藏光标"><a href="#隐藏光标" class="headerlink" title="隐藏光标"></a>隐藏光标</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">&#x27;transparent.gif&#x27;</span>);</span><br><span class="line"><span class="attribute">cursor</span>: none;</span><br></pre></td></tr></table></figure><h2 id="扩大可点击区域"><a href="#扩大可点击区域" class="headerlink" title="扩大可点击区域"></a>扩大可点击区域</h2><p>伪元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义复选框"><a href="#自定义复选框" class="headerlink" title="自定义复选框"></a>自定义复选框</h2><style>  #awesome {    position: absolute;    clip: rect(0, 0, 0, 0);  }  #awesome + label {    cursor: pointer;  }  #awesome + label::before {    content: '\a0';    display: inline-block;    vertical-align: .2em;    width: 1em;    height: 1em;    margin-right: .2em;    border-radius: .2em;    background: silver;    text-indent: .15em;    line-height: .65;    cursor: pointer;  }  #awesome:checked + label::before {    content: '\2713';    background: yellowgreen;  }  #awesome:hover + label::before {    box-shadow: 0 0 .1em .1em #58a;  }</style><input type="checkbox" id="awesome"/><label for="awesome">awesome</label><h3 id="自定义复选框-1"><a href="#自定义复选框-1" class="headerlink" title="自定义复选框"></a>自定义复选框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;awesome&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>awesome<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">clip</span>: <span class="built_in">rect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span> + <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span> + <span class="selector-tag">label</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;\a0&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>: .<span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: .<span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: .<span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">background</span>: silver;</span><br><span class="line">  <span class="attribute">text-indent</span>: .<span class="number">15em</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: .<span class="number">65</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;\2713&#x27;</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span><span class="selector-pseudo">:hover</span> + <span class="selector-tag">label</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> .<span class="number">1em</span> .<span class="number">1em</span> <span class="number">#58a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开关式按钮"><a href="#开关式按钮" class="headerlink" title="开关式按钮"></a>开关式按钮</h3><style>#awesome1 {    position: absolute;    clip: rect(0,0,0,0);}#awesome1 + label {    display: inline-block;    padding: .35em .5em .2em;    background: #ccc;    background-image: linear-gradient(#ddd, #bbb);    border: 1px solid rgba(0,0,0,.2);    border-radius: .3em;    box-shadow: 0 1px white inset;    text-align: center;    text-shadow: 0 1px 1px white;    cursor: pointer;  margin-bottom: 10px;}#awesome1:checked + label,#awesome1:active + label {    box-shadow: .04em .1em .2em rgba(0,0,0,.6) inset;    border-color: rgba(0,0,0,.3);    background: #bbb;}</style><input type="checkbox" id="awesome1"/><label for="awesome1">awesome</label><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;awesome1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;awesome1&quot;</span>&gt;</span>awesome<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#awesome1</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">clip</span>: <span class="built_in">rect</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#awesome1</span> + <span class="selector-tag">label</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">padding</span>: .<span class="number">35em</span> .<span class="number">5em</span> .<span class="number">2em</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">#ddd</span>, <span class="number">#bbb</span>);</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">2</span>);</span><br><span class="line"><span class="attribute">border-radius</span>: .<span class="number">3em</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> white inset;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> white;</span><br><span class="line"><span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#awesome1</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span>,</span><br><span class="line"><span class="selector-id">#awesome1</span><span class="selector-pseudo">:active</span> + <span class="selector-tag">label</span> &#123;</span><br><span class="line"><span class="attribute">box-shadow</span>: .<span class="number">04em</span> .<span class="number">1em</span> .<span class="number">2em</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">6</span>) inset;</span><br><span class="line"><span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>);</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#bbb</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过阴影弱化背景"><a href="#通过阴影弱化背景" class="headerlink" title="通过阴影弱化背景"></a>通过阴影弱化背景</h2><h3 id="遮罩层"><a href="#遮罩层" class="headerlink" title="遮罩层"></a>遮罩层</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.overlay</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dialog</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="伪元素方案"><a href="#伪元素方案" class="headerlink" title="伪元素方案"></a>伪元素方案</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dialog</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">8</span>);</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在问题：<br>点击背景层关闭，对于这种实现起来比较麻烦</p><h3 id="box-shadow方案"><a href="#box-shadow方案" class="headerlink" title="box-shadow方案"></a>box-shadow方案</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">50vmax</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">8</span>);</span><br><span class="line"><span class="attribute">position</span>: fixed; // 为了防止滚动页面时遮罩层弹出</span><br></pre></td></tr></table></figure><p>存在问题：<br>box-shadow 只是能引起视觉上的效果 无法阻止鼠标交互（弹出层外背景中的元素仍能被点击）</p><h3 id="backdrop方案"><a href="#backdrop方案" class="headerlink" title="backdrop方案"></a>backdrop方案</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dialog<span class="selector-pseudo">::backdrop</span> &#123;</span><br><span class="line">  backgroud: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">8</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在问题：<br>浏览器不完全支持</p><h2 id="通过模糊来弱化背景"><a href="#通过模糊来弱化背景" class="headerlink" title="通过模糊来弱化背景"></a>通过模糊来弱化背景</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main</span><span class="selector-class">.de-emphasized</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模糊和阴影结合</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main</span><span class="selector-class">.de-emphasized</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>) <span class="built_in">contrast</span>(.<span class="number">8px</span>) <span class="built_in">brightness</span>(.<span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果浏览器不支持，看不到任何效果，最好加上box-shadow作为浏览器回退方案。</p><p>如果还需支持鼠标在该背景区域上无法交互，使用遮罩层+filter的方式。</p><h2 id="滚动提示"><a href="#滚动提示" class="headerlink" title="滚动提示"></a>滚动提示</h2><style>  .example ul {    border: 1px solid black;    width: 200px;    height: 150px;    overflow: auto;    background: linear-gradient(white 15px, transparent) 0 0 / 100% 50px,                radial-gradient(at top, rgba(0,0,0,.2), transparent 70%) 0 0 / 100% 30px,                linear-gradient(to top, white 15px, transparent) bottom / 100% 50px,                radial-gradient(at bottom, rgba(0,0,0,.2), transparent 70%) bottom / 100% 30px;    background-repeat: no-repeat;    background-attachment: local, scroll, local, scroll;  }  .example ul li {    display: inline-block;    height: 50px;  }</style><p>在移动端用的比较多，支持向上滚动头部显示“提示”，支持向下滚动底部显示“提示”</p><div class="example">  <ul>    <li>Ada Catlace</li>    <li>Alan Purring</li>    <li>Schrödingcat</li>    <li>Tim Purrners-</li>    <li>Lee</li>    <li>Webkitty</li>    <li>json</li>    <li>void</li>    <li>Tim Purrners-</li>    <li>Lee</li>    <li>Webkitty</li>    <li>json</li>    <li>void</li>  </ul></div><p>代码可参考：<a href="https://dabblet.com/gist/20205b5fcdd834461e80">https://dabblet.com/gist/20205b5fcdd834461e80</a></p><h2 id="交互式的图片对比控件"><a href="#交互式的图片对比控件" class="headerlink" title="交互式的图片对比控件"></a>交互式的图片对比控件</h2><h3 id="css-Resize-方案"><a href="#css-Resize-方案" class="headerlink" title="css Resize 方案"></a>css Resize 方案</h3><div class="image-slider">  <div>    <img src="/img/cat.jpg" alter="before"/>  </div>  <img src="/img/cat.jpg" alter="after"/></div><style>.image-slider {  position: relative;  display: inline-block;}.image-slider > div {  position: absolute;  left: 0;  top: 0;  bottom: 0;  width: 50%;  height: 100%;  overflow: hidden;  resize: horizontal;  max-width: 100%;}.image-slider > div img {  display: block;  filter: blur(10px);}img {  width: 769.2px;  height: 513.05px;  margin: 0 !important;  max-width: none !important;}</style><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-slider&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;picture1.jpg&quot;</span> <span class="attr">alter</span>=<span class="string">&quot;before&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;picture2.jpg&quot;</span> <span class="attr">alter</span>=<span class="string">&quot;after&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.image-slider</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.image-slider</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">resize</span>: horizontal;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>; // 防止拉动调节手柄后超出图片大小</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外，还能通过伪元素改变调节手柄的大小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.image-slider</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background</span>:</span><br><span class="line">    <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, white <span class="number">50%</span>, transparent);</span><br><span class="line">  <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">  <span class="attribute">cursor</span>: ew-resize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.image-slider</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  user-select: none; // 防止没有点击调节手柄 拖动鼠标 误选图片的情况</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="范围输入控件方案"><a href="#范围输入控件方案" class="headerlink" title="范围输入控件方案"></a>范围输入控件方案</h3><input type="range"/><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>然后监听Input的值，动态改变第一张图片的宽度。略。<br>比较推荐这种方案，浏览器支持度更高，不过需要编写额外的js代码。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> css揭秘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript类型全解</title>
      <link href="/2022/04/17/typescript%E7%B1%BB%E5%9E%8B%E5%85%A8%E8%A7%A3/"/>
      <url>/2022/04/17/typescript%E7%B1%BB%E5%9E%8B%E5%85%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="typescript类型"><a href="#typescript类型" class="headerlink" title="typescript类型"></a>typescript类型</h2><h2 id="类型浅谈"><a href="#类型浅谈" class="headerlink" title="类型浅谈"></a>类型浅谈</h2><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><p>开启了strict: true, 隐式any会报错（函数中未定义类型的参数）；但是导入其他文件的时候不显示报错？（require(‘xxx.js’)）</p><h3 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h3><h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组<br>元组</p><h3 id="undefined、null、nerver、void"><a href="#undefined、null、nerver、void" class="headerlink" title="undefined、null、nerver、void"></a>undefined、null、nerver、void</h3><p>undefined: 变量未定义<br>null: 类型不存在<br>nerver：函数一直执行<br>void: 函数没有显示return</p><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Age</span> = <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript概述</title>
      <link href="/2022/04/10/typescript%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/04/10/typescript%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><p>编译器做的三件事：</p><pre>1. 将代码转换为AST(抽象语法树)2. 将AST编译成字节码3. 运行时计算字节码</pre><p>TSC编译的过程：</p><pre>1. Typescript源码 -> Typescript AST2. 类型检查器检查AST3. Typescript AST -> javascript源码</pre><pre>4. javascript源码 -> javascript AST5. javascript AST -> 字节码6. 运行时计算字节码</pre><p>第1~3步由TSC操作，第4~6步由浏览器、NodeJs或其他Javascript引擎中的Javascript运行时操作。</p><p>编译型语言：<strong>运行前</strong>转换源码到字节码；解释型语言：<strong>运行时</strong>转换源码到字节码<br>Javascript编译器和运行时通常聚在一个称为引擎的程序中。程序员一般就是与引擎交互的。常见的引擎：V8、JSCore、Chakra。</p><h2 id="类型系统"><a href="#类型系统" class="headerlink" title="类型系统"></a>类型系统</h2><blockquote><p>类型系统：类型检查器为程序分配类型时使用的一系列规则</p></blockquote><blockquote><p>类型系统有两种：一种是显式的(java、c、c++等)，一种是自动推导的(javascript、python等)</p></blockquote><p>Typescript是两者的结合，既可以显示注解类型，也可以自动推导。</p><h2 id="Typescript和Javascript类型比较"><a href="#Typescript和Javascript类型比较" class="headerlink" title="Typescript和Javascript类型比较"></a>Typescript和Javascript类型比较</h2><table><thead><tr><th align="left">类型系统特性</th><th align="left">Typescript</th><th align="left">Javascript</th></tr></thead><tbody><tr><td align="left">类型是如何绑定的？</td><td align="left">静态</td><td align="left">动态</td></tr><tr><td align="left">是否自动转换类型？</td><td align="left">否（多数时候）</td><td align="left">是</td></tr><tr><td align="left">何时检查类型？</td><td align="left">编译时</td><td align="left">运行时</td></tr><tr><td align="left">何时报告错误？</td><td align="left">编译时（多数时候）</td><td align="left">运行时（多数时候）</td></tr></tbody></table><h2 id="代码编辑器设置"><a href="#代码编辑器设置" class="headerlink" title="代码编辑器设置"></a>代码编辑器设置</h2><p>如何从零创建一个typescript简单项目：</p><ol><li><p>下载依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript tslint @types/node</span><br></pre></td></tr></table></figure></li><li><p>配置ts: tsconfig.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx typescript --init</span><br></pre></td></tr></table></figure><p>详细的配置略，配置入口和出口：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    ...<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;src&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>配置tslint: tslint.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tslint --init</span><br></pre></td></tr></table></figure></li><li><p>新建src&#x2F;index.ts写入一些内容并编译执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> src/index.ts</span><br><span class="line">npx tsc</span><br></pre></td></tr></table></figure><p>执行完成后可以看到生成了dist&#x2F;index.js文件，运行该文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node dist/index.js</span><br></pre></td></tr></table></figure></li></ol><p>利用工具创建typescript项目：</p><ol><li>ts-node: 只需一个命令便能编译和运行typescript代码</li><li>typescript-node-starter(<a href="https://github.com/Microsoft/TypeScript-Node-Starter">https://github.com/Microsoft/TypeScript-Node-Starter</a>): typescript-node脚手架</li></ol>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css字体排印</title>
      <link href="/2022/04/10/css%E5%AD%97%E4%BD%93%E6%8E%92%E5%8D%B0/"/>
      <url>/2022/04/10/css%E5%AD%97%E4%BD%93%E6%8E%92%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<style>  .example {    margin: 20px;  }  .box-inline {    display: inline-block;    border: 2px solid pink;    padding: 10px;  }</style><h2 id="连字符断行"><a href="#连字符断行" class="headerlink" title="连字符断行"></a>连字符断行</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hyphens</span>: auto;</span><br></pre></td></tr></table></figure><p>未进行处理 vs 手动使用软连接&amp;shy; vs hyphens:auto的效果比较：</p><div class="example box-inline" style="width: 140px;">  "The only way to get rid of a temptation is to yield to it."</div><div class="example box-inline" style="width: 140px;">  "The only way to get rid of a temp&shy;tation is to yield to it."</div><div lang="en" class="example box-inline" style="width: 140px; hyphens: auto;">  "The only way to get rid of a temptation is to yield to it."</div><p><em>注意</em>: 使用hyphens时需要指定lang, 如lang&#x3D;”en”</p><h2 id="插入换行"><a href="#插入换行" class="headerlink" title="插入换行"></a>插入换行</h2><style>  dl {    border: 1px solid black;    padding: 10px;  }  dd {    margin-inline-start: 0 !important;    font-weight: bold;  }  dd, dt {    display: inline;  }  dd + dt::before {    content: "\A";    white-space: pre;  }  dd + dd::before {    content: ', ';    font-weight: normal;  }</style><dl>  <dt>name:</dt>  <dd>duan</dd>  <dt>email:</dt>  <dd>2316636696@qq.com</dd>  <dd>dlx12345678@163.com</dd>  <dt>address:</dt>  <dd>someaddress</dd></dl><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>name:<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>duan<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>email:<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>2316636696@qq.com<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>dlx12345678@163.com<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>address:<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>someaddress<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">dl</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">dd</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>-inline-start: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">dd</span>, <span class="selector-tag">dt</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">dd</span> + <span class="selector-tag">dt</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;\A&quot;</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: pre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">dd</span> + <span class="selector-tag">dd</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;, &#x27;</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文本行的斑马效果"><a href="#文本行的斑马效果" class="headerlink" title="文本行的斑马效果"></a>文本行的斑马效果</h2><style>  pre.banma {    background: beige !important;    background-image: repeating-linear-gradient(rgba(0,0,0,.2), rgba(0,0,0,.2) 1.6em, transparent 0, transparent 3.2em) !important;    background-clip: content-box !important;    background-origin: content-box !important;    color: #58a !important;  }</style><pre style="tab-size: 2;" class="banma">while(true) {&#0009;var d = new Date();&#0009;&#0009;if(d.getDate()===1&&d.getMonth()===3){&#0009;&#0009;alert("april fool's day");&#0009;}}</pre><p>原理：利用css渐变生成背景图片:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: beige;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#58a</span>;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">repeating-linear-gradient</span>(<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">2</span>), <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">2</span>) <span class="number">1.6em</span>, transparent <span class="number">0</span>, transparent <span class="number">3.2em</span>);</span><br><span class="line"><span class="attribute">background-clip</span>: content-box;</span><br><span class="line"><span class="attribute">background-origin</span>: content-box;</span><br></pre></td></tr></table></figure><h2 id="调整tab的宽度"><a href="#调整tab的宽度" class="headerlink" title="调整tab的宽度"></a>调整tab的宽度</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tab-size</span>: <span class="number">3</span>;</span><br></pre></td></tr></table></figure><pre style="-moz-tab-size: 3; -webkit-tab-size: 3; tab-size:3;">while(true) {&#0009;var d = new Date();&#0009;&#0009;if(d.getDate()===1&&d.getMonth()===3){&#0009;&#0009;alert("april fool's day");&#0009;}}</pre><p><em>注意</em>: tab制表符为<code>&amp;#0009</code>;</p><h2 id="连字"><a href="#连字" class="headerlink" title="连字"></a>连字</h2><blockquote><p>在css字体（第三版）[<a href="https://w3.org/TR/css3-fonts]">https://w3.org/TR/css3-fonts]</a> 中，原有的font-variant被升级成了一个简写属性，由很多新的展开式属性组合而成。其中之一叫做font-variant-ligatures,专门用来控制连字效果的开启和关闭。</p></blockquote><p>启用所有可能的连字，需要同时指定这三个标识符：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-variant</span>-ligarures: common-ligatures // 通用连字</span><br><span class="line">                        discretionary-ligatures // 酌情连字</span><br><span class="line">                        historical-ligatures //历史连字，老书中的连字</span><br></pre></td></tr></table></figure><p>需要关闭某些连字时：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-variant</span>-ligarures: common-ligatures</span><br><span class="line">                        no-discretionary-ligatures</span><br><span class="line">                        no-historical-ligatures</span><br></pre></td></tr></table></figure><p>font-variant-ligatures还可以为none, 他会把所有的连字效果关掉，最好不要用；如果要把font-variant-ligatures属性复位为初始值，使用normal而不是none。</p><h2 id="华丽的-amp-符号"><a href="#华丽的-amp-符号" class="headerlink" title="华丽的&amp;符号"></a>华丽的&amp;符号</h2><style>  @font-face {    font-family: Ampersand;    src: local('Baskerville-Italic'),         local('Goudy Old Style-Italic'),         local('Garamond-Italic'),         local('Palatino-Italic');    unicode-range: U+26;  }  .petty-font {    font-family: Ampersand;  }</style><p><span class="petty-font">HTML &amp; CSS</span></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Ampersand;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">&#x27;Baskerville-Italic&#x27;</span>),</span><br><span class="line">        <span class="built_in">local</span>(<span class="string">&#x27;Goudy Old Style-Italic&#x27;</span>),</span><br><span class="line">        <span class="built_in">local</span>(<span class="string">&#x27;Garamond-Italic&#x27;</span>),</span><br><span class="line">        <span class="built_in">local</span>(<span class="string">&#x27;Palatino-Italic&#x27;</span>);</span><br><span class="line">  unicode-range: U+<span class="number">26</span>; // &amp;符号的unicode编号为<span class="number">26</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.petty-font</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Ampersand;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义下划线"><a href="#自定义下划线" class="headerlink" title="自定义下划线"></a>自定义下划线</h2><style>  .text-underline span{    box-shadow: 0 1px gray;  }  .text-underline2 span {    background: linear-gradient(gray,gray) no-repeat;    background-size: 100% 1px;    background-position: 0 1.15em;    text-shadow: .05em 0 white, -.05em 0 white;  }  .text-underline3 span {    background: linear-gradient(90deg, gray 66%, white 0) repeat-x;    background-size: .8em 2px;    background-position: 0 1.15em;  }  .text-underline4 span {    background:     radial-gradient(white 40%, transparent 0), radial-gradient(white 40%, transparent 0), radial-gradient(#58a 40%, transparent 0), radial-gradient(#58a 40%, transparent 0);    background-size: .5em 1em;    background-repeat: repeat-x;    background-position: 0 1em, .25em 1em, 0 .9em, .25em .9em;    text-shadow: .05em 0 white, -.05em 0 white;  }  .text-underline5 span {    background:     linear-gradient(-45deg, transparent 40%, red 0, red 60%, transparent 0) 0 1.2em,      linear-gradient(45deg, transparent 40%, red 0, red 60%, transparent 0) .1em 1.2em;    background-repeat: repeat-x;    background-size: .2em .1em;    text-shadow: .05em 0 white, -.05em 0 white;  }</style><h3 id="实线"><a href="#实线" class="headerlink" title="实线"></a>实线</h3><div class="example box-inline text-underline" style="width: 140px; hyphens: auto;">  "The only way to <span>get rid of a temp&shy;tation is</span> to <span>yield to it."</span></div><div class="example box-inline text-underline2" style="width: 140px; hyphens: auto;">  "The only way to <span>get rid of a temp&shy;tation is</span> to <span>yield to it."</span></div><p>左图使用的是box-shadow:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> gray;</span><br></pre></td></tr></table></figure><p>右图使用的是background，利用渐变:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(gray,gray) no-repeat;</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">1px</span>;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">1.15em</span>;</span><br><span class="line"><span class="attribute">text-shadow</span>: .<span class="number">05em</span> <span class="number">0</span> white, -.<span class="number">05em</span> <span class="number">0</span> white; //使得下划线在文字部分断开</span><br></pre></td></tr></table></figure><h3 id="虚线"><a href="#虚线" class="headerlink" title="虚线"></a>虚线</h3><div class="example box-inline text-underline3" style="width: 140px; hyphens: auto;">  "The only way to <span>get rid of a temp&shy;tation is</span> to <span>yield to it."</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, gray <span class="number">66%</span>, white <span class="number">0</span>) repeat-x;</span><br><span class="line"><span class="attribute">background-size</span>: .<span class="number">8em</span> <span class="number">2px</span>;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">1.15em</span>;</span><br></pre></td></tr></table></figure><h3 id="波浪线"><a href="#波浪线" class="headerlink" title="波浪线"></a>波浪线</h3><div class="example box-inline text-underline4" style="width: 140px; hyphens: auto;">  "<span>The only way to </span>get rid of a temp&shy;tation is to yield to it."</div><div class="example box-inline text-underline5" style="width: 140px; hyphens: auto;">  "<span>The only way to </span>get rid of a temp&shy;tation is to yield to it."</div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: </span><br><span class="line"><span class="built_in">radial-gradient</span>(white <span class="number">40%</span>, transparent <span class="number">0</span>), <span class="built_in">radial-gradient</span>(white <span class="number">40%</span>, transparent <span class="number">0</span>), <span class="built_in">radial-gradient</span>(<span class="number">#58a</span> <span class="number">40%</span>, transparent <span class="number">0</span>), <span class="built_in">radial-gradient</span>(<span class="number">#58a</span> <span class="number">40%</span>, transparent <span class="number">0</span>);</span><br><span class="line"><span class="attribute">background-size</span>: .<span class="number">5em</span> <span class="number">1em</span>;</span><br><span class="line"><span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0</span> .<span class="number">95em</span>, .<span class="number">25em</span> .<span class="number">95em</span>, <span class="number">0</span> .<span class="number">9em</span>, .<span class="number">25em</span> .<span class="number">9em</span>;</span><br><span class="line"><span class="attribute">text-shadow</span>: .<span class="number">05em</span> <span class="number">0</span> white, -.<span class="number">05em</span> <span class="number">0</span> white;</span><br></pre></td></tr></table></figure><p><em>注意</em>: radial-gradient的百分比是相对于矩形的斜边的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: </span><br><span class="line"><span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, transparent <span class="number">40%</span>, red <span class="number">0</span>, red <span class="number">60%</span>, transparent <span class="number">0</span>) <span class="number">0</span> <span class="number">1.2em</span>,</span><br><span class="line"><span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, transparent <span class="number">40%</span>, red <span class="number">0</span>, red <span class="number">60%</span>, transparent <span class="number">0</span>) .<span class="number">1em</span> <span class="number">1.2em</span>;</span><br><span class="line"><span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line"><span class="attribute">background-size</span>: .<span class="number">2em</span> .<span class="number">1em</span>;</span><br><span class="line"><span class="attribute">text-shadow</span>: .<span class="number">05em</span> <span class="number">0</span> white, -.<span class="number">05em</span> <span class="number">0</span> white;</span><br></pre></td></tr></table></figure><h2 id="现实中的文字效果"><a href="#现实中的文字效果" class="headerlink" title="现实中的文字效果"></a>现实中的文字效果</h2><style>  .font-box {    width: 150px;    padding: 10px;  }  .font-circle-box {    background: deeppink;    color: white;    font-size: 24px;    text-align: center;  }  .font-box1 {    background: hsl(210, 13%, 60%);    color: hsl(210, 13%, 30%);    text-shadow: 0 1px 1px hsla(0,0%,100%,.8);  }  .font-box2 {    color: hsl(210, 13%, 60%);    background: hsl(210, 13%, 30%);    text-shadow: 0 -1px 1px black;  }  .font-circle-box1 {    text-shadow: 1px 1px black, -1px -1px black,    1px -1px black, -1px 1px black;  }  .font-circle-box2 {    text-shadow: 0 0 2px black,0 0 2px black,    0 0 2px black,0 0 2px black,    0 0 2px black,0 0 2px black,    0 0 2px black,0 0 2px black;  }  .font-circle-box3 text {    fill: currentColor;  }  .font-circle-box3 svg {    overflow: visible;  }  .font-circle-box3 use {    stroke: green;    stroke-width: 6;    stroke-linejoin: round;  }</style><h3 id="凸版印刷效果"><a href="#凸版印刷效果" class="headerlink" title="凸版印刷效果"></a>凸版印刷效果</h3><div class="example font-box font-box1" style="display: inline-block;">The only way to get rid of a temptation is to yield to it.</div><div class="example font-box font-box2" style="display: inline-block;">The only way to get rid of a temptation is to yield to it.</div><p>浅色背景，深色文字 -&gt; 使用浅色投影实现凸起效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">hsl</span>(<span class="number">210</span>, <span class="number">13%</span>, <span class="number">60%</span>);</span><br><span class="line"><span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">210</span>, <span class="number">13%</span>, <span class="number">30%</span>);</span><br><span class="line"><span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>深色背景，浅色文字 -&gt; 使用深色投影实现凸起效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">210</span>, <span class="number">13%</span>, <span class="number">60%</span>);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">hsl</span>(<span class="number">210</span>, <span class="number">13%</span>, <span class="number">30%</span>);</span><br><span class="line"><span class="attribute">text-shadow</span>: <span class="number">0</span> -<span class="number">1px</span> <span class="number">1px</span> black;</span><br></pre></td></tr></table></figure><h3 id="空心字效果"><a href="#空心字效果" class="headerlink" title="空心字效果"></a>空心字效果</h3><div class="example font-box font-circle-box font-circle-box1">css</div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> black, -<span class="number">1px</span> -<span class="number">1px</span> black,</span><br><span class="line">    <span class="number">1px</span> -<span class="number">1px</span> black, -<span class="number">1px</span> <span class="number">1px</span> black;</span><br></pre></td></tr></table></figure><div class="example font-box font-circle-box font-circle-box2">css</div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> black,<span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> black,</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> black,<span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> black,</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> black,<span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> black,</span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> black,<span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> black;</span><br></pre></td></tr></table></figure><div class="example font-box font-circle-box font-circle-box3">  <svg width="2em" height="1.2em">    <use xlink:href="#css" />    <text id="css" y="1em">css</text>  </svg></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;2em&quot;</span> <span class="attr">height</span>=<span class="string">&quot;1.2em&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;css&quot;</span> <span class="attr">y</span>=<span class="string">&quot;1em&quot;</span>&gt;</span>css<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: deeppink;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.text</span> &#123;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.svg</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: visible;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.use</span> &#123;</span><br><span class="line">  stroke: green;</span><br><span class="line">  stroke-<span class="attribute">width</span>: <span class="number">6</span>;</span><br><span class="line">  stroke-linejoin: round;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文字外发光效果"><a href="#文字外发光效果" class="headerlink" title="文字外发光效果"></a>文字外发光效果</h3><style>  .font-light-box, .font-light-box2 {    background: #203;    color: #ffc;    text-align: center;    font-size: 24px;    transition: 1s;    cursor: pointer;  }  .font-light-box:hover {    text-shadow: 0 0 .1em, 0 0 .3em;  }  .font-light-box2:hover {    text-shadow: 0 0 .1em white, 0 0 .3em white;    color: transparent;  }</style><p>鼠标hover之后展示发光效果：</p><div class="example font-box font-light-box">blow</div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.font-light-box</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#203</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffc</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.font-light-box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> .<span class="number">1em</span>, <span class="number">0</span> <span class="number">0</span> .<span class="number">3em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>鼠标hover之后展示模糊效果：</p><div class="example font-box font-light-box2">blow</div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.font-light-box</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#203</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffc</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>隐藏文字，使用投影来模拟模糊效果：（如果浏览器不支持text-shadow,hover之后会什么都看不见）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.font-light-box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> .<span class="number">1em</span> white, <span class="number">0</span> <span class="number">0</span> .<span class="number">3em</span> white;</span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用滤镜：（如果浏览器不支持filter, 会平稳退化，hover之后没有模糊效果，但文字仍然保留）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.font-light-box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(.<span class="number">1em</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文字凸起效果"><a href="#文字凸起效果" class="headerlink" title="文字凸起效果"></a>文字凸起效果</h3><style>  .font-3d-box {    background: #58a;    color: white;    text-align: center;    font-size: 60px;  }  .font-3d-box1 {    text-shadow: 0 1px hsl(0,0%,85%),    0 2px hsl(0,0%,80%),    0 3px hsl(0,0%,75%),    0 4px hsl(0,0%,70%),    0 5px hsl(0,0%,65%),    0 5px 10px black;  }  .font-3d-box2 {    width: 300px;    color: white;    background: hsl(0, 50%, 45%);    text-shadow: 1px 1px black,    2px 2px black,    3px 3px black,    4px 4px black,    5px 5px black,    6px 6px black,    7px 7px black,    8px 8px black,    9px 9px black;  }</style><div class="example font-box font-3d-box font-3d-box1">css</div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="built_in">hsl</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">85%</span>),</span><br><span class="line">  <span class="number">0</span> <span class="number">2px</span> <span class="built_in">hsl</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">80%</span>),</span><br><span class="line">  <span class="number">0</span> <span class="number">3px</span> <span class="built_in">hsl</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">75%</span>),</span><br><span class="line">  <span class="number">0</span> <span class="number">4px</span> <span class="built_in">hsl</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">70%</span>),</span><br><span class="line">  <span class="number">0</span> <span class="number">5px</span> <span class="built_in">hsl</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">65%</span>),</span><br><span class="line">  <span class="number">0</span> <span class="number">5px</span> <span class="number">10px</span> black;</span><br></pre></td></tr></table></figure><div class="example font-box font-3d-box font-3d-box2">RETRO</div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">50%</span>, <span class="number">45%</span>);</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> black,</span><br><span class="line">    <span class="number">2px</span> <span class="number">2px</span> black,</span><br><span class="line">    <span class="number">3px</span> <span class="number">3px</span> black,</span><br><span class="line">    <span class="number">4px</span> <span class="number">4px</span> black,</span><br><span class="line">    <span class="number">5px</span> <span class="number">5px</span> black,</span><br><span class="line">    <span class="number">6px</span> <span class="number">6px</span> black,</span><br><span class="line">    <span class="number">7px</span> <span class="number">7px</span> black,</span><br><span class="line">    <span class="number">8px</span> <span class="number">8px</span> black,</span><br><span class="line">    <span class="number">9px</span> <span class="number">9px</span> black;</span><br></pre></td></tr></table></figure><h2 id="环形文字"><a href="#环形文字" class="headerlink" title="环形文字"></a>环形文字</h2><style>  .circular {    width: 10em;    height: 10em;    padding: 1em;    position: relative;  }  .circular path {    fill: none;  }  .circular svg {    overflow: visible;  }  .circular img {    position: absolute;    top: 1.5em;    left: 1.5em;    border-radius: 50%;    width: calc(100% - 3em);    height: calc(100% - 3em);  }</style><div class="example circular">  <svg viewBox="0 0 100 100">  <path d="M 0,50 a 50,50 0 1,1 0,1 z" id="circle" />    <text>      <textpath xlink:href="#circle">      circle reasoning works because something.circle works.      </textpath>    </text>  </svg>  <img src="/img/avatar.jpg"></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circular&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 100 100&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 0,50 a 50,50 0 1,1 0,1 z&quot;</span> <span class="attr">id</span>=<span class="string">&quot;circle&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textpath</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#circle&quot;</span>&gt;</span></span><br><span class="line">      circle reasoning works because something.circle works.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">textpath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.circular</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.circular</span> path &#123;</span><br><span class="line">  fill: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.circular</span> svg &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: visible;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> css揭秘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css视觉效果</title>
      <link href="/2022/04/09/css%E8%A7%86%E8%A7%89%E6%95%88%E6%9E%9C/"/>
      <url>/2022/04/09/css%E8%A7%86%E8%A7%89%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<style>  .example {    margin-bottom: 20px;  }  .box {    width: 200px;    height: 100px;    background: yellow;    position: relative;  }  .box-shadow1 {    box-shadow: 0 5px 4px -4px black;  }  .box-shadow2 {    box-shadow: 5px 5px 10px -5px black;  }  .box-shadow3 {    box-shadow: 5px 0 4px -4px black,                -5px 0 4px -4px black;  }  .box-special::after {    content: '';    position: absolute;    left: 100%;    top: 50%;    transform: translateY(-50%);    border-left: 10px solid yellow;    border-top: 10px solid transparent;    border-right: 10px solid transparent;    border-bottom: 10px solid transparent;  }  .box-shadow4 {    box-shadow: 2px 2px 5px rgba(0,0,0,.5)  }  .box-shadow5 {    filter: drop-shadow(2px 2px 5px rgba(0,0,0,.5))  }  .text-box {    background: transparent;    border: 5px solid pink;    font-size: 24px;    font-weight: 800;    text-align: center;    text-shadow: 0 5px 2px yellow;    filter: drop-shadow(2px 2px 5px rgba(0,0,0,.5))  }  .box.img-box {    background: url("https://cdn.britannica.com/52/146352-050-B4908468/Sumatran-tiger.jpg");    background-size: 100%;    filter: sepia(1) saturate(4) hue-rotate(295deg);    transition: .5s filter;  }  .img-box:hover {    filter: none;  }  .box.img-box2 {    background-color: hsl(335, 100%, 50%);    transition: .5s background-color;  }  .box.img-box2 img{    width: 100%;    height: 100%;    mix-blend-mode: luminosity;  }  .box.img-box3 {    background-image: url("https://cdn.britannica.com/52/146352-050-B4908468/Sumatran-tiger.jpg");    background-size: 100%;    background-color: hsl(335, 100%, 50%);    background-blend-mode: luminosity;    transition: .5s background-color;  }  .box.img-box3:hover,.box.img-box2:hover {    background-color: transparent;  }</style><h2 id="单侧投影"><a href="#单侧投影" class="headerlink" title="单侧投影"></a>单侧投影</h2><blockquote><p>box-shadow: x方向偏移 y方向偏移 模糊半径 扩张半径 颜色 内投影&#x2F;外投影</p></blockquote><h3 id="单侧投影-1"><a href="#单侧投影-1" class="headerlink" title="单侧投影"></a>单侧投影</h3><div class="example box box-shadow1"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">4px</span> -<span class="number">4px</span> black; // 扩张半径=-模糊半径</span><br></pre></td></tr></table></figure><h3 id="邻边投影"><a href="#邻边投影" class="headerlink" title="邻边投影"></a>邻边投影</h3><div class="example box box-shadow2"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> -<span class="number">5px</span> black; // 扩张半径=-模糊半径/<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="双侧投影"><a href="#双侧投影" class="headerlink" title="双侧投影"></a>双侧投影</h3><p>使用两侧单侧投影</p><div class="example box box-shadow3"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">0</span> <span class="number">4px</span> -<span class="number">4px</span> black,</span><br><span class="line">            -<span class="number">5px</span> <span class="number">0</span> <span class="number">4px</span> -<span class="number">4px</span> black;</span><br></pre></td></tr></table></figure><h2 id="不规则投影"><a href="#不规则投影" class="headerlink" title="不规则投影"></a>不规则投影</h2><h3 id="使用box-shadow"><a href="#使用box-shadow" class="headerlink" title="使用box-shadow:"></a>使用box-shadow:</h3><div class="example box box-special box-shadow4"></div><h3 id="使用svg滤镜（浏览器不完成支持）"><a href="#使用svg滤镜（浏览器不完成支持）" class="headerlink" title="使用svg滤镜（浏览器不完成支持）"></a>使用svg滤镜（浏览器不完成支持）</h3><p>常见的滤镜效果如下：blur() grayscale() drop-shadow(); 使用drop-shadow即可实现不规则投影：</p><div class="example box box-special box-shadow5"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：任何非透明的部分都会被一视同仁地打上阴影。如果使用text-shadow给文本加上了阴影，使用drop-shadow会给文本阴影打上阴影。</p><div class="example box text-box box-shadow6">nothing is impossible...</div><h2 id="染色效果"><a href="#染色效果" class="headerlink" title="染色效果"></a>染色效果</h2><h3 id="基于滤镜的染色效果"><a href="#基于滤镜的染色效果" class="headerlink" title="基于滤镜的染色效果"></a>基于滤镜的染色效果</h3><div class="example box img-box"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">filter</span>: <span class="built_in">sepia</span>(<span class="number">1</span>) <span class="built_in">saturate</span>(<span class="number">4</span>) <span class="built_in">hue-rotate</span>(<span class="number">295deg</span>);</span><br></pre></td></tr></table></figure><p>滤镜sepia(), 它会给图片增加一种降饱和度的橙黄色染色效果,几乎所有像素的色相值会被收敛到35~40。<br>滤镜saturate()，用来改变饱和度。<br>滤镜hue-rotate()，用来把每个像素的色相以指定的度数进行偏移。</p><h3 id="基于混合模式的方案"><a href="#基于混合模式的方案" class="headerlink" title="基于混合模式的方案"></a>基于混合模式的方案</h3><p>方案一：div+img</p><div class="example box img-box2">  <img src="https://cdn.britannica.com/52/146352-050-B4908468/Sumatran-tiger.jpg"/></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">335</span>, <span class="number">100%</span>, <span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">transition</span>: .<span class="number">5s</span> background-color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">mix-blend-mode</span>: luminosity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方案二：单个div设置background</p><div class="example box img-box3"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">335</span>, <span class="number">100%</span>, <span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">background</span>-blend-mode: luminosity;</span><br><span class="line">  <span class="attribute">transition</span>: .<span class="number">5s</span> background-color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到方案一中hover时无法切回到单色模式，方案二是完全可以的。</p><h2 id="毛玻璃效果"><a href="#毛玻璃效果" class="headerlink" title="毛玻璃效果"></a>毛玻璃效果</h2><p><img src="/../img/tiger.PNG"></p><p>实现方法：利用伪元素，将文字底部区域的图片进行模糊(blur) :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">    “The only wey to get rid of a temptation is to yield to it.Resist it, and your soul grows sick with longing for the things it has forbidden to itself, with desire for what its monstrous laws have made monstrous and unlawful.”</span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span> ——</span><br><span class="line">      <span class="tag">&lt;<span class="name">cite</span>&gt;</span></span><br><span class="line">        Oscar Wilde, The Pricture of Dorian Gray</span><br><span class="line">      <span class="tag">&lt;/<span class="name">cite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">main</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;xxx.jpg&quot;</span>) <span class="number">0</span> / cover fixed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,.<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">0</span>;<span class="attribute">top</span>:<span class="number">0</span>;<span class="attribute">right</span>:<span class="number">0</span>;<span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;xxx.jpg&quot;</span>) <span class="number">0</span> / cover fixed;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">20px</span>);</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="折角效果"><a href="#折角效果" class="headerlink" title="折角效果"></a>折角效果</h2><style>  .angle-45 {    background-image: linear-gradient(45deg, rgba(0,0,0,.5) 50%, white 0);    background-size: 30px 30px;    background-repeat: no-repeat;    background-position: top right;    border-radius: 7px;  }  .angle-30 {    background-image: linear-gradient(30deg, rgba(0,0,0,.5) 50%, white 0);    background-size:34px 20px;    background-repeat: no-repeat;    background-position: top right;  }  .angle-30-perf {    background-image: linear-gradient(30deg, transparent 50%, white 0);    background-size:34px 20px;    background-repeat: no-repeat;    background-position: top right;    border-radius: 7px;    position: relative;  }  .angle-30-perf::before {    content: '';    position: absolute;    right: 0;    top: 0;    background: linear-gradient(60deg, rgba(0,0,0,.5) 50%, transparent 0);    width: 20px;    height: 34px;    transform-origin: right bottom;    transform: translateY(-14px) rotate(-30deg);    border-bottom-left-radius: inherit;    box-shadow: -.2em .2em .3em -.1em rgba(0,0,0,.15);  }</style><h3 id="45度角"><a href="#45度角" class="headerlink" title="45度角"></a>45度角</h3><p>最简单的一种实现，利用渐变, 但是明显可以看出画出的图形不太逼真，因为无法在折角部分增加border-radius和box-shadow的处理（解决方法见之后的”其他角度“）：</p><div class="example box angle-45"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.angle-45</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>) <span class="number">50%</span>, white <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: top right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他角度"><a href="#其他角度" class="headerlink" title="其他角度"></a>其他角度</h3><p>直接用45度角通用的处理方法实现的效果：</p><div class="example box angle-30"></div><p>可以看出，直接用45度角的方法不行，因为x轴和y轴现在长度不相同，反转之后的效果明显不对。</p><p>因此需要借助伪元素，借助伪元素之后明显逼真了很多，所有角度的折角都可以通过这种方式实现：</p><div class="example box angle-30-perf"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.angle-30-perf</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">30deg</span>, transparent <span class="number">50%</span>, white <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">34px</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: top right;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">7px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.angle-30-perf</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">60deg</span>, <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>) <span class="number">50%</span>, transparent <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">34px</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: right bottom;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">14px</span>) <span class="built_in">rotate</span>(-<span class="number">30deg</span>);</span><br><span class="line">  <span class="attribute">border-bottom-left-radius</span>: inherit;</span><br><span class="line">  <span class="attribute">box-shadow</span>: -.<span class="number">2em</span> .<span class="number">2em</span> .<span class="number">3em</span> -.<span class="number">1em</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> css揭秘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css形状</title>
      <link href="/2022/04/03/css%E5%BD%A2%E7%8A%B6/"/>
      <url>/2022/04/03/css%E5%BD%A2%E7%8A%B6/</url>
      
        <content type="html"><![CDATA[<style>  .example {    margin: 20px;  }  .css-ellipse {    width: 200px;    height: 100px;    background: #fb3;  }  .css-ellipse1 {    border-radius: 50%;  }  .css-ellipse2 {    border-radius: 100% 0 0 100%/50%;  }  .css-ellipse3 {    border-radius: 100% 0 0 0;  }  .parallelogram1 {    width: 100px;    height: 20px;    background: yellowgreen;    transform: skewX(-45deg);    text-align: center;  }  .parallelogram2 {    width: 100px;    height: 20px;    position: relative;    text-align: center;    z-index: 10;  }  .parallelogram2::before {    content: '';    width: 100%;    height: 100%;    background: yellowgreen;    position: absolute;    left: 0;    top: 0;    transform: skewX(-45deg);    z-index: -1;  }  .lozenge1 {    width: 50px;    height: 50px;    background: url("/img/avatar.jpg");    background-size: cover;    transform: rotate(45deg);  }  .lozenge2 {    width: 50px;    height: 50px;    transform: rotate(45deg);    overflow: hidden;    background: yellowgreen;  }  .lozenge2 img {    transform: rotate(-45deg) scale(1.42);  }  .lozenge3 {    width: 71px;    height: 71px;    background: url("/img/avatar.jpg");    clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%)  }  .trapezium1 {    width: 150px;    height: 30px;    background: #58a;    transform: perspective(.5em) rotateX(5deg);  }  .trapezium2 {    width: 100px;    height: 30px;    background: #58a;    transform: perspective(.5em) rotateX(5deg);    border-radius: .5em .5em 0 0;    transform-origin: right bottom;  }</style><h2 id="自适应的椭圆"><a href="#自适应的椭圆" class="headerlink" title="自适应的椭圆"></a>自适应的椭圆</h2><h3 id="椭圆"><a href="#椭圆" class="headerlink" title="椭圆"></a>椭圆</h3><div class="example css-ellipse css-ellipse1"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br></pre></td></tr></table></figure><h3 id="二分之一椭圆"><a href="#二分之一椭圆" class="headerlink" title="二分之一椭圆"></a>二分之一椭圆</h3><div class="example css-ellipse css-ellipse2"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">100%</span> <span class="number">0</span> <span class="number">0</span> <span class="number">100%</span>/<span class="number">50%</span>;</span><br></pre></td></tr></table></figure><h3 id="四分之一椭圆"><a href="#四分之一椭圆" class="headerlink" title="四分之一椭圆"></a>四分之一椭圆</h3><div class="example css-ellipse css-ellipse3"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">100%</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>关于border-radius的解释，语法：水平切角&#x2F;垂直切角，水平切角和垂直切角里都有四个方位。<br>以二分之一椭圆为例:左上角的水平切角和垂直切角分别为100%和50%，右上角都为0，右下角都为0，左下角为100%和50%，所以是100% 0 0 100%&#x2F;50%<br><img src="/../img/%E6%A4%AD%E5%9C%86.PNG"></p><h2 id="平行四边形"><a href="#平行四边形" class="headerlink" title="平行四边形"></a>平行四边形</h2><p>直接通过矩形变形得到:</p><div class="example parallelogram1">abc</div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">skewX</span>(-<span class="number">45deg</span>);</span><br></pre></td></tr></table></figure>存在的问题，内部的文字也倾斜了。解决方案主要有:1. 将内部文字反向侵袭skewX(45deg); 2. 使用伪元素;<p>伪元素方案：</p><div class="example parallelogram2">abc</div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">skewX</span>(-<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="菱形"><a href="#菱形" class="headerlink" title="菱形"></a>菱形</h2><p>通过简单的矩形旋转可以得到如下的示例图片：</p><div class="example lozenge1"></div>可以发现和之前的平行四边形一样内部的背景图片也变形了。<p>解决方案：</p><ol><li><p>使用单独的元素img替换background-image,再负方向旋转校正</p><div class="example lozenge2">  <img src="/img/avatar.jpg"></img></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>) <span class="built_in">scale</span>(<span class="number">1.42</span>);</span><br></pre></td></tr></table></figure>这里的scale是因为如果不放大，图片四个角会有空隙,需要乘以 ($\sqrt{2}$)</li><li><p>使用clip-path</p><div class="example lozenge3">  <img src="/img/avatar.jpg"></img></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">50%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">50%</span>, <span class="number">50%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">50%</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="切角效果"><a href="#切角效果" class="headerlink" title="切角效果"></a>切角效果</h2><style>  .corner-box {    width: 100px;    height: 100px;    background: #58a;    background-image:      linear-gradient(45deg, white 15px, transparent 0),      linear-gradient(-45deg, white 15px, transparent 0),      linear-gradient(135deg, white 15px, transparent 0),      linear-gradient(-135deg, white 15px, transparent 0);  }  .corner-box2 {    width: 100px;    height: 100px;    background-image:      radial-gradient(circle at top left, transparent 15px, #58a 0),      radial-gradient(circle at bottom left, transparent 15px, #58a 0),      radial-gradient(circle at top right, transparent 15px, #58a 0),      radial-gradient(circle at bottom right, transparent 15px, #58a 0);    background-size: 50% 50%;    background-repeat: no-repeat;    background-position: top left, bottom left, top right,bottom right;  }  .corner-box3 {    width: 100px;    height: 100px;    background: #58a;    background-clip: padding-box;    border: 15px solid #58a;    border-image: 1 url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="3" height="3" fill="%2358a"><polygon points="0,1 1,0 2,0 3,1 3,2 2,3 1,3 0,2"/></svg>')  }  .corner-box4 {    width: 100px;    height: 100px;    background: #58a;    clip-path:      polygon(20px 0, calc(100% - 20px) 0, 100% 20px,      100% calc(100% - 20px), calc(100% - 20px) 100%,      20px 100%, 0 calc(100% - 20px), 0 20px)  }</style><h3 id="三角切角"><a href="#三角切角" class="headerlink" title="三角切角"></a>三角切角</h3><div class="example corner-box"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="number">#58a</span>;</span><br><span class="line"><span class="attribute">background-image</span>:</span><br><span class="line">  <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, white <span class="number">15px</span>, transparent <span class="number">0</span>),</span><br><span class="line">  <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, white <span class="number">15px</span>, transparent <span class="number">0</span>),</span><br><span class="line">  <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, white <span class="number">15px</span>, transparent <span class="number">0</span>),</span><br><span class="line">  <span class="built_in">linear-gradient</span>(-<span class="number">135deg</span>, white <span class="number">15px</span>, transparent <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="弧形切角"><a href="#弧形切角" class="headerlink" title="弧形切角"></a>弧形切角</h3><div class="example corner-box2"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>:</span><br><span class="line">  <span class="built_in">radial-gradient</span>(circle at top left, transparent <span class="number">15px</span>, <span class="number">#58a</span> <span class="number">0</span>),</span><br><span class="line">  <span class="built_in">radial-gradient</span>(circle at bottom left, transparent <span class="number">15px</span>, <span class="number">#58a</span> <span class="number">0</span>),</span><br><span class="line">  <span class="built_in">radial-gradient</span>(circle at top right, transparent <span class="number">15px</span>, <span class="number">#58a</span> <span class="number">0</span>),</span><br><span class="line">  <span class="built_in">radial-gradient</span>(circle at bottom right, transparent <span class="number">15px</span>, <span class="number">#58a</span> <span class="number">0</span>);</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"><span class="attribute">background-position</span>: top left, bottom left, top right,bottom right;</span><br></pre></td></tr></table></figure><h3 id="svg-border-image"><a href="#svg-border-image" class="headerlink" title="svg+border-image"></a>svg+border-image</h3><div class="example corner-box3"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="number">#58a</span>;</span><br><span class="line"><span class="attribute">background-clip</span>: padding-box;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">15px</span> solid <span class="number">#58a</span>;</span><br><span class="line"><span class="attribute">border-image</span>: <span class="number">1</span> <span class="built_in">url</span>(<span class="string">&#x27;data:image/svg+xml,\</span></span><br><span class="line"><span class="string">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;\</span></span><br><span class="line"><span class="string"> width=&quot;3&quot; height=&quot;3&quot; fill=&quot;%2358a&quot;&gt;\</span></span><br><span class="line"><span class="string"> &lt;polygon points=&quot;0,1 1,0 2,0 3,1 3,2 2,3 1,3 0,2&quot;/&gt;\</span></span><br><span class="line"><span class="string"> &lt;/svg&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="clip-path"><a href="#clip-path" class="headerlink" title="clip-path"></a>clip-path</h3><div class="example corner-box4"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="number">#58a</span>;</span><br><span class="line"><span class="attribute">clip-path</span>:</span><br><span class="line">  <span class="built_in">polygon</span>(<span class="number">20px</span> <span class="number">0</span>, <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>) <span class="number">0</span>, <span class="number">100%</span> <span class="number">20px</span>,</span><br><span class="line">  <span class="number">100%</span> <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>), <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>) <span class="number">100%</span>,</span><br><span class="line">  <span class="number">20px</span> <span class="number">100%</span>, <span class="number">0</span> <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>), <span class="number">0</span> <span class="number">20px</span>)</span><br></pre></td></tr></table></figure><h2 id="梯形"><a href="#梯形" class="headerlink" title="梯形"></a>梯形</h2><h3 id="简易梯形"><a href="#简易梯形" class="headerlink" title="简易梯形"></a>简易梯形</h3><div class="example trapezium1"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">perspective</span>(.<span class="number">5em</span>) <span class="built_in">rotateX</span>(<span class="number">5deg</span>);</span><br></pre></td></tr></table></figure><h3 id="书签效果"><a href="#书签效果" class="headerlink" title="书签效果"></a>书签效果</h3><div class="example trapezium2"></div>只需改变transform-origin, trasnform-origin设置为right bottom即可实现上面的书签效果:<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>: right bottom;</span><br></pre></td></tr></table></figure><h2 id="简单的饼图"><a href="#简单的饼图" class="headerlink" title="简单的饼图"></a>简单的饼图</h2><style>  .example-wrap {    display: flex;  }  img {    margin: 0 !important;  }  .pie, .pie-60 {    width: 100px;    height: 100px;    border-radius: 50%;    background: yellowgreen;    position: relative;    background-image: linear-gradient(90deg, transparent 50%, #655 0);  }  .pie::before {    content: '';    width: 50%;    height: 100%;    position: absolute;    left: 50%;    transform-origin: left;    background: yellowgreen;    border-radius: 0 100% 100% 0/50%;    transform: rotate(.3turn);  }  @keyframes spin {    to {transform: rotate(.5turn);}  }  @keyframes bg {    50% {background: #655;}  }  .pie-60::before {    content: '';    width: 50%;    height: 100%;    position: absolute;    left: 50%;    transform-origin: left;    background: yellowgreen;    border-radius: 0 100% 100% 0/50%;    animation: spin 50s linear infinite,               bg 100s step-end infinite;    animation-delay: -60s;    animation-play-state: paused;  }  .pie1 circle, .pie1-1 circle {    fill: yellowgreen;    stroke: #655;    stroke-width: 40;    stroke-dasharray: 20 10;  }  .pie1-1 svg, .pie2 svg {    transform: rotate(-90deg);    background: yellowgreen;    border-radius: 50%;  }  @keyframes fillup {    to {      stroke-dasharray: 189 189;    }  }  .pie2 circle {    fill: yellowgreen;    stroke: #655;    stroke-width: 50;    stroke-dasharray: 0 189;    animation: fillup 5s linear infinite;  }  .pie3, .pie4{    margin: 50px;  }  .pie3 svg {    transform: rotate(-90deg) scale(3);    background: yellowgreen;    border-radius: 50%;  }  .pie3 circle {    fill: transparent;    stroke: #655;    stroke-width: 32;    stroke-dasharray: 60 100;  }  .pie4 svg {    transform: rotate(-90deg) scale(3);    background: yellowgreen;    border-radius: 50%;  }  .pie4 circle:nth-child(1) {    fill: transparent;    stroke: #58a;    stroke-width: 32;    stroke-dasharray: 30 100;  }  .pie4 circle:nth-child(2) {    fill: transparent;    stroke: deeppink;    stroke-width: 32;    stroke-dasharray: 30 100;    stroke-dashoffset: 100;  }</style><h3 id="伪元素解决方案"><a href="#伪元素解决方案" class="headerlink" title="伪元素解决方案"></a>伪元素解决方案</h3><div class="example pie"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pie</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, transparent <span class="number">50%</span>, <span class="number">#655</span> <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pie</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>: left;</span><br><span class="line">  <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">100%</span> <span class="number">100%</span> <span class="number">0</span>/<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(.<span class="number">3turn</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>但是这样写当饼图比率超过50%的时候无法按照预想的正确显示，60%:<p><img src="/../img/pie60.jpg"></p><p>这个问题可以用动画的一个小技巧解决，用负的动画延时来直接跳至动画的任意时间点，并定格在那里。因为动画是暂停的，所以动画的第一帧（由负的animation-delay值定义）将是唯一显示出的那一帧，在饼图上显示出的比率就是我们的animation-delay值在总的动画时间里所占的比率：</p><div class="example pie-60"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> spin &#123;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(.<span class="number">5turn</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> bg &#123;</span><br><span class="line">  <span class="number">50%</span> &#123;<span class="attribute">background</span>: <span class="number">#655</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pie-60</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"> <span class="comment">/* 相同的样式略 */</span></span><br><span class="line">  <span class="attribute">animation</span>: spin <span class="number">50s</span> linear infinite,</span><br><span class="line">              bg <span class="number">100s</span> step-end infinite;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">60s</span>;</span><br><span class="line">  <span class="attribute">animation-play-state</span>: paused;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="svg解决方案"><a href="#svg解决方案" class="headerlink" title="svg解决方案"></a>svg解决方案</h3><h4 id="关于strokw-width和stoke-dasharray"><a href="#关于strokw-width和stoke-dasharray" class="headerlink" title="关于strokw-width和stoke-dasharray"></a>关于strokw-width和stoke-dasharray</h4><p>先了解一下stroke-width和stroke-dasharray:<br>stroke-width表示线段宽度；<br>stroke-dasharray第一个参数表示线段长度，第二个参数表示间隙宽度。</p><p>使用示例如下：</p><div class="example-wrap"><div class="example pie1">  <svg width="100" height="100">    <circle r="25" cx="50" cy="50"/>  </svg></div><div class="example pie1-1">  <svg width="100" height="100">    <circle r="25" cx="50" cy="50"/>  </svg></div></div><p>如上图左边的图形：<br><img src="/../img/stroke-explain.jpg"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pie1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">circle</span> <span class="attr">r</span>=<span class="string">&quot;25&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;50&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;50&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pie1</span> circle&#123;</span><br><span class="line">  fill: yellowgreen;</span><br><span class="line">  stroke: <span class="number">#655</span>;</span><br><span class="line">  stroke-<span class="attribute">width</span>: <span class="number">40</span>;</span><br><span class="line">  stroke-dasharray: <span class="number">20</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改变stoke-width 还能实现各种有趣的图形：<br><img src="/../img/%E9%A5%BC%E5%9B%BEstoke-width.jpg"></p><p>设置stroke-width等于2 x r, stroke-dasharray的第二个参数大于2 x pi x r就可以得到连续的图案。</p><div class="example-wrap"><div class="example pie3">  <svg width="32" height="32">    <circle r="16" cx="16" cy="16"/>  </svg></div><div class="example pie2">  <svg width="100" height="100">    <circle r="25" cx="50" cy="50"/>  </svg></div></div><h4 id="实现不同比率的圆"><a href="#实现不同比率的圆" class="headerlink" title="实现不同比率的圆"></a>实现不同比率的圆</h4><p>要设置60%比率的圆，stroke-dasharray的线段长度为(60% * 2 * pi * r) , 这里的r是circlr的半径。<br>所以可设置圆周长为100，这样设置不同比率的圆形时stroke-dasharray的第一个参数就可以直接按照比率进行设置。<br>因为2 x pi x16约等于100，所以设置r为16。<br>这样设置以后60%比率的圆, storke-dasharray的第一个参数只需填写45即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pie3</span> svg &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">90deg</span>) <span class="built_in">scale</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pie3</span> circle &#123;</span><br><span class="line">  fill: transparent;</span><br><span class="line">  stroke: <span class="number">#655</span>;</span><br><span class="line">  stroke-<span class="attribute">width</span>: <span class="number">32</span>;</span><br><span class="line">  stroke-dasharray: <span class="number">60</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多色块的圆"><a href="#多色块的圆" class="headerlink" title="多色块的圆"></a>多色块的圆</h4><p>使用svg解决方案能很方便地增加第三种颜色，增加圆形，并设置stroke-dashoffset即可。</p><blockquote><p>stroke-dashoffset 属性指定了dash模式到路径开始的距离。<br>如果使用了一个 &lt;百分比&gt; 值， 那么这个值就代表了当前视口的一个百分比。<br>值可以取为负值。</p></blockquote><div class="example pie4">  <svg width="32" height="32">    <circle r="16" cx="16" cy="16"/>    <circle r="16" cx="16" cy="16"/>  </svg></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pie4</span> circle<span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  fill: transparent;</span><br><span class="line">  stroke: <span class="number">#58a</span>;</span><br><span class="line">  stroke-<span class="attribute">width</span>: <span class="number">32</span>;</span><br><span class="line">  stroke-dasharray: <span class="number">30</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pie4</span> circle<span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  fill: transparent;</span><br><span class="line">  stroke: deeppink;</span><br><span class="line">  stroke-<span class="attribute">width</span>: <span class="number">32</span>;</span><br><span class="line">  stroke-dasharray: <span class="number">30</span> <span class="number">100</span>;</span><br><span class="line">  stroke-dashoffset: <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> css揭秘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css背景与边框</title>
      <link href="/2022/03/27/css%E8%83%8C%E6%99%AF%E4%B8%8E%E8%BE%B9%E6%A1%86/"/>
      <url>/2022/03/27/css%E8%83%8C%E6%99%AF%E4%B8%8E%E8%BE%B9%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<h2 id="背景侵入边框问题"><a href="#背景侵入边框问题" class="headerlink" title="背景侵入边框问题"></a>背景侵入边框问题</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-clip</span>: padding-box</span><br></pre></td></tr></table></figure><p>background-clip的属性有content-box、padding-box、border-box, text, 默认为border-box,所以背景会侵入边框，改为padding-box,背景会裁剪到padding, 因而能解决背景侵入边框问题。</p><p>详细例子可在MDN上查看：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-clip">https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-clip</a></p><h2 id="多重边框问题"><a href="#多重边框问题" class="headerlink" title="多重边框问题"></a>多重边框问题</h2><h3 id="background叠加"><a href="#background叠加" class="headerlink" title="background叠加"></a>background叠加</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: deeppink;</span><br><span class="line"> <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(yellowgreen, yellowgreen),</span><br><span class="line">                   <span class="built_in">linear-gradient</span>(<span class="number">#655</span>, <span class="number">#655</span>);</span><br><span class="line"> <span class="attribute">background-size</span>: <span class="number">100px</span> <span class="number">100px</span>, <span class="number">120px</span> <span class="number">120px</span>;</span><br><span class="line"> <span class="attribute">background-repeat</span>: no-repeat, no-repeat;</span><br><span class="line"> <span class="attribute">background-position</span>: center, center;</span><br></pre></td></tr></table></figure><p>代码太过复杂，不够DRY。</p><div class="css-box1"></div><style>.css-box1{  width: 130px;  height: 130px;  background: deeppink;  background-image: linear-gradient(yellowgreen, yellowgreen),                    linear-gradient(#655, #655);  background-size: 100px 100px, 120px 120px;  background-repeat: no-repeat, no-repeat;  background-position: center, center;  margin: 20px;}</style><h3 id="使用box-shadow"><a href="#使用box-shadow" class="headerlink" title="使用box-shadow"></a>使用box-shadow</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: yellowgreen;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#655</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> deeppink;</span><br></pre></td></tr></table></figure><p>注意点：box-shadow不影响布局和鼠标事件，可通过设置inset属性使得box-shaow投影在元素内部解决。</p><div class="css-box2"></div><style>.css-box2{  width: 130px;  height: 130px;  box-sizing: border-box;  background: yellowgreen;  box-shadow: 0 0 0 5px deeppink inset, 0 0 0 15px #655 inset;  margin: 20px;}</style><h3 id="双重边框可使用border-outline"><a href="#双重边框可使用border-outline" class="headerlink" title="双重边框可使用border + outline"></a>双重边框可使用border + outline</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: yellowgreen;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#655</span>;</span><br><span class="line"><span class="attribute">outline</span>: <span class="number">5px</span> solid deeppink;</span><br></pre></td></tr></table></figure><p>outline能实现box-shaow实现不了的虚线等效果，并能通过outline-offset设置偏移值。<br>缺点是目前outline只能是矩形，如果存在border-radius，会存在空缺；可通过设置box-shadow来覆盖空缺。</p><div class="css-box3"></div><style>.css-box3{  width: 100px;  height: 100px;  box-sizing: content-box;  background: yellowgreen;  border: 10px solid #655;  outline: 5px solid deeppink;  margin: 20px;  margin-left: 25px;}</style><h2 id="灵活的背景定位"><a href="#灵活的背景定位" class="headerlink" title="灵活的背景定位"></a>灵活的背景定位</h2><p>一个div,padding-rihgt为20px,padding-bottom为10px;要求背景在content-box内部（不覆盖padding）。</p><h3 id="相对于右边和下方定位"><a href="#相对于右边和下方定位" class="headerlink" title="相对于右边和下方定位"></a>相对于右边和下方定位</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-position</span>: right <span class="number">20px</span> bottom <span class="number">10px</span>;</span><br></pre></td></tr></table></figure><h3 id="使用background-origin"><a href="#使用background-origin" class="headerlink" title="使用background-origin"></a>使用background-origin</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-origin</span>: content-box;</span><br></pre></td></tr></table></figure><p>默认情况下，background-origin相对于padding-box为准，这样的话如果改变padding的值，需要同时修改background-position中的值，而改为相对于content-box后，就需要再修改。</p><h3 id="使用calc"><a href="#使用calc" class="headerlink" title="使用calc"></a>使用calc</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-position</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">20px</span>) <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">10px</span>); </span><br></pre></td></tr></table></figure><h2 id="边框内圆角"><a href="#边框内圆角" class="headerlink" title="边框内圆角"></a>边框内圆角</h2><p>实现下面的边框内圆角使用两个div能轻松实现，如果要求只是用一个div呢？</p><div class="css-box4">  something is wrong</div><style>.css-box4 {  width: 150px;  height: 50px;  background: tan;  border-radius: .8em;  outline: 0.4em solid black;  box-shadow: 0 0 0 0.35em black;  text-align: center;  margin: 20px;}</style><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: tan;</span><br><span class="line"><span class="attribute">border-radius</span>: .<span class="number">8em</span>;</span><br><span class="line"><span class="attribute">outline</span>: <span class="number">0.4em</span> solid black;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0.35em</span> black;</span><br></pre></td></tr></table></figure>其中box-shadow的扩张值应大于等于($\sqrt{2}$-1)r, r为border-radius的值。<h2 id="条纹背景"><a href="#条纹背景" class="headerlink" title="条纹背景"></a>条纹背景</h2><style>.css-box5 {  width: 150px;  height: 50px;  background-image: linear-gradient(red 50%, yellow 80%);  margin: 20px;}.css-box5.css-box5-vertical {  background-image: linear-gradient(90deg, red 50%, yellow 80%);}.css-box5.css-box5-kink-simple {  background-image: linear-gradient(60deg, red 20%, yellow 50%, green 90%);  background-size: 30px 100%;}.css-box5.css-box5-kink {  background-image: repeating-linear-gradient(60deg, #fb3, #fb3 15px, #58a 0,#58a 30px);}.css-box5.css-box5-similar {  background: #58a;  background-image:    repeating-linear-gradient(30deg, transparent 0, transparent 15px, hsla(0, 0%, 100%, .1) 0,hsla(0, 0%, 100%, .1) 30px);}.css-box5.css-box5-zhishu {  width: 300px;  height: 100px;  background: hsl(20, 40%, 90%);  background-image:    linear-gradient(90deg, #fb3 10px, transparent 0),    linear-gradient(90deg, #ab4 20px, transparent 0),    linear-gradient(90deg, #655 20px, transparent 0);  background-size: 41px 100%, 61px 100%, 83px 100%;}</style><h3 id="水平条纹"><a href="#水平条纹" class="headerlink" title="水平条纹"></a>水平条纹</h3><p>默认为水平条纹(渐变轴为to right,180度)：</p><div class="css-box5"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(red <span class="number">50%</span>, yellow <span class="number">80%</span>);</span><br></pre></td></tr></table></figure>解析一下，这里的意思是从0%-50%为red,从50%-80%渐变为yellow, 80%-100%为yellow。<h3 id="垂直条纹"><a href="#垂直条纹" class="headerlink" title="垂直条纹"></a>垂直条纹</h3><p>设置旋转角度90deg，为垂直条纹，顺时针旋转为正。</p><div class="css-box5 css-box5-vertical"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, red <span class="number">50%</span>, yellow <span class="number">80%</span>);</span><br></pre></td></tr></table></figure><h3 id="斜向条纹"><a href="#斜向条纹" class="headerlink" title="斜向条纹"></a>斜向条纹</h3><p>同样设置旋转角度即可。</p><div class="css-box5 css-box5-kink-simple"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">60deg</span>, red <span class="number">20%</span>, yellow <span class="number">50%</span>, green <span class="number">90%</span>);</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">100%</span>;</span><br></pre></td></tr></table></figure><h3 id="更好的斜向条纹"><a href="#更好的斜向条纹" class="headerlink" title="更好的斜向条纹"></a>更好的斜向条纹</h3><p>可以看到，使用linear-gradient实现的斜向条纹在重复的时候不能得到应有的效果，使用repeating-linear-gradient来实现更好的斜向条纹。</p><div class="css-box5 css-box5-kink"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: <span class="built_in">repeating-linear-gradient</span>(<span class="number">60deg</span>, <span class="number">#fb3</span>, <span class="number">#fb3</span> <span class="number">15px</span>, <span class="number">#58a</span> <span class="number">0</span>,<span class="number">#58a</span> <span class="number">30px</span>);</span><br></pre></td></tr></table></figure>对于0的解释：0会使用前面出现过最大的值替代，这里也就是15px, 使用这种方式可以简写;<h3 id="灵活的同色系条纹"><a href="#灵活的同色系条纹" class="headerlink" title="灵活的同色系条纹"></a>灵活的同色系条纹</h3><p>同色系条纹可以用透明层叠加的方式</p><div class="css-box5 css-box5-similar"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="number">#58a</span>;</span><br><span class="line"><span class="attribute">background-image</span>:</span><br><span class="line">    <span class="built_in">repeating-linear-gradient</span>(<span class="number">30deg</span>, transparent <span class="number">0</span>, transparent <span class="number">15px</span>, <span class="built_in">hsla</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">100%</span>, .<span class="number">1</span>) <span class="number">0</span>,<span class="built_in">hsla</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">100%</span>, .<span class="number">1</span>) <span class="number">30px</span>);</span><br></pre></td></tr></table></figure><h2 id="复杂的背景图案"><a href="#复杂的背景图案" class="headerlink" title="复杂的背景图案"></a>复杂的背景图案</h2><style>  .css-box6 {    width: 100px;    height: 100px;    background: tan;    background-image:      linear-gradient(white 1px, transparent 0),      linear-gradient(90deg, white 1px, transparent 0);    background-size: 30px 30px;    margin: 20px;  }  .css-box7 {    width: 100px;    height: 100px;    background: #655;    background-image:      radial-gradient(tan 30%, transparent 0),      radial-gradient(tan 30%, transparent 0);    background-size: 20px 20px;    background-position: 0 0, 10px 10px;    margin: 20px;  }  .css-box8 {    width: 100px;    height: 100px;    background: white;    background-image:      linear-gradient(45deg, black 0, black 25%, transparent 0, transparent 75%, black 0, black 100%),      linear-gradient(45deg, black 0, black 25%, transparent 0, transparent 75%, black 0, black 100%);    background-size: 20px 20px;    background-position: 0 0, 10px 10px;    margin: 20px;  }</style><h3 id="网格"><a href="#网格" class="headerlink" title="网格"></a>网格</h3><div class="css-box6"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background</span>: tan;</span><br><span class="line"><span class="attribute">background-image</span>:</span><br><span class="line">  <span class="built_in">linear-gradient</span>(white <span class="number">1px</span>, transparent <span class="number">0</span>),</span><br><span class="line">  <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, white <span class="number">1px</span>, transparent <span class="number">0</span>);</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br></pre></td></tr></table></figure><h3 id="波点"><a href="#波点" class="headerlink" title="波点"></a>波点</h3><div class="css-box7"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#655</span>;</span><br><span class="line"><span class="attribute">background-image</span>:</span><br><span class="line">  <span class="built_in">radial-gradient</span>(tan <span class="number">30%</span>, transparent <span class="number">0</span>),</span><br><span class="line">  <span class="built_in">radial-gradient</span>(tan <span class="number">30%</span>, transparent <span class="number">0</span>);</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>, <span class="number">10px</span> <span class="number">10px</span>;</span><br></pre></td></tr></table></figure><h3 id="棋盘"><a href="#棋盘" class="headerlink" title="棋盘"></a>棋盘</h3><div class="css-box8"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background</span>: white;</span><br><span class="line"><span class="attribute">background-image</span>:</span><br><span class="line">  <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, black <span class="number">0</span>, black <span class="number">25%</span>, transparent <span class="number">0</span>, transparent <span class="number">75%</span>, black <span class="number">0</span>, black <span class="number">100%</span>),</span><br><span class="line">  <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, black <span class="number">0</span>, black <span class="number">25%</span>, transparent <span class="number">0</span>, transparent <span class="number">75%</span>, black <span class="number">0</span>, black <span class="number">100%</span>);</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>, <span class="number">10px</span> <span class="number">10px</span>;</span><br></pre></td></tr></table></figure>更多的：https://projects.verou.me/css3patterns/<h2 id="伪随机背景"><a href="#伪随机背景" class="headerlink" title="伪随机背景"></a>伪随机背景</h2><p>质数的使用:</p><div class="css-box5 css-box5-zhishu"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">hsl</span>(<span class="number">20</span>, <span class="number">40%</span>, <span class="number">90%</span>);</span><br><span class="line"><span class="attribute">background-image</span>:</span><br><span class="line">  <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#fb3</span> <span class="number">10px</span>, transparent <span class="number">0</span>),</span><br><span class="line">  <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#ab4</span> <span class="number">20px</span>, transparent <span class="number">0</span>),</span><br><span class="line">  <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#655</span> <span class="number">20px</span>, transparent <span class="number">0</span>);</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">41px</span> <span class="number">100%</span>, <span class="number">61px</span> <span class="number">100%</span>, <span class="number">83px</span> <span class="number">100%</span>;</span><br></pre></td></tr></table></figure><h2 id="连续的图像边框"><a href="#连续的图像边框" class="headerlink" title="连续的图像边框"></a>连续的图像边框</h2><style>  @keyframes anti {    to {      background-position: 100%;    }  }  .css-box9 {    width: 100px;    height: 50px;    border: 5px solid transparent;    background:       linear-gradient(white, white) padding-box,      url('https://assets.codepen.io/t-1/user-default-avatar.jpg?fit=crop&format=auto&height=80&version=0&width=80') border-box 0 0 / cover;    margin: 20px;  }  .css-box10 {    width: 100px;    height: 50px;    border: 5px solid transparent;    background:       linear-gradient(white, white) padding-box,      repeating-linear-gradient(-45deg, red 0, red 12.5%, transparent 0, transparent 25%, blue 0, blue 37.5%, transparent 0, transparent 50%) 0 / 1em 1em;    margin: 20px;  }  .css-box11 {    width: 100px;    height: 50px;    border: 1px solid transparent;    background:       linear-gradient(white, white) padding-box,      repeating-linear-gradient(-45deg, black 0, black 25%, white 0, white 50%) 0 / .6em .6em;    animation: anti 12s linear infinite;    margin: 20px;  }  .css-box12 {    border-top: .2em solid transparent;    border-image: 100% 0 0 linear-gradient(90deg, black 0, black 5em, transparent 0);    margin: 20px;  }</style><h3 id="图像边框随元素宽高和边框厚度改变"><a href="#图像边框随元素宽高和边框厚度改变" class="headerlink" title="图像边框随元素宽高和边框厚度改变"></a>图像边框随元素宽高和边框厚度改变</h3><div class="css-box9"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">5px</span> solid transparent;</span><br><span class="line"><span class="attribute">background</span>: </span><br><span class="line">  <span class="built_in">linear-gradient</span>(white, white) padding-box,</span><br><span class="line">  <span class="built_in">url</span>(<span class="string">&#x27;https://assets.codepen.io/t-1/user-default-avatar.jpg?fit=crop&amp;format=auto&amp;height=80&amp;version=0&amp;width=80&#x27;</span>) border-box <span class="number">0</span> <span class="number">0</span> / cover;</span><br></pre></td></tr></table></figure>相当于用一个div实现了两个div(白色内容块+底部背景)的效果。<h3 id="老式信封"><a href="#老式信封" class="headerlink" title="老式信封"></a>老式信封</h3><div class="css-box10"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">5px</span> solid transparent;</span><br><span class="line"><span class="attribute">background</span>: </span><br><span class="line">  <span class="built_in">linear-gradient</span>(white, white) padding-box,</span><br><span class="line">  <span class="built_in">repeating-linear-gradient</span>(-<span class="number">45deg</span>, red <span class="number">0</span>, red <span class="number">12.5%</span>, transparent <span class="number">0</span>, transparent <span class="number">25%</span>, blue <span class="number">0</span>, blue <span class="number">37.5%</span>, transparent <span class="number">0</span>, transparent <span class="number">50%</span>) <span class="number">0</span> / <span class="number">1em</span> <span class="number">1em</span>;</span><br></pre></td></tr></table></figure>四个条纹需要8个色标，这里简化到50%只需要4个色标，如果写到100%，需要8个。<h3 id="蚂蚁行军"><a href="#蚂蚁行军" class="headerlink" title="蚂蚁行军"></a>蚂蚁行军</h3><div class="css-box11"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line"><span class="attribute">background</span>: </span><br><span class="line">  <span class="built_in">linear-gradient</span>(white, white) padding-box,</span><br><span class="line">  <span class="built_in">repeating-linear-gradient</span>(-<span class="number">45deg</span>, black <span class="number">0</span>, black <span class="number">25%</span>, white <span class="number">0</span>, white <span class="number">50%</span>) <span class="number">0</span> / .<span class="number">6em</span> .<span class="number">6em</span>;</span><br><span class="line"><span class="attribute">animation</span>: anti <span class="number">12s</span> linear infinite;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> anti &#123;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><div class="css-box12">  <sup>1</sup>this is a sentence.</div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-top</span>: .<span class="number">2em</span> solid transparent;</span><br><span class="line"><span class="attribute">border-image</span>: <span class="number">100%</span> <span class="number">0</span> <span class="number">0</span> <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, black <span class="number">0</span>, black <span class="number">5em</span>, transparent <span class="number">0</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> css揭秘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+butterfly主题+自动部署构建博客</title>
      <link href="/2022/03/12/hexo-butterfly%E4%B8%BB%E9%A2%98-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E6%9E%84%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/03/12/hexo-butterfly%E4%B8%BB%E9%A2%98-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E6%9E%84%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="使用hexo搭建博客"><a href="#使用hexo搭建博客" class="headerlink" title="使用hexo搭建博客"></a>使用hexo搭建博客</h1><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h2 id="命令配置"><a href="#命令配置" class="headerlink" title="命令配置"></a>命令配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server: <span class="string">&quot;hexo server --log&quot;</span> // 添加--<span class="built_in">log</span>打印日志</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-browsersync --save</span><br></pre></td></tr></table></figure><p>​        注意：更改_config.yml等配置文件需要重新运行；</p><h1 id="butterfly主题配置"><a href="#butterfly主题配置" class="headerlink" title="butterfly主题配置"></a>butterfly主题配置</h1><h2 id="主题下载使用"><a href="#主题下载使用" class="headerlink" title="主题下载使用"></a>主题下载使用</h2><p>butterfly [<a href="https://butterfly.js.org/posts/21cfbf15/#%E5%AE%89%E8%A3%9D]">https://butterfly.js.org/posts/21cfbf15/#%E5%AE%89%E8%A3%9D]</a></p><p>可以使用npm包，也可以克隆代码。这边选择克隆代码，好处是可以更自由地编辑，不过clone 下来目录下存在.git文件夹，需要进行删除：可参考这篇文章 <a href="https://blog.csdn.net/xiebaochun/article/details/114143346">https://blog.csdn.net/xiebaochun/article/details/114143346</a></p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>会在themes文件夹下生成butterfly目录</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>修改_config.yaml里的theme</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>安装pug和stylus渲染器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h2 id="主题配置优化"><a href="#主题配置优化" class="headerlink" title="主题配置优化"></a>主题配置优化</h2><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>​        编辑_config.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://duanlvxin.github.io</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/duanlvxin/duanlvxin.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>​        执行部署命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><p>​    查看&lt;username&gt;.github.io</p><h2 id="使用github-actions"><a href="#使用github-actions" class="headerlink" title="使用github actions"></a>使用github actions</h2><p>在.github的workflows文件下新建deploy.yml(文件名可以变，文件夹必须是workflows)</p><p>源码在dev分支上，打包好的文件在master上；<br>HEXO_DEPLOY_KEY是github上配置的</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-18.04</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.event.repository.owner.id</span> <span class="string">==</span> <span class="string">github.event.sender.id</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">source</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;16&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span>          </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo generate</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@v4.2.5</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">          <span class="attr">folder:</span> <span class="string">public</span></span><br><span class="line">          <span class="attr">ssh-key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拖拽内部嵌有iframe的元素，无法监听到鼠标事件问题解决</title>
      <link href="/2022/03/12/%E6%8B%96%E6%8B%BD%E5%86%85%E9%83%A8%E5%B5%8C%E6%9C%89iframe%E7%9A%84%E5%85%83%E7%B4%A0%EF%BC%8C%E6%97%A0%E6%B3%95%E7%9B%91%E5%90%AC%E5%88%B0%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2022/03/12/%E6%8B%96%E6%8B%BD%E5%86%85%E9%83%A8%E5%B5%8C%E6%9C%89iframe%E7%9A%84%E5%85%83%E7%B4%A0%EF%BC%8C%E6%97%A0%E6%B3%95%E7%9B%91%E5%90%AC%E5%88%B0%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>单纯的拖拽实现起来很简单，主要原理就是在鼠标按下时，监听鼠标的mousemove事件，根据鼠标移动的距离调整元素的坐标值；在鼠标松开时，取消mousemove的监听事件。但如果被拖拽的元素内存在iframe,在iframe内的鼠标事件无法被监听到，就会存在一些问题。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在该被拖拽元素外层套一层,当鼠标按下时，在该层监听事件，当鼠标松开时，隐藏该外层。可以通过调整z-index的值来实现。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><a href="https://codepen.io/duanlvxin/pen/jOajwGO">https://codepen.io/duanlvxin/pen/jOajwGO</a></p><p>比较：<br>(ps: codepen上演示有点问题，放到本地测试的)<br>不使用mask时，拖拽到最底部的时候，鼠标在iframe内松开，<strong>还能</strong>继续拖拽：<br><video src="/video/before.mp4" width="100%" height="100%" controls="controls"></video><br>使用mask时，拖拽到最底部的时候，鼠标在iframe内松开，<strong>不能</strong>继续拖拽：<br><video src="/video/after.mp4" width="100%" height="100%" controls="controls"></video></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html 事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html属性顺序校验和排序</title>
      <link href="/2022/03/06/html%E5%B1%9E%E6%80%A7%E9%A1%BA%E5%BA%8F%E6%A0%A1%E9%AA%8C%E5%92%8C%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/03/06/html%E5%B1%9E%E6%80%A7%E9%A1%BA%E5%BA%8F%E6%A0%A1%E9%AA%8C%E5%92%8C%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在使用vue编写.vue文件时，为了代码风格的统一，需要规范html标签中属性的顺序。<br>不同的团队对于顺序的定义不同，以我们的团队为例，约定好的顺序需要为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-xx=xx &gt; xx=xx &gt; :xx=xx  &gt; @xx=xx</span><br></pre></td></tr></table></figure><p>那么如果我们需要校验属性顺序是否符合这个规则，如果不符合进行排序使其符合要怎么做呢？</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于判断是否符合规则：</p><ol><li>定义一个map对象存储属性与优先级的关系，codeMap</li><li>将属性数组中的属性根据这个codeMap映射出优先级数组。</li><li>问题就转换为判断这个数组是否是升序（或降序，根据codeMap中对于优先级的定义而定）</li></ol><p>对于排序：</p><ol><li>可以用js的sort函数，只需要实现传入的参数：compare函数</li><li>compare函数中的大小比较即是根据属性的优先级大小。</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>对于判断是否符合规则：</p><ol><li>定义codeMap,这里数字越小，优先级越高<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> codeMap = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/^v-.+=.*$/</span>), <span class="number">1</span>],</span><br><span class="line">  [<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/^[^@:]+=.*$/</span>), <span class="number">2</span>],</span><br><span class="line">  [<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/^:.+=.*$/</span>), <span class="number">3</span>],</span><br><span class="line">  [<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/^@.+=.*$/</span>), <span class="number">4</span>]</span><br><span class="line">])</span><br></pre></td></tr></table></figure></li><li>生成优先级数组<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getWeight</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> [key, value] <span class="keyword">of</span> codeMap) &#123;</span><br><span class="line">    <span class="keyword">if</span>(key.<span class="title function_">test</span>(str)) &#123;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getWeightArr</span> (arr) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    res.<span class="title function_">push</span>(<span class="title function_">getWeight</span>(item));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>判断数组是否升序<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isAscending</span> (arr) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,len=arr.<span class="property">length</span>-<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i]&gt;arr[i+<span class="number">1</span>])&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>对于排序：</p><ol><li>只需实现compare函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compare</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> weightA = <span class="title function_">getWeight</span>(a);</span><br><span class="line">  <span class="keyword">const</span> weightB = <span class="title function_">getWeight</span>(b);</span><br><span class="line">  <span class="keyword">return</span> weightA - weightB;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>以下面这个数组为例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;:visible2=&#x27;visible2&#x27;&quot;</span>, <span class="string">&quot;style=&#x27;color: red&#x27;&quot;</span>, <span class="string">&quot;:visible=&#x27;visible&#x27;&quot;</span>, <span class="string">&quot;class = &#x27;test&quot;</span>, <span class="string">&quot;@click=&#x27;handleClick&#x27;&quot;</span>];</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> weightArr = <span class="title function_">getWeightArr</span>(arr);</span><br><span class="line"><span class="keyword">const</span> sortedArr = arr.<span class="title function_">sort</span>(compare);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sortedArr);</span><br><span class="line"><span class="keyword">const</span> sortedWeightArr = <span class="title function_">getWeightArr</span>(sortedArr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isAscending</span>(weightArr));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isAscending</span>(sortedWeightArr));</span><br></pre></td></tr></table></figure><p>打印结果：<br><img src="/../img/html%E5%B1%9E%E6%80%A7-%E7%BB%93%E6%9E%9C.PNG" alt="alt 结果" title="结果"></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> js </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据选中状态过滤树</title>
      <link href="/2022/03/05/%E6%A0%B9%E6%8D%AE%E9%80%89%E4%B8%AD%E7%8A%B6%E6%80%81%E8%BF%87%E6%BB%A4%E6%A0%91/"/>
      <url>/2022/03/05/%E6%A0%B9%E6%8D%AE%E9%80%89%E4%B8%AD%E7%8A%B6%E6%80%81%E8%BF%87%E6%BB%A4%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>工作上遇到的这个问题，主要需求是根据选中状态过森林。对于森林中的每棵树，如果节点选中，则保留，如果该节点的父节点未被选中，则需向上提升，得到最简的一棵树。举例如下：</p><p><img src="/../img/%E7%A4%BA%E4%BE%8B.jpg" alt="alt 示例" title="示例"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">对于森林中的每棵树：</span></span><br><span class="line">  <span class="string">对于树中的每一个节点：</span></span><br><span class="line">    <span class="string">如果节点被选中：</span></span><br><span class="line">      <span class="string">保存节点，</span></span><br><span class="line">      <span class="string">重复过滤节点的孩子</span></span><br><span class="line">    <span class="string">否则：</span></span><br><span class="line">      <span class="string">保存过滤过的节点的孩子</span></span><br></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">filterForest</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(item.<span class="property">select</span>)&#123;</span><br><span class="line">      item.<span class="property">children</span> = <span class="title function_">filterForest</span>(item.<span class="property">children</span>);</span><br><span class="line">      res.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res = res.<span class="title function_">concat</span>(<span class="title function_">filterForest</span>(item.<span class="property">children</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>以上面的那个森林为例，转换为json格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">const forest = <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    id<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    name<span class="punctuation">:</span> &#x27;节点<span class="number">1</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">    select<span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    children<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        id<span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">        name<span class="punctuation">:</span>&#x27;节点<span class="number">11</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">        select<span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        children<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            id<span class="punctuation">:</span> <span class="number">111</span><span class="punctuation">,</span></span><br><span class="line">            name<span class="punctuation">:</span> &#x27;节点<span class="number">111</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">            select<span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">            children<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        id<span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">        name<span class="punctuation">:</span> &#x27;节点<span class="number">12</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">        select<span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        children<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            id<span class="punctuation">:</span> <span class="number">121</span><span class="punctuation">,</span></span><br><span class="line">            name<span class="punctuation">:</span> &#x27;节点<span class="number">121</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">            select<span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">            children<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                id<span class="punctuation">:</span> <span class="number">1211</span><span class="punctuation">,</span></span><br><span class="line">                name<span class="punctuation">:</span> &#x27;节点<span class="number">1211</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">                select<span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">                children<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">              <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                id<span class="punctuation">:</span> <span class="number">1212</span><span class="punctuation">,</span></span><br><span class="line">                name<span class="punctuation">:</span> &#x27;节点<span class="number">1212</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">                select<span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">                children<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            id<span class="punctuation">:</span> <span class="number">122</span><span class="punctuation">,</span></span><br><span class="line">            name<span class="punctuation">:</span> &#x27;节点<span class="number">122</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">            select<span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">            children<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            id<span class="punctuation">:</span> <span class="number">123</span><span class="punctuation">,</span></span><br><span class="line">            name<span class="punctuation">:</span> &#x27;节点<span class="number">123</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">            select<span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">            children<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    id<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    name<span class="punctuation">:</span> &#x27;节点<span class="number">2</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">    select<span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    children<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        id<span class="punctuation">:</span> <span class="number">21</span><span class="punctuation">,</span></span><br><span class="line">        name<span class="punctuation">:</span> &#x27;节点<span class="number">21</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">        select<span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        children<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    id<span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    name<span class="punctuation">:</span> &#x27;节点<span class="number">3</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">    select<span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    children<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        id<span class="punctuation">:</span> <span class="number">31</span><span class="punctuation">,</span></span><br><span class="line">        name<span class="punctuation">:</span> &#x27;节点<span class="number">31</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">        select<span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        children<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        id<span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">        name<span class="punctuation">:</span> &#x27;节点<span class="number">32</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">        select<span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        children<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>调用函数后打印结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">filterForest</span>(forest));</span><br></pre></td></tr></table></figure><p>结果：<br><img src="/../img/%E7%BB%93%E6%9E%9C.jpg" alt="alt 结果" title="结果"></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
